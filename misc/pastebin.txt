(C) DJI & others, NOT BY ME, FOUND AT "https://pastebin.com/raw/sbYY48Hi".

//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
// Copyright (c) 2018 Retargetable Decompiler <info@retdec.com>
//

#include <fcntl.h>
#include <getopt.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stropts.h>
#include <sys/mman.h>
#include <sys/poll.h>
#include <sys/prctl.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <time.h>
#include <unistd.h>

// ----------------- Float Types Definitions ------------------

typedef float float32_t;
typedef double float64_t;

// ------------------------ Structures ------------------------

struct ProgramVars {
    int32_t e0;
};

struct _IO_FILE {
    int32_t e0;
};

struct pollfd {
    int32_t e0;
    int16_t e1;
    int16_t e2;
};

struct sockaddr {
    int32_t e0;
    char e1[14];
};

struct stat {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    int32_t e8;
    int32_t e9;
    int32_t e10;
    int32_t e11;
    int32_t e12;
    int32_t e13;
    int32_t e14;
    int32_t e15;
    int32_t e16;
    int32_t e17;
    int32_t e18;
    int32_t e19;
};

struct timeval {
    int32_t e0;
    int32_t e1;
};

struct tm {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    int32_t e8;
    int32_t e9;
    char * e10;
};

// ------------------- Function Prototypes --------------------

int32_t __kfifo_alloc(int32_t * a1, int32_t a2, int32_t a3);
int32_t __kfifo_free(int32_t * a1);
int32_t __kfifo_in(int32_t * a1, int32_t a2);
int32_t __kfifo_in_r(int32_t * a1, int32_t a2);
int32_t __kfifo_init(int32_t * a1, int32_t a2, int32_t a3, int32_t a4);
int32_t __kfifo_len_r(void);
char __kfifo_max_r(int32_t a1, int32_t a2);
int32_t __kfifo_out(int32_t a1);
int32_t __kfifo_out_peek(void);
char __kfifo_out_peek_r(int32_t * a1, int32_t a2, int32_t a3, int32_t a4);
int32_t __kfifo_skip_r(int32_t a1, int32_t a2, int32_t a3);
void _duss_event_callback_skip_ack(void);
int32_t entry_point(int32_t a1);
int32_t function_100b8(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10);
int32_t function_10254(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_102e4(int32_t a1, int32_t * a2, int32_t a3, int32_t a4);
void function_103aa(void);
int32_t function_103ae(int32_t a1, int32_t a2);
void function_10454(void);
int32_t function_10458(void);
int32_t function_1045a(int32_t a1, int32_t a2);
int32_t function_104c0(int32_t a1, int32_t a2);
int32_t function_105c0(char * a1, char * a2, int32_t a3);
int32_t function_106b4(char * a1, int32_t a2, char * a3, uint32_t a4);
void function_1090c(int32_t a1, int32_t a2, int32_t a3);
int32_t function_10934(int32_t * a1, char * a2, uint32_t a3);
int32_t function_10b0c(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_10c44(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_10ed4(char * a1, uint32_t a2, int32_t a3);
int32_t function_10fd8(int32_t a1, int32_t * a2, int32_t a3, int32_t a4);
int32_t function_110b0(char * file_path, int32_t offset, char * a3, int32_t a4);
int32_t function_11224(int32_t result, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7);
char * function_114d8(char * a1, char * a2);
void function_115d8(void);
int32_t function_11abc(int32_t a1, int32_t a2, char * a3);
int32_t function_11bea(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15, int32_t a16, int32_t a17, int32_t a18, int32_t a19, int32_t a20, int32_t a21, int32_t a22, int32_t a23, int32_t a24, int32_t a25, int32_t a26);
int32_t function_122f4(char a1, int32_t a2, char a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, char a10);
int32_t function_1259c(int32_t * a1, int32_t a2, char * a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10);
int32_t function_12800(int32_t a1, int32_t a2, int32_t a3, char * a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_12a24(int32_t a1, int32_t a2);
int32_t function_12a9c(int32_t a1, int32_t a2, char * a3);
int32_t function_12aec(int32_t a1, int32_t a2, char * a3, int32_t a4);
int32_t function_12ba4(int32_t a1, int32_t a2, char * a3, int32_t a4);
int32_t function_12f5c(int32_t a1, int32_t a2, int32_t a3);
int32_t function_13170(int32_t a1, int32_t a2, char * a3);
int32_t function_132ac(int32_t a1, int32_t a2, char * a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_135a0(int32_t a1, int32_t a2);
int32_t function_136ac(int32_t a1, int32_t a2, char * a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15, int32_t a16, int32_t a17, int32_t a18, int32_t a19);
int32_t function_13e88(int32_t a1, int32_t a2, char * a3, int32_t a4);
int32_t function_14088(int32_t a1, int32_t a2, char * a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_1425c(void);
void function_1426c(int32_t a1);
int32_t function_1427c(void);
int32_t function_1429a(int32_t a1);
int32_t function_14368(int32_t a1, int32_t a2, char * a3, int32_t a4);
int32_t function_14440(int32_t a1);
int32_t function_14478(int32_t a1, int32_t a2, int32_t a3);
void function_14490(int32_t a1, int32_t a2, int32_t a3, char * a4, int32_t a5, int32_t a6);
int32_t function_144c4(int32_t a1, int32_t a2);
int32_t function_14548(int32_t a1, int32_t a2);
int32_t function_1463e(int32_t a1, char a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_14664(int32_t * a1, int32_t a2);
int32_t function_14680(int32_t a1);
int32_t function_14690(void);
int32_t function_146a4(void);
int32_t function_146c6(void);
int32_t function_146c8(void);
void function_146ec(int32_t a1);
int32_t function_146f0(void);
int32_t function_14712(void);
int32_t function_14714(int32_t a1, int32_t a2);
int32_t function_14724(void);
int32_t function_14734(int32_t a1);
void function_21d4(void);
int32_t function_28b4(void);
int32_t function_28ce(int32_t a1, int32_t a2, int32_t * a3, int32_t a4, int32_t a5);
void function_28ee(int32_t a1, int32_t * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_292e(int32_t a1, int32_t * a2, int32_t a3, int32_t result, int32_t a5, int32_t a6);
int32_t function_2bd8(void);
int32_t function_2bdc(int32_t a1, int32_t a2);
int32_t function_2c5a(int32_t a1);
int32_t function_2d5c(int32_t a1, int32_t a2);
int32_t function_2dda(char * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15, int32_t a16, int32_t a17, int32_t a18, int32_t a19, int32_t a20, int32_t a21, int32_t a22, int32_t a23, int32_t a24, int32_t a25, int32_t a26, int32_t a27);
int32_t function_32e6(int32_t a1, char a2, int32_t a3, int32_t a4, int32_t a5);
void function_3758(void);
void function_3808(void);
int32_t function_3a56(int32_t a1, int32_t a2, int32_t a3);
void function_3aa0(void);
void function_3ca0(void);
void function_3e80(void);
void function_3f54(void);
void function_3f9e(void);
void function_3fca(void);
int32_t function_4108(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_4130(int32_t a1, int32_t a2);
void function_413a(void);
void function_4154(void);
void function_415e(void);
void function_4162(void);
void function_4164(void);
void function_4196(void);
void function_41ce(int32_t a1);
void function_41d0(void);
void function_42ce(void);
void function_42d0(void);
void function_42de(void);
void function_42f4(void);
void function_43c4(void);
int32_t function_4504(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4616(uint32_t result, int32_t a2, int32_t a3, uint32_t a4);
char * function_464c(int32_t a1, int32_t a2);
int32_t function_4692(int32_t result, int32_t a2);
int32_t function_4d02(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4d92(uint32_t a1, int32_t a2, int32_t a3);
char * function_4e22(int32_t a1, int32_t a2, int32_t a3, uint32_t a4);
int32_t function_4ffa(int32_t a1, int32_t a2, int32_t a3);
int32_t function_50e2(int32_t a1, int32_t a2);
int32_t function_526a(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5386(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5492(int32_t a1, int32_t a2, int32_t a3);
int32_t function_5602(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7);
int32_t function_5732(int32_t result, int32_t a2);
int32_t function_57b6(int32_t a1, int32_t a2);
int32_t function_58da(int32_t a1, int32_t a2, int32_t a3, char a4);
int32_t function_5c62(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_623a(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_67ea(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10);
int32_t function_6926(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_74ca(int32_t a1, int32_t a2);
int32_t function_74d6(int32_t a1, int32_t a2);
int32_t function_74e2(int32_t a1, int32_t a2, int32_t a3);
int32_t function_74ee(int32_t result, int32_t a2);
int32_t function_74fa(int32_t a1, int32_t a2);
int32_t function_7506(int32_t a1, int32_t a2, int32_t a3);
int32_t function_7512(int32_t a1, int32_t a2, int32_t a3);
void function_7524(void);
int32_t function_78f6(int32_t a1, int32_t a2);
int32_t function_7902(int32_t a1, int32_t a2);
int32_t function_790e(int32_t result, int32_t a2);
int32_t function_791a(int32_t result, int32_t a2);
int32_t function_7938(int32_t result);
int32_t function_7968(int32_t result);
int32_t function_7972(uint32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_79d0(int32_t a1, int32_t a2);
int32_t function_7a34(int32_t a1);
int32_t function_7a68(int32_t a1);
void function_7a9a(void);
void function_7aa4(void);
char * function_7ad8(int32_t a1);
int32_t function_7af0(void);
int32_t function_7b04(char * a1, int32_t a2);
int32_t function_7b1a(int32_t a1, int32_t a2);
int32_t function_7b54(int32_t result);
int32_t function_7b5c(int32_t a1, int32_t * a2, int32_t * a3, int32_t a4, int32_t a5);
int32_t function_7bac(int32_t a1);
int32_t function_7c0c(void);
void function_7c5e(int32_t a1);
int32_t function_7c68(void);
int32_t function_7cc0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_7f54(int32_t a1, int32_t a2, int32_t a3);
int32_t function_7f7c(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int64_t a13, int32_t a14, int64_t a15, int32_t a16, int32_t a17, int32_t a18, int32_t a19, int32_t a20, int32_t a21, int32_t a22, int32_t a23, int32_t a24, char a25, int32_t a26, int32_t a27, int32_t a28, int32_t a29, int32_t a30, int32_t a31, int32_t a32, int32_t a33, int32_t a34, int32_t a35, int32_t a36, int32_t a37, int32_t a38, int32_t a39, int32_t a40, int32_t a41, int32_t a42, int32_t a43, int32_t a44, int32_t * a45, int32_t a46, int32_t a47);
void function_94e0(void);
void function_9520(void);
int32_t function_9b34(char * a1);
int32_t function_9c00(int32_t a1, int32_t * a2);
int32_t function_9d12(int32_t a1);
int32_t function_9d16(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_9ed0(int32_t a1);
char * function_9f70(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_a154(void);
void function_a284(void);
int32_t function_a288(void);
void function_a290(int32_t a1, int32_t a2);
int32_t function_a3e4(int32_t a1);
int32_t function_a3fe(int32_t a1, int32_t a2, int32_t a3);
int32_t function_a4f4(int32_t a1);
int32_t function_a5b8(int32_t a1);
int32_t function_a770(char * a1, int16_t a2, char * a3, int32_t * a4);
int32_t function_a7ac(int32_t a1, char * a2, int32_t a3);
int32_t function_a9c4(int32_t a1, char * a2);
int32_t function_ad56(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_ad80(int32_t a1, char * a2);
int32_t function_aee8(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
char * function_af1e(int32_t a1, int32_t a2);
int32_t function_af62(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t (*a11)(int32_t, int32_t, int32_t, int32_t), int32_t a12, int32_t a13, int32_t a14, int32_t a15, char * a16, char a17, int32_t a18, int16_t a19, char a20, char a21, int32_t a22, int32_t a23, int32_t a24, int32_t a25, int32_t a26, int32_t a27, int32_t a28, int32_t a29, int32_t a30, int32_t a31, int32_t a32, int32_t a33, int32_t a34, int32_t a35, int32_t a36, int32_t a37, int32_t a38, int32_t a39);
int32_t function_c1aa(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_c280(int32_t a1);
int32_t function_c29a(void);
int32_t function_c2a0(int32_t a1, int32_t a2, int32_t a3);
void function_c2d2(void);
int32_t function_c2d6(int32_t a1, int32_t a2);
int32_t function_c2de(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13);
int32_t function_c30c(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t (*a7)(int32_t, int32_t), int32_t (*a8)(int32_t, int32_t), int32_t (*a9)(int32_t, int32_t), int32_t a10, int32_t a11, int32_t (*a12)(int32_t, int32_t, int32_t), int32_t a13, int32_t a14);
int32_t function_c392(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5, int32_t a6, int32_t a7);
int32_t function_c47e(int64_t * a1, uint32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_c4a0(int32_t a1);
int32_t function_c53e(int32_t result);
int32_t function_c540(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_c8e0(char * a1);
int32_t function_c978(int32_t a1, int32_t a2, char a3);
int32_t function_ca42(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_ca60(int32_t a1, int32_t a2);
int32_t function_cad2(int32_t a1, int32_t a2);
int32_t function_cae4(int32_t a1, int32_t a2, int32_t a3);
int32_t function_cb7a(int32_t a1, int32_t a2, int32_t a3);
int32_t function_cb98(int32_t a1);
int32_t function_cbba(int32_t a1, int32_t a2, int32_t a3);
int32_t function_cc9a(int32_t a1, int32_t a2, int32_t a3);
int32_t function_ccae(int32_t a1, int32_t a2, int32_t a3);
int32_t function_ccbc(int32_t a1, int32_t a2);
int32_t function_cd3a(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15);
int32_t function_d05e(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_d0c0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_d0c8(int32_t a1);
int32_t function_d166(int32_t a1, int32_t a2);
int32_t function_d180(void);
int32_t function_d1a4(int32_t result);
int32_t function_d1ca(int32_t a1, int32_t a2, int32_t a3);
int32_t function_d208(void);
int32_t function_d218(char a1);
int32_t function_d21e(void);
int32_t function_d222(void);
int32_t function_d22e(int32_t a1, int32_t a2);
int32_t function_d2cc(int32_t a1, char a2);
char * function_d358(char * a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_d40c(int32_t * a1, int32_t a2);
int32_t function_d430(int32_t a1, int32_t * a2);
char * function_d480(int32_t a1, int32_t stream);
int32_t function_d63c(int32_t a1, int32_t a2);
int32_t function_d67c(int32_t a1, int32_t a2, int32_t a3);
int32_t function_d6ae(void);
int32_t function_d6b0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_d6e2(void);
int32_t function_d6e4(int32_t fd, int32_t a2);
int32_t function_d8a2(int32_t a1, int32_t a2, int32_t a3);
int32_t function_d8dc(int32_t result, char * a2, int32_t a3);
int32_t function_d9a0(int32_t result, char * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7);
int32_t function_dabc(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
char * function_dae6(int32_t a1);
int32_t function_db24(int32_t a1);
void function_db44(int32_t a1, int32_t a2);
int32_t function_db62(int32_t a1);
int32_t function_db80(int32_t a1, char * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_dc66(int32_t a1);
int32_t function_dcea(void);
int32_t function_dcf0(void);
int32_t function_dcf4(int32_t a1, int32_t a2, int32_t a3);
int32_t function_dd4c(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11);
int32_t function_df60(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_e1b8(int32_t * a1, int32_t * a2, int32_t a3);
void function_e248(int32_t a1);
int32_t function_e250(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_e324(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14);
int32_t function_e5d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15, int32_t a16, int32_t a17, int32_t a18, int32_t a19, int32_t a20, int32_t a21, int32_t a22);
int32_t function_eb28(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13);
int32_t function_ecf0(int32_t a1, int32_t * a2, int32_t a3, int32_t a4);
int32_t function_ee06(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_ee2c(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_eec4(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_efa4(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10);
int32_t function_f104(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7);
int32_t function_f208(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14);
float64_t function_f2d4(float64_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_f344(int32_t a1);
float64_t function_f348(float64_t a1);
int32_t function_f4be(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t (*a7)(int32_t, int32_t), int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14);
int32_t function_f548(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_f5b4(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_f6de(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t result, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12);
int32_t function_f75c(int32_t a1, char * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10);
int32_t function_f8f0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_f978(int32_t a1, char * a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_faa0(char * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int16_t a6, int32_t (*a7)(int32_t), int32_t (*a8)(int32_t, int32_t, int32_t), int32_t a9, int16_t a10, int16_t a11, int16_t a12, int32_t a13, int32_t a14, int32_t a15, int32_t a16, int32_t a17);
char * function_fcac(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int64_t a11);
int32_t function_ff4e(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15);
int32_t function_ffbc(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
void time_diff(void);
int32_t unknown_10108c0(void);
int32_t unknown_101bc(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15);
int32_t unknown_10cce0(void);
int32_t unknown_146d8(void);
int32_t unknown_387f0(void);
int32_t unknown_3b430(int32_t a1);
int32_t unknown_7b10(int32_t a1, int32_t a2, int32_t a3);
int32_t unknown_8264(int32_t a1);
int32_t unknown_8274(int32_t a1, int32_t a2);
int32_t unknown_cbb4(int32_t a1, int32_t a2, int32_t a3);
int32_t unknown_d5d0(int32_t a1);
int32_t unknown_d6c0(void);
int32_t unknown_d6f4(void);
int32_t unknown_ddd8(int32_t a1, int32_t a2);
int32_t unknown_f57c(int32_t a1, int32_t a2, int32_t a3);

// --------------------- Global Variables ---------------------

char g91 = 0; // ItState
int32_t g92 = 0; // LR
int32_t g93 = 0; // R0
int32_t g94 = 0; // R1
int32_t g95 = 0; // R10
int32_t g96 = 0; // R11
int32_t g97 = 0; // R12
int32_t g98 = 0; // R2
int32_t g99 = 0; // R3
int32_t g100 = 0; // R4
int32_t g101 = 0; // R5
int32_t g102 = 0; // R6
int32_t g103 = 0; // R7
int32_t g104 = 0; // R8
int32_t g105 = 0; // R9
int32_t g106 = 0; // SP
bool g1 = false; // flagc
bool g2 = false; // flagn
bool g3 = false; // flagv
bool g4 = false; // flagz
int32_t g5 = -0x12630810; // 0x116ea
int32_t g6 = 0x6821b140; // 0x116ee
int32_t g7 = 0x210379a0; // 0x116f6
int32_t g8 = 0x447baa1f; // 0x116fa
int32_t g9 = 0x6823b150; // 0x117d6
int32_t g10 = 0x200f2200; // 0x117f0
int32_t g11 = -0x76da708; // 0x1180f
int32_t g12 = 0x4294f20d; // 0x11874
int32_t g13 = -0x4ea7132c; // 0x1187c
int32_t g14 = 0x1c507180; // 0x118a8
int32_t g15 = -0x80fbb87; // 0x11d4c
int32_t g16 = 0x791c; // 0x11e80
int32_t g17 = 0x46495700; // 0x15462
int32_t g18 = 0;
int32_t g19 = 13;
int32_t g20 = 0x4400;
int32_t g21 = 0x69000; // 0x1af08
char * g22 = "F"; // 0x1b021
int16_t g23 = 0; // 0x1c02
int32_t g24 = 0;
int32_t g25 = 0; // 0x1ddcc
int32_t g26 = 0; // 0x1ddd0
int32_t g27 = 0; // 0x1dde8
int32_t g28 = 0; // 0x1ddec
int32_t g29 = 0x240000;
int32_t g30 = 0x681600; // 0x1fff
int32_t (*g31)() = (int32_t (*)())36;
int32_t g32 = 0x6816; // 0x2000
int32_t g33 = 124;
int32_t g34 = 0x8e16; // 0x2140
int32_t g35; // 0x217c
int32_t g36 = 0x9616; // 0x2180
char g37 = 0; // 0x21c50
char g38 = 0; // 0x21c51
char g39 = 0; // 0x21c52
char * g40; // 0x21c53
char g41 = 0; // 0x21c5d
char g42 = 0; // 0x21c5e
char g43 = 0; // 0x21c5f
int32_t g44 = 0; // 0x21cd0
int32_t g45 = 0; // 0x21d08
int16_t * g46 = NULL; // 0x21d0c
int16_t g47 = 0; // 0x21d0d
int16_t g48 = 0; // 0x21d10
int16_t g49 = 0; // 0x21d11
int32_t g50 = 0; // 0x21f0c
int16_t * g51 = NULL; // 0x2210a
int16_t g52 = 0; // 0x2210b
int32_t g53 = 0x2a5b;
int32_t g54 = 0x5f000000;
int32_t g55 = 194;
int32_t g56 = 0x2add;
int32_t g57 = 0;
int32_t g58 = 0;
int32_t g59 = 0x120000;
int32_t g60 = 0;
int32_t g61 = 0;
int32_t g63 = 0;
int32_t g64 = 2;
int16_t g65 = 0;
int32_t g66 = 0;
int32_t g67 = 0;
char (*g69)[15] = "l_crc16_append";
int32_t g70 = 0;
int32_t g71 = -0x1ffffe6f; // 0x4d01
int32_t g72 = 3;
int32_t g73 = 18;
int32_t g74 = 0x8001200;
int32_t g75 = 0x3f00008;
int32_t g76 = 0;
int32_t g77 = 0x120000;
int32_t g78 = 0;
int32_t g79 = 0x4b800;
int16_t g80 = 0;
int32_t g81 = 0x120000;
int32_t g82 = 0;
int32_t g83 = 0;
int16_t g84 = 0;
int16_t g85 = 0;
int32_t g86 = 0;
int32_t g87 = 0;
int32_t g88 = 0xa4bd; // 0xdd40
int16_t g89 = 70;
int16_t * g90 = (int16_t *)0x5210046; // 0xffff
int32_t * g62 = &g54;
int32_t * g68 = &g57;

// ------------------------ Functions -------------------------

// Address range: 0x21d4 - 0x24b7
void function_21d4(void) {
    // 0x21d4
    return;
}

// Address range: 0x24b8 - 0x27ff
void _duss_event_callback_skip_ack(void) {
    // 0x24b8
    return;
}

// Address range: 0x2800 - 0x28b3
int32_t entry_point(int32_t a1) {
    int32_t v1 = g92; // bp-4
    int32_t v2 = *(int32_t *)0x2864 + 0x2818; // 0x2810
    int32_t v3 = *(int32_t *)(*(int32_t *)0x2868 + v2);
    g97 = &v3;
    int32_t v4 = *(int32_t *)(*(int32_t *)0x2874 + v2); // 0x2854
    int32_t v5;
    __libc_init((struct ProgramVars *)&v5, NULL, (void (**)())v4, (void (**)())&v3, (char **)g96);
    g94 = 0;
    int32_t v6 = *(int32_t *)0x28b0 + 0x289c; // 0x2894
    g98 = v6;
    int32_t result = __cxa_atexit((void (**)(char *))&v5, NULL, (char *)v6); // 0x289c
    g99 = result;
    g93 = result;
    g96 = &v1;
    ((int32_t (*)(int32_t, int32_t))g92)(result, result);
    return result;
}

// Address range: 0x28b4 - 0x28cb
int32_t function_28b4(void) {
    int32_t result = unknown_10108c0(); // 0x28b4
    g93 = result;
    return result;
}

// Address range: 0x28ce - 0x28ed
int32_t function_28ce(int32_t a1, int32_t a2, int32_t * a3, int32_t a4, int32_t a5) {
    // 0x28ce
    g94 = a2;
    int32_t v1 = (int32_t)a3;
    g98 = v1;
    g99 = a4;
    if (g3) {
        // if_28d2_0_true
        *a3 = g100;
        *(int32_t *)(v1 + 4) = g104;
        *(int32_t *)(v1 + 8) = g95;
        *(int32_t *)(v1 + 12) = g97;
        *(int32_t *)(v1 + 16) = g106;
        *(int32_t *)(v1 + 20) = 0x28d6;
        *(int32_t *)(a4 - 20) = v1;
        *(int32_t *)(a4 - 16) = g102;
        *(int32_t *)(a4 - 12) = g96;
        *(int32_t *)(a4 - 8) = g106;
        *(int32_t *)(a4 - 4) = g92;
        // branch -> after_if_28d2_0
    }
    // after_if_28d2_0
    return unknown_10cce0();
}

// Address range: 0x28ee - 0x292d
void function_28ee(int32_t a1, int32_t * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    int32_t v1 = (int32_t)a2;
    g94 = v1;
    g98 = a3;
    g99 = a4;
    if (g3) {
        // if_28f2_0_true
        *a2 = v1;
        *(int32_t *)(v1 + 4) = a3;
        *(int32_t *)(v1 + 8) = g102;
        *(int32_t *)(v1 + 12) = g103;
        *(int32_t *)(v1 + 16) = g96;
        *(int32_t *)(v1 + 20) = g106;
        *(int32_t *)(v1 + 24) = g92;
        // branch -> after_if_28f2_0
    }
    // after_if_28f2_0
    if (g2) {
        int32_t v2 = g101; // 0x28fa
        g101 = v2 + -0x10000000 * v1;
        *(int32_t *)v2 = a3;
        // branch -> after_if_28fa_0
    }
    // after_if_28fa_0
    if (g4) {
        // if_28fe_0_true
        g92 = g92 & -0x10000 | 0x1a03;
        // branch -> after_if_28fe_0
    }
    // after_if_28fe_0
    if (g3) {
        // if_291e_0_true
        *(int32_t *)(g105 - 32) = v1;
        *(int32_t *)(g105 - 28) = a3;
        *(int32_t *)(g105 - 24) = g100;
        *(int32_t *)(g105 - 20) = g102;
        *(int32_t *)(g105 - 16) = g103;
        *(int32_t *)(g105 - 12) = g105;
        *(int32_t *)(g105 - 8) = g96;
        *(int32_t *)(g105 - 4) = g97;
        int32_t v3 = g105 - 60; // 0x291e
        *(int32_t *)v3 = a4;
        *(int32_t *)(g105 - 56) = g100;
        *(int32_t *)(g105 - 52) = g101;
        *(int32_t *)(g105 - 48) = g103;
        *(int32_t *)(g105 - 44) = g104;
        *(int32_t *)(g105 - 40) = g96;
        *(int32_t *)(g105 - 36) = g97;
        g105 = v3;
        // branch -> after_if_291e_0
    }
}

// Address range: 0x292e - 0x296d
int32_t function_292e(int32_t a1, int32_t * a2, int32_t a3, int32_t result, int32_t a5, int32_t a6) {
    int32_t v1 = (int32_t)a2;
    if (g3) {
        // if_2932_0_true
        *a2 = v1;
        *(int32_t *)(v1 + 4) = a3;
        *(int32_t *)(v1 + 8) = g102;
        *(int32_t *)(v1 + 12) = g103;
        *(int32_t *)(v1 + 16) = g96;
        *(int32_t *)(v1 + 20) = g106;
        *(int32_t *)(v1 + 24) = g92;
        // branch -> after_if_2932_0
    }
    // after_if_2932_0
    if (g2) {
        int32_t v2 = g101; // 0x293a
        g101 = v2 + -0x10000000 * v1;
        *(int32_t *)v2 = a3;
        // branch -> after_if_293a_0
    }
    // after_if_293a_0
    if (g4) {
        // if_293e_0_true
        // branch -> after_if_293e_0
    }
    // after_if_293e_0
    if (g3) {
        // if_294a_0_true
        *(int32_t *)(g104 - 32) = v1;
        *(int32_t *)(g104 - 28) = a3;
        *(int32_t *)(g104 - 24) = g100;
        *(int32_t *)(g104 - 20) = g102;
        *(int32_t *)(g104 - 16) = g103;
        *(int32_t *)(g104 - 12) = g105;
        *(int32_t *)(g104 - 8) = g96;
        *(int32_t *)(g104 - 4) = g97;
        // branch -> after_if_294a_0
    }
    // after_if_294a_0
    if (g4) {
        // branch -> after_if_295e_0
    } else {
        // if_295e_0_true
        g101 = *(int32_t *)(g105 + 8);
        result = *(int32_t *)(g105 + 4);
        // branch -> after_if_295e_0
    }
    // after_if_295e_0
    return result;
}

// Address range: 0x2970 - 0x29b3
int32_t __kfifo_alloc(int32_t * a1, int32_t a2, int32_t a3) {
    int32_t v1 = g101; // 0x2970
    int32_t v2 = (int32_t)a1; // R4
    int32_t v3 = function_28b4(); // 0x2978
    g101 = 0;
    *(int32_t *)v2 = 0;
    *(int32_t *)(v2 + 4) = g101;
    *(int32_t *)(v2 + 12) = a3;
    if (v3 <= 1) {
        // 0x298a
        *(int32_t *)(v2 + 16) = g101;
        *(int32_t *)(v2 + 8) = g101;
        g101 = v1;
        return *(int32_t *)0x29ac;
    }
    char * mem = malloc(a3 * v3); // 0x2996
    int32_t v4 = (int32_t)mem; // 0x2996_3
    *(int32_t *)(v2 + 16) = v4;
    if (mem == NULL) {
        // 0x299e
        *(int32_t *)(v2 + 8) = v4;
        g101 = v1;
        return *(int32_t *)0x29b0;
    }
    // 0x29a4
    *(int32_t *)(v2 + 8) = v3 - 1;
    int32_t result = g101; // 0x29a8
    g101 = v1;
    return result;
}

// Address range: 0x29b4 - 0x29cb
int32_t __kfifo_free(int32_t * a1) {
    int32_t v1 = (int32_t)a1;
    int32_t result = *(int32_t *)(v1 + 16); // 0x29b8
    free((char *)result);
    int32_t v2 = 0; // R3
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 4) = v2;
    *(int32_t *)(v1 + 12) = v2;
    *(int32_t *)(v1 + 16) = v2;
    *(int32_t *)(v1 + 8) = v2;
    return result;
}

// Address range: 0x29cc - 0x29fb
int32_t __kfifo_init(int32_t * a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g101; // 0x29cc
    int32_t v2 = (int32_t)a1; // R4
    g101 = a4;
    uint32_t v3 = function_28b4(); // 0x29d8
    int32_t result = 0; // R2
    *(int32_t *)v2 = 0;
    *(int32_t *)(v2 + 4) = result;
    *(int32_t *)(v2 + 12) = a4;
    *(int32_t *)(v2 + 16) = a2;
    if (v3 > 1) {
        // 0x29f0
        *(int32_t *)(v2 + 8) = v3 - 1;
        g101 = v1;
        return result;
    }
    // 0x29ea
    *(int32_t *)(v2 + 8) = result;
    g101 = v1;
    return *(int32_t *)0x29f8;
}

// Address range: 0x29fc - 0x2a1f
int32_t __kfifo_in(int32_t * a1, int32_t a2) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g101; // 0x29fc
    int32_t v3 = *a1; // 0x29fe
    int32_t v4 = *(int32_t *)(v1 + 4); // 0x29fe
    g101 = v4;
    int32_t v5 = *(int32_t *)(v1 + 8); // 0x29fe
    g102 = v5;
    int32_t v6 = 1 - v3 + v4 + v5; // 0x2a06
    int32_t v7 = -2 - v6 + g98; // 0x2a08
    g3 = ((v7 ^ g98) & (v7 ^ -v6)) < 0;
    g2 = g98 - v6 < 0;
    g4 = g98 == v6;
    g101 = g98;
    g100 = v1;
    int32_t v8;
    function_292e(v1, (int32_t *)a2, g98, v3, v8, 0);
    int32_t * v9 = (int32_t *)g100; // 0x2a16_0
    *v9 = g101 + *v9;
    g101 = v2;
    return g98;
}

// Address range: 0x2a20 - 0x2a37
int32_t __kfifo_out_peek(void) {
    int32_t v1 = g100; // bp-8
    int32_t result = *(int32_t *)(g93 + 4); // 0x2a22
    int32_t v2 = *(int32_t *)g93 - result; // 0x2a26
    int32_t v3 = g98; // 0x2a28
    uint32_t v4 = -2 - v2 + v3; // 0x2a28
    g3 = ((v4 ^ v3) & (v4 ^ -v2)) < 0;
    g2 = v3 - v2 < 0;
    g4 = v3 == v2;
    g1 = v4 <= v3;
    g100 = v3;
    int32_t v5;
    function_28ee(g93, (int32_t *)g94, v3, result, v5, 0, 0, 0);
    g93 = g100;
    g100 = v1;
    return result;
}

// Address range: 0x2a38 - 0x2a47
int32_t __kfifo_out(int32_t a1) {
    // 0x2a38
    g93 = a1;
    int32_t v1 = g100; // 0x2a38
    g100 = a1;
    __kfifo_out_peek();
    int32_t * v2 = (int32_t *)(g100 + 4); // 0x2a40_0
    int32_t v3 = *v2; // 0x2a40
    g99 = v3;
    int32_t result = v3 + a1; // 0x2a42
    g94 = result;
    *v2 = result;
    g100 = v1;
    return result;
}

// Address range: 0x2a48 - 0x2a59
char __kfifo_max_r(int32_t a1, int32_t a2) {
    // 0x2a48
    return 56;
}

// Address range: 0x2a5a - 0x2a5d
int32_t __kfifo_len_r(void) {
    int32_t result = function_28ce(g93, g94, (int32_t *)g98, g99, 0); // 0x2a5a
    g93 = result;
    return result;
}

// Address range: 0x2a5e - 0x2aa5
int32_t __kfifo_in_r(int32_t * a1, int32_t a2) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g101; // 0x2a5e
    int32_t v3 = g98 + g99; // 0x2a60
    g102 = v3;
    g101 = g98;
    int32_t v4 = v1 + 8; // 0x2a64
    int32_t v5 = *(int32_t *)v4; // 0x2a64
    g100 = v1;
    int32_t result; // 0x2aa2
    if (v3 > -7 - v1 + v5 + *(int32_t *)(v1 + 4)) {
        // 0x2aa0
        g101 = 0;
        result = 0;
        // branch -> 0x2aa2
    } else {
        int32_t v6 = *(int32_t *)(v1 + 16); // 0x2a74
        *(char *)(v6 + (v5 & v4)) = (char)g98;
        if (g99 != 1 && g99 > 2) {
            int32_t v7 = v5 & *(int32_t *)g100 + 1; // 0x2a82
            g97 = v7;
            *(char *)(v6 + v7) = (char)(g101 / 256);
            // branch -> 0x2a8c
        }
        int32_t v8 = *(int32_t *)g100; // 0x2a8c
        g103 = v8;
        int32_t v9 = g99 + v8; // 0x2a90
        g3 = ((v9 ^ g99) & (v9 ^ v8)) < 0;
        g2 = v9 < 0;
        g4 = v9 == 0;
        int32_t v10;
        function_292e(g100, (int32_t *)a2, g101, v9, v10, 0);
        int32_t * v11 = (int32_t *)g100; // 0x2a98_0
        *v11 = g102 + *v11;
        result = g101;
        // branch -> 0x2aa2
    }
    // 0x2aa2
    g101 = v2;
    return result;
}

// Address range: 0x2aa6 - 0x2adb
char __kfifo_out_peek_r(int32_t * a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g101; // 0x2aa6
    g103 = a4;
    int32_t v3 = *a1; // 0x2aac
    int32_t v4 = *(int32_t *)(v1 + 4); // 0x2aac
    g102 = v4;
    int32_t v5 = -2 - v4 + v3; // 0x2ab0
    g3 = ((v5 ^ v3) & (v5 ^ -v4)) < 0;
    g101 = v1;
    g104 = a2;
    g100 = a3;
    if (v3 == v4) {
        // 0x2ad4
        // branch -> 0x2ad6
    } else {
        int32_t v6 = function_28ce(v1, a4, (int32_t *)a3, v3, 0); // 0x2abc
        g100 = v6;
        int32_t v7 = g103 + g102; // 0x2acc
        g3 = ((v7 ^ g103) & (v7 ^ g102)) < 0;
        g2 = v7 < 0;
        g4 = v7 == 0;
        function_28ee(g101, (int32_t *)g104, v6, v7, 0, 0, 0, 0);
        // branch -> 0x2ad6
    }
    // 0x2ad6
    g101 = v2;
    return 56;
}

// Address range: 0x2adc - 0x2bd7
int32_t __kfifo_skip_r(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g99; // 0x2adc
    int32_t v2 = g101; // 0x2adc
    g100 = a1;
    g101 = a2;
    int32_t v3;
    int32_t v4 = function_28ce(a1, a2, (int32_t *)a3, v1, v3); // 0x2ae2
    int32_t * v5 = (int32_t *)(g100 + 4); // 0x2ae6_0
    int32_t v6 = *v5 + a2; // 0x2ae8
    g94 = v6;
    int32_t result = v6 + v4; // 0x2aea
    g93 = result;
    g1 = result < v6;
    *v5 = result;
    g99 = v1;
    g101 = v2;
    return result;
}

// Address range: 0x2bd8 - 0x2bdb
int32_t function_2bd8(void) {
    // 0x2bd8
    g93 = 0;
    return 0;
}

// Address range: 0x2bdc - 0x2c59
int32_t function_2bdc(int32_t a1, int32_t a2) {
    int32_t v1 = g101; // 0x2bdc
    int32_t v2 = *(int32_t *)(*(int32_t *)0x2c58 + 0x2be6 + *(int32_t *)0x2c5c); // 0x2be4
    g101 = v2;
    uint32_t v3 = *(int32_t *)v2; // 0x2be8
    int32_t v4;
    int32_t result = &v4; // 0x2c0a_0
    v4 = *(int32_t *)0x2c60 + 0x2c06;
    duss_osal_timer_create(result, a1 + 0x2668);
    duss_log_gen_head();
    g99 = *(int32_t *)0x2c70 + 0x2c44;
    duss_log_print();
    int32_t v5 = *(int32_t *)g101; // 0x2c48
    g93 = result;
    g1 = -2 - v5 + v3 <= v3;
    if (v3 != v5) {
        // 0x2c50
        __stack_chk_fail();
        // branch -> 0x2c54
    }
    // 0x2c54
    g101 = v1;
    return result;
}

// Address range: 0x2c5a - 0x2d5b
int32_t function_2c5a(int32_t a1) {
    int32_t v1 = (int32_t)*(char *)(a1 + 5); // 0x2c6c
    g101 = v1;
    int32_t v2 = *(int32_t *)(*(int32_t *)0x2d34 + 0x2c7e + *(int32_t *)0x2d38); // 0x2c7c
    int16_t * v3 = (int16_t *)(*(int32_t *)0x2d3c + 0x2c92); // 0x2c90_0
    g101 = 64;
    *v3 = (int16_t)((int32_t)*v3 + 1);
    g101 = *(int32_t *)0x2d44 + 0x2cb4;
    duss_log_gen_head();
    g101 = v2;
    g99 = *(int32_t *)0x2d48 + 0x2cda;
    duss_log_print();
    int32_t v4 = *(int32_t *)(a1 + 0x25c8); // 0x2ce0
    duss_event_send(v4);
    int32_t result = 0; // 0x2d20
    if (v4 != 0) {
        // 0x2cec
        duss_log_gen_head();
        g99 = *(int32_t *)0x2d54 + 0x2d18;
        duss_log_print();
        result = v4;
        // branch -> 0x2d1a
    }
    int32_t v5 = *(int32_t *)g101; // 0x2d1e
    g94 = v5;
    g93 = result;
    if (*(int32_t *)v2 != v5) {
        // 0x2d26
        __stack_chk_fail();
        // branch -> 0x2d2a
    }
    // 0x2d2a
    g101 = v1;
    return result;
}

// Address range: 0x2d5c - 0x2dd9
int32_t function_2d5c(int32_t a1, int32_t a2) {
    int32_t v1 = g101; // 0x2d5c
    int32_t v2 = *(int32_t *)(*(int32_t *)0x2dd8 + 0x2d66 + *(int32_t *)0x2ddc); // 0x2d64
    g101 = v2;
    uint32_t v3 = *(int32_t *)v2; // 0x2d68
    int32_t v4;
    int32_t result = &v4; // 0x2d8a_0
    v4 = *(int32_t *)0x2de0 + 0x2d86;
    duss_osal_timer_create(result, a1 + 0x2678);
    duss_log_gen_head();
    g99 = *(int32_t *)0x2df0 + 0x2dc4;
    duss_log_print();
    int32_t v5 = *(int32_t *)g101; // 0x2dc8
    g93 = result;
    g1 = -2 - v5 + v3 <= v3;
    if (v3 != v5) {
        // 0x2dd0
        __stack_chk_fail();
        // branch -> 0x2dd4
    }
    // 0x2dd4
    g101 = v1;
    return result;
}

// Address range: 0x2dda - 0x32e5
int32_t function_2dda(char * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15, int32_t a16, int32_t a17, int32_t a18, int32_t a19, int32_t a20, int32_t a21, int32_t a22, int32_t a23, int32_t a24, int32_t a25, int32_t a26, int32_t a27) {
    // 0x2dda
    g101 = (int32_t)*a1;
    int32_t v1 = *(int32_t *)(*(int32_t *)0x2e44 + 0x2dfe + *(int32_t *)0x2e48); // 0x2dfc
    duss_log_gen_head();
    duss_log_print();
    if (*(int32_t *)v1 != *(int32_t *)v1) {
        // 0x2e3a
        __stack_chk_fail();
        // branch -> 0x2e3e
    }
    // 0x2e3e
    return 0;
}

// Address range: 0x32e6 - 0x3757
int32_t function_32e6(int32_t a1, char a2, int32_t a3, int32_t a4, int32_t a5) {
    *(char *)(g96 + 8) = (char)g92;
    *(char *)(g96 + 9) = a2;
    char * v1 = (char *)(a4 + 16); // 0x32ee_0
    int32_t v2 = g102 & 4; // 0x32f0
    *v1 = (char)(8 * g95 | (int32_t)(*v1 % 8));
    char * v3; // 0x33d8_0
    char * v4; // 0x33f0_0
    char * v5; // 0x3410_0
    char * v6; // 0x3448_0
    char * v7; // 0x3476_0
    char * v8; // 0x34ea_0
    char * v9; // 0x34fe_0
    char * v10; // 0x3522_0
    int16_t * v11; // 0x356a_0
    int32_t v12; // 0x340e
    int32_t v13; // R0
    int32_t v14; // R1
    int32_t v15; // R2
    int32_t v16; // R3
    int32_t v17; // 0x346c
    int32_t v18; // 0x3584
    int32_t v19; // 0x33c2
    int32_t v20; // 0x33ce
    int32_t v21; // 0x33ca
    int32_t v22; // 0x33e6
    int32_t v23; // 0x3410
    int32_t v24; // 0x343e
    int32_t v25; // 0x3470
    int32_t v26; // 0x34bc
    int32_t v27; // 0x3522
    int32_t v28; // 0x355c
    unsigned char v29; // 0x33e6
    unsigned char v30; // 0x33f0
    unsigned char v31; // 0x3420
    unsigned char v32; // 0x343e
    unsigned char v33; // 0x3448
    unsigned char v34; // 0x3476
    unsigned char v35; // 0x348e
    unsigned char v36; // 0x34b2
    unsigned char v37; // 0x34bc
    unsigned char v38; // 0x34d2
    unsigned char v39; // 0x34ea
    unsigned char v40; // 0x34fe
    unsigned char v41; // 0x350c
    unsigned char v42; // 0x3522
    uint16_t v43; // 0x33cc
    uint16_t v44; // 0x33ea
    uint16_t v45; // 0x3442
    int32_t v46; // 0x349a
    int32_t v47; // 0x34de
    int32_t v48; // 0x3516
    unsigned char v49; // 0x3472
    uint16_t v50; // 0x348a
    unsigned char v51; // 0x349a
    unsigned char v52; // 0x34de
    uint16_t v53; // 0x34e2
    unsigned char v54; // 0x3516
    int32_t v55; // 0x358a
    uint32_t v56; // 0x3428
    if (v2 == 0) {
        // 0x3300
        if (*(int32_t *)(g101 + 0x28e4) == 1) {
            // 0x330a
            int32_t v57;
            duss_util_sdr_get_param((int32_t)&v57, 4);
            if (v2 == 0) {
                uint32_t v58 = v57; // 0x334a
                uint32_t v59 = *(int32_t *)(a4 + 24); // 0x3362
                g91 = 56;
                uint32_t v60 = 10 * (((0x2800 * v58 / 0x10000 + (v58 & (int32_t)&g90)) / 10 % 2048 | 2048) - (v59 / 1024 & (int32_t)&g83)); // 0x3376
                if (v60 != 100 && v60 > 101) {
                    // 0x3380
                    duss_log_gen_head();
                    duss_log_print();
                    // branch -> 0x33c0
                }
            } else {
                // 0x3318
                duss_log_gen_head();
                duss_log_print();
                // branch -> 0x33c0
            }
            // 0x33c0
            v19 = g101;
            v14 = v19 + 0x2600;
            *(char *)(v19 + 0x261d) = 15;
            v21 = *(int32_t *)0x3724 + 0x33ce;
            v15 = v21;
            v43 = *(int16_t *)v21;
            v20 = v14;
            v16 = v20 + 29;
            *(char *)(v20 + 30) = (char)v43;
            v3 = (char *)(v16 + 2);
            v13 = 0;
            *v3 = (char)((int32_t)*v3 & 248 | (int32_t)v43 / 256 % 8);
            v22 = v16;
            v29 = *(char *)(v22 + 2);
            v44 = *(int16_t *)(v15 + 2);
            v4 = (char *)(v22 + 3);
            v30 = *v4;
            *v4 = (char)((int32_t)(v44 / 32 % 64) | (int32_t)v30 & 192);
            *(char *)(v16 + 2) = (char)(8 * (int32_t)v44 & 248 | (int32_t)(v29 % 8));
            v12 = (int32_t)*(int16_t *)(v15 + 4);
            v23 = v16;
            v5 = (char *)(v23 + 3);
            v31 = *(char *)(v23 + 5);
            *v5 = (char)((int32_t)(*v5 % 64) | 64 * v12 & 192);
            v56 = v12;
            *(char *)(v16 + 5) = (char)(v56 / 1024 % 2 | (int32_t)v31 & -2);
            *(char *)(v16 + 4) = (char)(v56 / 4 % 256);
            v24 = v16;
            v32 = *(char *)(v24 + 5);
            v45 = *(int16_t *)(v15 + 6);
            v6 = (char *)(v24 + 6);
            v33 = *v6;
            *v6 = (char)((int32_t)(v45 / 128 % 16) | (int32_t)v33 & 240);
            *(char *)(v16 + 5) = (char)(2 * (int32_t)v45 & 254 | (int32_t)(v32 % 2));
            v17 = (int32_t)(*(char *)(v15 + 17) / 16 % 4);
            v25 = *(int32_t *)0x3728 + 0x3474;
            v49 = *(char *)(2 * v17 + v25);
            v7 = (char *)(v16 + 6);
            v34 = *v7;
            *v7 = (char)((int32_t)(v34 % 16) | 16 * (int32_t)v49 & 240);
            v50 = *(int16_t *)(v25 + 2 * v17);
            v35 = *(char *)(v14 + 28);
            v46 = 2 * (int32_t)(v35 / 64) + *(int32_t *)0x372c + 0x349c;
            v51 = *(char *)v46;
            v36 = *(char *)(v46 + 1);
            *(char *)(v16 + 7) = (char)(128 * (int32_t)v51 & 128 | (int32_t)(v50 / 16 % 128));
            v26 = v16;
            v37 = *(char *)(v26 + 9);
            *(char *)(v26 + 8) = (char)(*(int16_t *)v46 / 2);
            *(char *)(v16 + 9) = (char)((int32_t)v37 & 252 | (int32_t)(v36 / 2 % 4));
            v38 = *(char *)(v15 + 17);
            v47 = 2 * (int32_t)(v38 / 4 % 4) + *(int32_t *)0x3730 + 0x34e0;
            v52 = *(char *)v47;
            v53 = *(int16_t *)v47;
            v8 = (char *)(v16 + 9);
            v39 = *v8;
            *v8 = (char)((int32_t)(v39 % 4) | 4 * (int32_t)(v52 % 64));
            v9 = (char *)(v16 + 10);
            v40 = *v9;
            *v9 = (char)((int32_t)v40 & 224 | (int32_t)(v53 / 64 % 32));
            v41 = *(char *)(v15 + 18);
            v48 = 2 * (int32_t)(v41 / 2 % 4) + *(int32_t *)0x3734 + 0x3518;
            v54 = *(char *)v48;
            v27 = v16;
            v10 = (char *)(v27 + 10);
            v42 = *v10;
            g92 = (int32_t)*(char *)(v27 + 17);
            *v10 = (char)((int32_t)(v42 % 32) | 32 * (int32_t)(v54 % 8));
            *(char *)(v16 + 11) = (char)(*(int16_t *)v48 / 8);
            v15 = 32;
            char v61 = 4;
            // branch -> 0x3540
            while (true) {
                // 0x3540
                *(char *)(v16 + 13) = v61;
                *(char *)(v16 + 14) = (char)v15;
                *(char *)(v16 + 12) = (char)v13;
                *(char *)(v16 + 15) = (char)v13;
                *(char *)(v16 + 16) = 1;
                *(char *)(v16 + 17) = (char)(g92 & -16 | 8);
                *(char *)(v14 + 52) = (char)g102;
                v28 = v14 + 53;
                *(char *)v28 = (char)v13;
                g102 = v28;
                v11 = (int16_t *)(*(int32_t *)0x3738 + 0x356c);
                *v11 = (int16_t)((int32_t)*v11 + 1);
                v55 = v16;
                v18 = g106 + 260;
                // branch -> 0x3584
              lab_0x3584:;
                int32_t v62; // 0x358c
                int32_t v63; // 0x3590
                while (true) {
                    // 0x3584
                    *(int32_t *)v18 = *(int32_t *)v55;
                    *(int32_t *)(v18 + 4) = *(int32_t *)(v55 + 4);
                    v62 = v18 + 8;
                    v63 = g102;
                    if (v55 + 8 == v63) {
                        // break -> 0x3596
                        break;
                    }
                    v55 += 8;
                    v18 = v62;
                    // continue -> 0x3584
                }
                // 0x3596
                *(char *)v62 = *(char *)v63;
                int32_t v64 = g101;
                if (*(int32_t *)(g101 + 0x25d4) != 0) {
                    // 0x35a2
                    if (*(int32_t *)(v64 + 0x28e4) != 0) {
                      lab_0x35ea_2:
                        // 0x35ea
                        memset((char *)(g106 + 244), 0, (int32_t)(int16_t)&g65);
                        int16_t * v65 = (int16_t *)(*(int32_t *)0x3748 + 0x35fe); // 0x35fc_0
                        *v65 = (int16_t)((int32_t)*v65 + 1);
                        int32_t v66 = g103; // 0x3616
                        int32_t v67 = g106 + 260; // 0x361e
                        int32_t v68 = v66; // 0x361a
                        *(int32_t *)v67 = *(int32_t *)v68;
                        *(int32_t *)(v67 + 4) = *(int32_t *)(v68 + 4);
                        int32_t v69 = v67 + 8; // 0x3620
                        int32_t v70 = g103 + 8; // 0x3624
                        g103 = v70;
                        // branch -> 0x361a
                        while (v70 != v66 + 8) {
                            // 0x361a
                            v67 = v69;
                            v68 = v70;
                            *(int32_t *)v67 = *(int32_t *)v68;
                            *(int32_t *)(v67 + 4) = *(int32_t *)(v68 + 4);
                            v69 = v67 + 8;
                            v70 = g103 + 8;
                            g103 = v70;
                            // continue -> 0x361a
                        }
                        // 0x362c
                        *(int32_t *)v69 = *(int32_t *)v70;
                        *(char *)(v69 + 4) = *(char *)(g103 + 4);
                        int32_t v71 = *(int32_t *)(g101 + 0x25c8); // 0x363a
                        duss_event_send(v71);
                        g100 = v71;
                        if (v71 != 0) {
                            // 0x3644
                            duss_log_gen_head();
                            duss_log_print();
                            // branch -> 0x3674
                        }
                        int32_t v72 = g101; // 0x3674
                        int32_t v73 = (int32_t)(*(int16_t *)(v72 + 0x2612) / 8 % 2048); // 0x3680
                        g92 = v73;
                        function_c978(v72 + 0x267c, 155, (char)((int32_t)(v73 < 1601) ^ 1));
                        int32_t v74;
                        g94 = v74;
                        uint32_t v75;
                        g98 = v75;
                        int32_t v76 = *(int32_t *)v74; // 0x36a2
                        g93 = v76;
                        uint32_t v77 = -2 - v76 + v75; // 0x36a4
                        g3 = ((v77 ^ v75) & (v77 ^ -v76)) < 0;
                        g2 = v75 - v76 < 0;
                        g4 = v75 == v76;
                        g1 = v77 <= v75;
                        if (v75 != v76) {
                            // 0x36a8
                            __stack_chk_fail();
                            // branch -> 0x36ac
                        }
                        // 0x36ac
                        int32_t v78;
                        g100 = 0x1000000 * v78 / 0x1000000;
                        int32_t v79;
                        g101 = v79;
                        int32_t v80;
                        g102 = v80;
                        int32_t v81;
                        g103 = v81;
                        int32_t v82;
                        g104 = v82;
                        int32_t v83;
                        g105 = v83;
                        int32_t v84;
                        g95 = v84;
                        int32_t v85;
                        g96 = v85;
                        int32_t v86;
                        ((int32_t (*)())v86)();
                        int32_t v87 = g93; // 0x36ba
                        g102 = 2 * v87;
                        int32_t v88 = g94; // 0x36be
                        v15 = v88;
                        int32_t v89;
                        g103 = &v89;
                        *(char *)(v88 + 30) = -23;
                        *(char *)(v87 + 29) = (char)v15;
                        *(char *)(g100 + 23) = (char)g102;
                        *(char *)(g101 + 17) = (char)g102;
                        v13 = 240;
                        int32_t v90 = g102; // 0x3718
                        v16 = v90;
                        *(char *)(v15 + 11) = (char)v90;
                        int32_t v91 = v15; // 0x3724
                        *(int32_t *)v91 = v13;
                        int32_t v92 = v91 + 4; // 0x3724
                        v15 = v92;
                        *(char *)(v16 + 9) = (char)v92;
                        *(char *)(v15 + 6) = (char)g100;
                        *(char *)(g102 + 6) = (char)v15;
                        int32_t v93 = v13; // 0x3732
                        *(char *)(v93 + 5) = (char)v93;
                        v14 = v13;
                        v61 = g100;
                        // branch -> 0x3540
                        continue;
                    }
                }
                int32_t v94 = *(int32_t *)(v64 + 0x25c8); // 0x35ae
                duss_event_send(v94);
                if (v94 == 0) {
                    goto lab_0x35ea_2;
                }
                // 0x35ba
                duss_log_gen_head();
                duss_log_print();
                // branch -> 0x35ea
                goto lab_0x35ea_2;
            }
        }
    }
    // 0x33c0
    v19 = g101;
    v14 = v19 + 0x2600;
    *(char *)(v19 + 0x261d) = 15;
    v21 = *(int32_t *)0x3724 + 0x33ce;
    v15 = v21;
    v43 = *(int16_t *)v21;
    v20 = v14;
    v16 = v20 + 29;
    *(char *)(v20 + 30) = (char)v43;
    v3 = (char *)(v16 + 2);
    v13 = 0;
    *v3 = (char)((int32_t)*v3 & 248 | (int32_t)v43 / 256 % 8);
    v22 = v16;
    v29 = *(char *)(v22 + 2);
    v44 = *(int16_t *)(v15 + 2);
    v4 = (char *)(v22 + 3);
    v30 = *v4;
    *v4 = (char)((int32_t)(v44 / 32 % 64) | (int32_t)v30 & 192);
    *(char *)(v16 + 2) = (char)(8 * (int32_t)v44 & 248 | (int32_t)(v29 % 8));
    v12 = (int32_t)*(int16_t *)(v15 + 4);
    v23 = v16;
    v5 = (char *)(v23 + 3);
    v31 = *(char *)(v23 + 5);
    *v5 = (char)((int32_t)(*v5 % 64) | 64 * v12 & 192);
    v56 = v12;
    *(char *)(v16 + 5) = (char)(v56 / 1024 % 2 | (int32_t)v31 & -2);
    *(char *)(v16 + 4) = (char)(v56 / 4 % 256);
    v24 = v16;
    v32 = *(char *)(v24 + 5);
    v45 = *(int16_t *)(v15 + 6);
    v6 = (char *)(v24 + 6);
    v33 = *v6;
    *v6 = (char)((int32_t)(v45 / 128 % 16) | (int32_t)v33 & 240);
    *(char *)(v16 + 5) = (char)(2 * (int32_t)v45 & 254 | (int32_t)(v32 % 2));
    v17 = (int32_t)(*(char *)(v15 + 17) / 16 % 4);
    v25 = *(int32_t *)0x3728 + 0x3474;
    v49 = *(char *)(2 * v17 + v25);
    v7 = (char *)(v16 + 6);
    v34 = *v7;
    *v7 = (char)((int32_t)(v34 % 16) | 16 * (int32_t)v49 & 240);
    v50 = *(int16_t *)(v25 + 2 * v17);
    v35 = *(char *)(v14 + 28);
    v46 = 2 * (int32_t)(v35 / 64) + *(int32_t *)0x372c + 0x349c;
    v51 = *(char *)v46;
    v36 = *(char *)(v46 + 1);
    *(char *)(v16 + 7) = (char)(128 * (int32_t)v51 & 128 | (int32_t)(v50 / 16 % 128));
    v26 = v16;
    v37 = *(char *)(v26 + 9);
    *(char *)(v26 + 8) = (char)(*(int16_t *)v46 / 2);
    *(char *)(v16 + 9) = (char)((int32_t)v37 & 252 | (int32_t)(v36 / 2 % 4));
    v38 = *(char *)(v15 + 17);
    v47 = 2 * (int32_t)(v38 / 4 % 4) + *(int32_t *)0x3730 + 0x34e0;
    v52 = *(char *)v47;
    v53 = *(int16_t *)v47;
    v8 = (char *)(v16 + 9);
    v39 = *v8;
    *v8 = (char)((int32_t)(v39 % 4) | 4 * (int32_t)(v52 % 64));
    v9 = (char *)(v16 + 10);
    v40 = *v9;
    *v9 = (char)((int32_t)v40 & 224 | (int32_t)(v53 / 64 % 32));
    v41 = *(char *)(v15 + 18);
    v48 = 2 * (int32_t)(v41 / 2 % 4) + *(int32_t *)0x3734 + 0x3518;
    v54 = *(char *)v48;
    v27 = v16;
    v10 = (char *)(v27 + 10);
    v42 = *v10;
    g92 = (int32_t)*(char *)(v27 + 17);
    *v10 = (char)((int32_t)(v42 % 32) | 32 * (int32_t)(v54 % 8));
    *(char *)(v16 + 11) = (char)(*(int16_t *)v48 / 8);
    // branch -> 0x3540
    while (true) {
        // 0x3540
        *(char *)(v16 + 13) = 4;
        *(char *)(v16 + 14) = (char)32;
        *(char *)(v16 + 12) = (char)v13;
        *(char *)(v16 + 15) = (char)v13;
        *(char *)(v16 + 16) = 1;
        *(char *)(v16 + 17) = (char)(g92 & -16 | 8);
        *(char *)(v14 + 52) = (char)g102;
        v28 = v14 + 53;
        *(char *)v28 = (char)v13;
        g102 = v28;
        v11 = (int16_t *)(*(int32_t *)0x3738 + 0x356c);
        *v11 = (int16_t)((int32_t)*v11 + 1);
        v55 = v16;
        v18 = g106 + 260;
        // branch -> 0x3584
        goto lab_0x3584;
    }
}

// Address range: 0x3758 - 0x3807
void function_3758(void) {
    int32_t v1 = g101; // 0x3758
    int32_t v2 = g92; // 0x3758
    int32_t v3 = g98; // 0x375c
    int32_t v4 = *(int32_t *)(*(int32_t *)0x37f8 + *(int32_t *)0x37f4 + 0x3764); // 0x3762
    g101 = v4;
    int32_t v5 = g94; // 0x3764
    uint32_t v6 = *(int32_t *)v4; // 0x376a
    g97 = (int32_t)*(int16_t *)(v5 + 6);
    g92 = (int32_t)*(int16_t *)(v5 + 8);
    int32_t v7 = *(int32_t *)(v5 + 12); // 0x377a
    g98 = v7;
    int32_t v8;
    __memcpy_chk((char *)&v8, (char *)(v5 + 16), v7, (int32_t)&g63);
    int32_t v9 = *(int32_t *)(v3 + 0x25c8); // 0x379e
    duss_event_send(v9);
    int32_t v10 = 0; // 0x37e0
    if (v9 != 0) {
        // 0x37aa
        duss_log_gen_head();
        int32_t v11;
        g98 = &v11;
        duss_log_print();
        v10 = v9;
        // branch -> 0x37da
    }
    // 0x37da
    g94 = v6;
    int32_t v12 = *(int32_t *)g101; // 0x37de
    g99 = v12;
    g93 = v10;
    uint32_t v13 = -2 - v12 + v6; // 0x37e2
    g3 = ((v13 ^ v6) & (v13 ^ -v12)) < 0;
    g2 = v6 - v12 < 0;
    g4 = v6 == v12;
    g1 = v13 <= v6;
    if (v6 != v12) {
        // 0x37e6
        __stack_chk_fail();
        // branch -> 0x37ea
    }
    // 0x37ea
    g101 = v1;
    ((int32_t (*)())v2)();
}

// Address range: 0x3808 - 0x3a55
void function_3808(void) {
    int32_t v1 = g100; // 0x3808
    int32_t v2 = g101; // 0x3808
    int32_t (*v3)() = (int32_t (*)())g92;
    int32_t v4 = g98; // 0x380e
    int32_t v5 = *(int32_t *)(*(int32_t *)0x3a5c + *(int32_t *)0x3a58 + 0x3816); // 0x3814
    int32_t v6 = g94; // 0x3816
    uint32_t v7 = *(int32_t *)v5; // 0x3818
    int32_t v8 = v6; // R4
    uint32_t v9; // 0x3a42
    int32_t v10; // 0x3a3e
    if (*(int32_t *)(v6 + 12) != 13) {
        // 0x3828
        duss_log_gen_head();
        g99 = *(int32_t *)0x3a68 + 0x3858;
        duss_log_print();
        // branch -> 0x3a3a
        // 0x3a3a
        g98 = v7;
        v10 = *(int32_t *)v5;
        g94 = v10;
        g93 = -1001;
        v9 = -2 - v10 + v7;
        g3 = ((v9 ^ v7) & (v9 ^ -v10)) < 0;
        g2 = v7 - v10 < 0;
        g4 = v7 == v10;
        g1 = v9 <= v7;
        if (v7 != v10) {
            // 0x3a46
            __stack_chk_fail();
            // branch -> 0x3a4a
        }
        // 0x3a4a
        g100 = v1;
        g101 = v2;
        v3();
        return;
    }
    int32_t v11 = *(int32_t *)0x3a6c; // 0x3860
    g101 = v11;
    int32_t v12 = v11 + 0x3868; // 0x3864
    g101 = v12;
    char * v13 = (char *)v12; // 0x3866_0
    g91 = 12;
    int32_t v14 = (int32_t)*v13 | 1; // 0x3872
    *v13 = (char)v14;
    unsigned char v15 = *(char *)(v8 + 28); // 0x3878
    int32_t v16 = 2 * (int32_t)v15 & 2 | v14 & 253; // 0x387c
    *(char *)g101 = (char)v16;
    int32_t v17 = (int32_t)*(char *)(v8 + 16) & 4 | v16 & 251; // 0x388c
    *(char *)g101 = (char)v17;
    unsigned char v18 = *(char *)(v8 + 16); // 0x3892
    g92 = v18;
    int32_t v19 = 8 * (int32_t)(v18 / 2) & 8 | v17 & 247; // 0x389c
    *(char *)g101 = (char)v19;
    unsigned char v20 = *(char *)(v8 + 16); // 0x38a2
    int32_t v21 = 16 * (int32_t)v20 & 16 | v19 & 239; // 0x38a6
    *(char *)g101 = (char)v21;
    char v22 = *(char *)(v8 + 26); // 0x38ac
    *(char *)g101 = (char)(-(((int32_t)(v22 > -1) ^ 1)) & 32 | v21 & 223);
    unsigned char v23 = *(char *)(v8 + 28); // 0x38b8
    char * v24 = (char *)(g101 + 2); // 0x38ba_0
    unsigned char v25 = *v24; // 0x38ba
    *v24 = (char)((int32_t)v25 & 252 | (int32_t)(v23 / 4 % 4));
    char * v26 = (char *)(g101 + 4); // 0x38c6_0
    unsigned char v27 = *(char *)(v8 + 27); // 0x38c8
    *v26 = (char)((int32_t)(v27 % 2) | (int32_t)*v26 & 254);
    unsigned char v28 = *(char *)(v8 + 27); // 0x38d2
    int32_t v29 = v28; // 0x38d2
    g101 = v29;
    unsigned char v30 = v28 / 2 % 32;
    char v31 = v30;
    if ((v29 & 64) != 0) {
        // 0x38e0
        v31 = -(int32_t)v30;
        // branch -> 0x38e4
    }
    int32_t v32 = *(int32_t *)0x3a70; // 0x38e4
    g101 = v32 + 0x38f6;
    *(char *)(v32 + 0x38fb) = v31;
    duss_log_gen_head();
    int32_t v33 = g101; // 0x390a
    g97 = (int32_t)*(char *)(v33 + 2);
    g101 = (int32_t)*(char *)(v33 + 5);
    g99 = *(int32_t *)0x3a7c + 0x3954;
    duss_log_print();
    int32_t v34 = *(int32_t *)0x3a80; // 0x3956
    g101 = v34;
    int32_t str = v34 + 0x3960; // 0x395c
    g101 = str;
    int32_t str2 = *(int32_t *)0x3a84 + 0x3962; // 0x395e
    if (memcmp((char *)str, (char *)str2, 6) == 0) {
        // 0x3a38
        // branch -> 0x3a3a
    } else {
        // 0x396e
        *(int32_t *)g101 = *(int32_t *)str2;
        *(int16_t *)(g101 + 4) = *(int16_t *)(str2 + 4);
        int32_t v35 = g101; // 0x397c
        g99 = *(int32_t *)v35;
        g101 = (int32_t)*(int16_t *)(v35 + 4);
        v8 = 3;
        int32_t v36 = v4 + 0x25c8; // 0x399e
        // branch -> 0x39a0
        while (true) {
            int32_t v37 = *(int32_t *)v36; // 0x39aa
            duss_event_send(v37);
            g101 = v37;
            if (v37 != 0) {
                // 0x39b4
                duss_log_gen_head();
                g99 = *(int32_t *)0x3a90 + 0x39e2;
                duss_log_print();
                // branch -> 0x39e4
            }
            int32_t v38 = v8; // 0x39e4
            v8 = v38 - 1;
            if (v38 == 1) {
                // 0x39e8
                g101 = 3;
                // branch -> 0x39f6
                while (true) {
                    int32_t v39 = *(int32_t *)v36; // 0x3a00
                    duss_event_send(v39);
                    v8 = v39;
                    if (v39 != 0) {
                        // 0x3a0a
                        duss_log_gen_head();
                        g99 = *(int32_t *)0x3a9c + 0x3a30;
                        duss_log_print();
                        // branch -> 0x3a32
                    }
                    int32_t v40 = g101; // 0x3a32
                    g101 = v40 - 1;
                    if (v40 == 1) {
                        // break -> 0x3a3a
                        break;
                    }
                    // continue -> 0x39f6
                }
                // 0x3a3a
                // branch -> 0x3a3a
                // 0x3a3a
                g98 = v7;
                v10 = *(int32_t *)v5;
                g94 = v10;
                g93 = v8;
                v9 = -2 - v10 + v7;
                g3 = ((v9 ^ v7) & (v9 ^ -v10)) < 0;
                g2 = v7 - v10 < 0;
                g4 = v7 == v10;
                g1 = v9 <= v7;
                if (v7 != v10) {
                    // 0x3a46
                    __stack_chk_fail();
                    // branch -> 0x3a4a
                }
                // 0x3a4a
                g100 = v1;
                g101 = v2;
                v3();
                return;
            }
            // 0x39e4
            // branch -> 0x39a0
        }
    }
    // 0x3a3a
    g98 = v7;
    v10 = *(int32_t *)v5;
    g94 = v10;
    g93 = 0;
    v9 = -2 - v10 + v7;
    g3 = ((v9 ^ v7) & (v9 ^ -v10)) < 0;
    g2 = v7 - v10 < 0;
    g4 = v7 == v10;
    g1 = v9 <= v7;
    if (v7 != v10) {
        // 0x3a46
        __stack_chk_fail();
        // branch -> 0x3a4a
    }
    // 0x3a4a
    g100 = v1;
    g101 = v2;
    v3();
}

// Address range: 0x3a56 - 0x3a9f
int32_t function_3a56(int32_t a1, int32_t a2, int32_t a3) {
    // 0x3a56
    g101 = 0x3db4;
    g101 = g103 + a3;
    function_32e6(a1, (char)a1, a3, a1 / 0x40000000, 0);
    return 0;
}

// Address range: 0x3aa0 - 0x3c9f
void function_3aa0(void) {
    int32_t v1 = g100; // 0x3aa0
    int32_t v2 = g101; // 0x3aa0
    int32_t v3 = g102; // 0x3aa0
    int32_t v4 = g105; // 0x3aa0
    int32_t (*v5)() = (int32_t (*)())g92;
    int32_t v6 = g98; // 0x3aa6
    int32_t v7 = *(int32_t *)(*(int32_t *)0x3c6c + *(int32_t *)0x3c68 + 0x3aae); // 0x3aac
    int32_t v8 = g94; // 0x3aae
    g101 = v8;
    uint32_t v9 = *(int32_t *)v7; // 0x3ab2
    uint32_t v10; // 0x3c50
    int32_t v11; // 0x3c4c
    if (*(int32_t *)(v8 + 12) != 13) {
        // 0x3ac2
        duss_log_gen_head();
        g99 = *(int32_t *)0x3c78 + 0x3af2;
        duss_log_print();
        g93 = -1001;
        // branch -> 0x3c48
        // 0x3c48
        g98 = v9;
        v11 = *(int32_t *)v7;
        g94 = v11;
        v10 = -2 - v11 + v9;
        g3 = ((v10 ^ v9) & (v10 ^ -v11)) < 0;
        g2 = v9 - v11 < 0;
        g4 = v9 == v11;
        g1 = v10 <= v9;
        if (v9 != v11) {
            // 0x3c54
            __stack_chk_fail();
            // branch -> 0x3c58
        }
        // 0x3c58
        g100 = v1;
        g101 = v2;
        g102 = v3;
        g105 = v4;
        v5();
        function_3fca();
        return;
    }
    int32_t v12 = *(int32_t *)0x3c7c; // 0x3afa
    *(int32_t *)(v12 + 0x3b04) = *(int32_t *)(v8 + 16);
    int32_t v13 = v12 + 0x3b08; // 0x3b0c17
    int32_t v14 = v8 + 20;
    int32_t v15 = v14 + 4; // 0x3b06
    int32_t v16 = v15; // R4
    int32_t v17 = v13 + 4; // 0x3b0c
    *(int32_t *)v13 = *(int32_t *)v14;
    // branch -> 0x3b06
    while (v15 != v8 + 28) {
        // 0x3b06
        v13 = v17;
        v14 = v16;
        v15 = v14 + 4;
        v16 = v15;
        v17 = v13 + 4;
        *(int32_t *)v13 = *(int32_t *)v14;
        // continue -> 0x3b06
    }
    int32_t v18 = *(int32_t *)0x3c80; // 0x3b14
    *(char *)v17 = *(char *)v16;
    v16 = v18 + 0x3b1c;
    unsigned char v19 = *(char *)(v18 + 0x3b1e); // 0x3b1a
    unsigned char v20 = *(char *)(v18 + 0x3b1d); // 0x3b1e
    int32_t v21 = *(int32_t *)0x3c84 + 0x3b2a; // 0x3b26
    *(int16_t *)v21 = (int16_t)(256 * (int32_t)(v19 % 8) | (int32_t)v20);
    unsigned char v22 = *(char *)(v16 + 3); // 0x3b30
    *(int16_t *)(v21 + 2) = (int16_t)(32 * (int32_t)(v22 % 64) | (int32_t)v19 / 8);
    unsigned char v23 = *(char *)(v16 + 4); // 0x3b42
    int32_t v24 = (int32_t)*(char *)(v16 + 5); // 0x3b44
    *(int16_t *)(v21 + 4) = (int16_t)(1024 * v24 & 1024 | (int32_t)v22 / 64 | 4 * (int32_t)v23);
    unsigned char v25 = *(char *)(v16 + 6); // 0x3b58
    *(int16_t *)(v21 + 6) = (int16_t)(128 * (int32_t)(v25 % 16) | v24 / 2);
    duss_log_gen_head();
    g92 = (int32_t)*(char *)(v16 + 2);
    g97 = (int32_t)*(char *)(v16 + 5);
    duss_log_print();
    g99 = 8;
    int32_t v26 = *(int32_t *)(v6 + 0x25c8); // 0x3bf2
    g93 = v26;
    duss_event_send(v26);
    if (g93 != 0) {
        // 0x3c14
        duss_log_gen_head();
        g99 = *(int32_t *)0x3c9c + 0x3c42;
        duss_log_print();
        g93 = 0;
        // branch -> 0x3c48
    }
    // 0x3c48
    g98 = v9;
    v11 = *(int32_t *)v7;
    g94 = v11;
    v10 = -2 - v11 + v9;
    g3 = ((v10 ^ v9) & (v10 ^ -v11)) < 0;
    g2 = v9 - v11 < 0;
    g4 = v9 == v11;
    g1 = v10 <= v9;
    if (v9 != v11) {
        // 0x3c54
        __stack_chk_fail();
        // branch -> 0x3c58
    }
    // 0x3c58
    g100 = v1;
    g101 = v2;
    g102 = v3;
    g105 = v4;
    v5();
    function_3fca();
}

// Address range: 0x3ca0 - 0x3e7f
void function_3ca0(void) {
    int32_t v1 = g100; // 0x3ca0
    int32_t v2 = g101; // 0x3ca0
    int32_t v3 = g102; // 0x3ca0
    int32_t v4 = g103; // 0x3ca0
    int32_t (*v5)() = (int32_t (*)())g92;
    int32_t v6 = g98; // R8
    int32_t v7 = *(int32_t *)(*(int32_t *)0x3e4c + *(int32_t *)0x3e48 + 0x3cae); // 0x3cac
    int32_t v8 = g94; // 0x3cae
    uint32_t v9 = *(int32_t *)v7; // 0x3cb0
    g101 = v8;
    uint32_t v10; // 0x3e30
    int32_t v11; // 0x3e54
    int32_t v12; // 0x3e2e
    if (*(int32_t *)(v8 + 12) != 13) {
        // 0x3cc0
        duss_log_gen_head();
        g94 = 1;
        duss_log_print();
        g93 = -1001;
        // branch -> 0x3e2a
        // 0x3e2a
        g98 = v9;
        v12 = *(int32_t *)v7;
        g99 = v12;
        v10 = -2 - v12 + v9;
        g3 = ((v10 ^ v9) & (v10 ^ -v12)) < 0;
        g2 = v9 - v12 < 0;
        g4 = v9 == v12;
        g1 = v10 <= v9;
        if (v9 != v12) {
            // 0x3e34
            __stack_chk_fail();
            // branch -> 0x3e38
        }
        // 0x3e38
        g100 = v1;
        g101 = v2;
        g102 = v3;
        g103 = v4;
        v5();
        v11 = g103;
        g101 = v3 / 0x100000;
        g101 = v11 / 64;
        *(int32_t *)(*(int32_t *)(v11 + 12) / 0x8000 + 124) = g98;
        return;
    }
    int32_t v13 = *(int32_t *)0x3e5c; // 0x3cfc
    *(int32_t *)(v13 + 0x3d06) = *(int32_t *)(v8 + 16);
    int32_t v14 = v13 + 0x3d0a; // 0x3d0a18
    int32_t v15 = v8 + 20;
    int32_t v16 = v15 + 4; // 0x3d04
    int32_t v17 = v16; // R4
    int32_t v18 = v14 + 4; // 0x3d0a
    *(int32_t *)v14 = *(int32_t *)v15;
    // branch -> 0x3d04
    while (v16 != v8 + 28) {
        // 0x3d04
        v14 = v18;
        v15 = v17;
        v16 = v15 + 4;
        v17 = v16;
        v18 = v14 + 4;
        *(int32_t *)v14 = *(int32_t *)v15;
        // continue -> 0x3d04
    }
    int32_t v19 = *(int32_t *)0x3e60; // 0x3d12
    *(char *)v18 = *(char *)v17;
    v17 = v19 + 0x3d1a;
    unsigned char v20 = *(char *)(v19 + 0x3d21); // 0x3d18
    unsigned char v21 = *(char *)(v19 + 0x3d20); // 0x3d1a
    int32_t v22 = *(int32_t *)0x3e64; // 0x3d20
    int32_t v23 = (int32_t)(v21 / 16) | 16 * (int32_t)(v20 % 128); // 0x3d24
    int32_t v24 = v22 + 0x3d2c; // R3
    *(int16_t *)(v22 + 0x3d34) = (int16_t)v23;
    unsigned char v25 = *(char *)(v17 + 8); // 0x3d2c
    int32_t v26 = (int32_t)*(char *)(v17 + 9); // 0x3d2e
    *(int16_t *)(v24 + 10) = (int16_t)(512 * v26 & 1536 | (int32_t)v20 / 128 | 2 * (int32_t)v25);
    unsigned char v27 = *(char *)(v17 + 10); // 0x3d46
    *(int16_t *)(v24 + 12) = (int16_t)(64 * (int32_t)(v27 % 32) | v26 / 4);
    *(int16_t *)(v6 + 0x293e) = (int16_t)v23;
    duss_log_gen_head();
    g97 = (int32_t)(*(char *)(v17 + 9) % 4);
    duss_log_print();
    g92 = (int32_t)*(int16_t *)(g101 + 8);
    int32_t v28 = *(int32_t *)(v6 + 0x25c8); // 0x3dcc
    g93 = v28;
    int32_t v29;
    g94 = &v29;
    v29 = *(int32_t *)0x3e44;
    duss_event_send(v28);
    if (g93 != 0) {
        // 0x3df6
        duss_log_gen_head();
        g94 = 1;
        duss_log_print();
        g93 = 0;
        // branch -> 0x3e2a
    }
    // 0x3e2a
    g98 = v9;
    v12 = *(int32_t *)v7;
    g99 = v12;
    v10 = -2 - v12 + v9;
    g3 = ((v10 ^ v9) & (v10 ^ -v12)) < 0;
    g2 = v9 - v12 < 0;
    g4 = v9 == v12;
    g1 = v10 <= v9;
    if (v9 != v12) {
        // 0x3e34
        __stack_chk_fail();
        // branch -> 0x3e38
    }
    // 0x3e38
    g100 = v1;
    g101 = v2;
    g102 = v3;
    g103 = v4;
    v5();
    v11 = g103;
    g101 = v3 / 0x100000;
    g101 = v11 / 64;
    *(int32_t *)(*(int32_t *)(v11 + 12) / 0x8000 + 124) = g98;
}

// Address range: 0x3e80 - 0x3f53
void function_3e80(void) {
    // 0x3e80
    if (*(int32_t *)(g94 + 12) != 13) {
        // 0x3ea6
        duss_log_gen_head();
        duss_log_print();
        return;
    }
    // 0x3ef2
    g101 = (int32_t)&g40;
    *(int32_t *)&g40 = *(int32_t *)(g94 + 16);
    g101 = (int32_t)&g40 + 4;
    int32_t v1 = g94 + 20;
    int32_t v2 = (int32_t)&g40 + 4; // 0x3ef815
    // branch -> 0x3ef2
    while (true) {
        int32_t v3 = v1 + 4; // 0x3ef2
        int32_t v4 = v2 + 4; // 0x3ef8
        *(int32_t *)v2 = *(int32_t *)v1;
        g101 = v4;
        int32_t v5 = v3;
        if (v3 == g94 + 28) {
            // 0x3efe
            *(char *)v4 = *(char *)v5;
            g39 = -128 * *(char *)&g40 / 4 | g39 % 64;
            g38 = g38 & 126 | g43 % 2 | 128 * g42;
            g37 = ((char)(g42 > -1) | g37 & -128 | 4 * (g42 / 2 % 32) | 2 * g42 / 64 & 2) ^ 1;
            g101 = g41;
            return;
        }
        // 0x3ef2
        v1 = v5;
        v2 = v4;
        // branch -> 0x3ef2
    }
}

// Address range: 0x3f54 - 0x3f9d
void function_3f54(void) {
    // 0x3f54
    if (g93 != 0) {
        // 0x3f56
        g101 = &g56;
        duss_log_gen_head();
        duss_log_print();
        g37 = (int32_t)g37 & -2;
        // branch -> 0x3f96
    }
}

// Address range: 0x3f9e - 0x3fc9
void function_3f9e(void) {
    unsigned char v1 = *(char *)(g99 + 18); // 0x3f9e
    g101 = v1;
    unsigned char v2 = *(char *)(g99 + 17); // 0x3fa0
    g101 = (int32_t)(v2 % 2) | -(((int32_t)(v1 > -1) ^ 1)) & 2 | -(int32_t)(v1 / 64 % 2) & 4 | -(((int32_t)(v2 > -1) ^ 1)) & 8;
}

// Address range: 0x3fca - 0x4107
void function_3fca(void) {
    // 0x3fca
    g101 = g97 % 256 ^ (int32_t)*(char *)g95;
    duss_log_gen_head();
    duss_log_print();
}

// Address range: 0x4108 - 0x412f
int32_t function_4108(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x4108
    g101 += 0x4110;
    duss_log_gen_head();
    return 86;
}

// Address range: 0x4130 - 0x4139
int32_t function_4130(int32_t a1, int32_t a2) {
    // 0x4130
    g93 = 86;
    g99 += 0x413c;
    return 86;
}

// Address range: 0x413a - 0x4153
void function_413a(void) {
    // 0x413a
    duss_log_print();
    g101 = 0;
    function_41d0();
}

// Address range: 0x4154 - 0x415d
void function_4154(void) {
    // 0x4154
    g101 = -(((uint32_t)g101 / 4 % 32)) % 256;
    function_4162();
}

// Address range: 0x415e - 0x4161
void function_415e(void) {
    // 0x415e
    g101 = (uint32_t)g101 / 4 % 32;
}

// Address range: 0x4162 - 0x4163
void function_4162(void) {
    // 0x4162
    return;
}

// Address range: 0x4164 - 0x4195
void function_4164(void) {
    // 0x4164
    duss_log_gen_head();
    duss_log_print();
    function_41d0();
}

// Address range: 0x4196 - 0x41cd
void function_4196(void) {
    // 0x4196
    duss_log_gen_head();
    function_42ce();
}

// Address range: 0x41ce - 0x41cf
void function_41ce(int32_t a1) {
    // 0x41ce
    return;
}

// Address range: 0x41d0 - 0x42cd
void function_41d0(void) {
    // 0x41d0
    duss_log_gen_head();
    duss_log_print();
    int32_t v1 = *(int32_t *)(g103 + 0x25c8); // 0x424c
    duss_event_send(v1);
    if (v1 == 0) {
        // 0x41d0
        // branch -> 0x429c
    } else {
        // 0x426c
        duss_log_gen_head();
        duss_log_print();
        // branch -> 0x429c
    }
    // 0x429c
    duss_log_gen_head();
    duss_log_print();
}

// Address range: 0x42ce - 0x42cf
void function_42ce(void) {
    // 0x42ce
    return;
}

// Address range: 0x42d0 - 0x42dd
void function_42d0(void) {
    // 0x42d0
    uint32_t v1;
    g98 = v1;
    int32_t v2 = *(int32_t *)g104; // 0x42d4
    g99 = v2;
    uint32_t v3 = -2 - v2 + v1; // 0x42d8
    g3 = ((v3 ^ v1) & (v3 ^ -v2)) < 0;
    g2 = v1 - v2 < 0;
    g4 = v1 == v2;
    g1 = v3 <= v1;
    function_42f4();
}

// Address range: 0x42de - 0x42f3
void function_42de(void) {
    // 0x42de
    g101 = (unsigned char)g37;
    function_4154();
}

// Address range: 0x42f4 - 0x43c3
void function_42f4(void) {
    // 0x42f4
    __stack_chk_fail();
    int32_t v1;
    g100 = v1;
    int32_t v2;
    g101 = v2;
    int32_t v3;
    g102 = v3;
    int32_t v4;
    g103 = v4;
    int32_t v5;
    g104 = v5;
    int32_t v6;
    g105 = v6;
    int32_t v7;
    g95 = v7;
    int32_t v8;
    ((int32_t (*)())v8)();
    int32_t v9 = 2 * v4; // 0x4304
    int32_t v10 = v9; // R4
    *(int32_t *)(v9 + 124) = g102;
    if (g93 >= 1) {
        // 0x4322
        g101 = g99 / 2;
        int32_t v11;
        *(int32_t *)(v11 + 112) = g93;
        *(int32_t *)(g93 + 108) = g93;
        *(int32_t *)(g93 + 100) = g101 / 64;
        int32_t v12 = g93 / 32; // 0x4358
        uint32_t v13 = g101; // 0x435c
        *(int32_t *)(g93 + 96) = v12;
        g102 = 0;
        *(int32_t *)(g93 + 92) = g93;
        g101 = v12 / 0x40000000;
        *(int32_t *)(g93 + 88) = g93;
        *(int32_t *)(g101 + 80) = v13 / 0x40000000;
        v10 = g102 / 2;
        *(int32_t *)(g93 / 0x2000000 + 76) = g93;
        g101 = g93 / 2;
        *(int32_t *)(g93 + 76) = g93;
        *(int32_t *)(v10 + 64) = v10;
        // branch -> 0x43ae
    }
    // 0x43ae
    g101 = v10 / 0x10000;
    *(int32_t *)(g102 + 60) = v10;
}

// Address range: 0x43c4 - 0x4503
void function_43c4(void) {
    int32_t v1 = g100; // 0x43c4
    int32_t v2 = g101; // 0x43c4
    int32_t v3 = g102; // 0x43c4
    int32_t (*v4)() = (int32_t (*)())g92;
    int32_t v5 = g25;
    int32_t v6 = g94; // 0x43d0
    uint32_t v7 = *(int32_t *)v5; // 0x43d4
    g101 = v5;
    if (*(int32_t *)(v6 + 12) != 13) {
        // 0x43e0
        duss_log_gen_head();
        duss_log_print();
        // branch -> 0x440e
    }
    int32_t v8 = *(int32_t *)(g98 + 0x25e8); // 0x4412
    uint32_t v9; // 0x44be
    int32_t v10; // R3
    int32_t v11; // 0x44d4
    uint32_t v12;
    int32_t v13; // 0x44ba
    int32_t v14; // 0x44f2
    if (v8 == 0) {
        // 0x4416
        duss_log_gen_head();
        g99 = (int32_t)"rmc_msgq not created yet, just skip it!\n";
        duss_log_print();
        // branch -> 0x44b8
        // 0x44b8
        g94 = v7;
        v13 = *(int32_t *)g101;
        g98 = v13;
        g93 = 0;
        v9 = -2 - v13 + v7;
        g3 = ((v9 ^ v7) & (v9 ^ -v13)) < 0;
        g2 = v7 - v13 < 0;
        g4 = v7 == v13;
        g1 = v9 <= v7;
        if (v7 != v13) {
            // 0x44c2
            __stack_chk_fail();
            // branch -> 0x44c6
        }
        // 0x44c6
        g100 = v1;
        g101 = v2;
        g102 = v3;
        v4();
        v11 = v12 / 0x8000;
        v10 = v11;
        *(int32_t *)(g101 + 32) = v11;
        *(int32_t *)(g102 + 28) = v10;
        *(int32_t *)(g102 + 24) = v10 / 0x2000;
        v14 = g93;
        *(int32_t *)(v14 + 24) = v14;
        return;
    }
    duss_osal_msgq_send(v6 + 16, *(int32_t *)(v6 + 12), 0);
    if (v8 == 0) {
        // 0x448a
        duss_log_gen_head();
        g99 = (int32_t)"success to send rmc command to fc msgq.\n";
        duss_log_print();
        // branch -> 0x44b8
    } else {
        // 0x4458
        duss_log_gen_head();
        g99 = (int32_t)"duss_osal_msgq_send failed %d\n";
        duss_log_print();
        // branch -> 0x44b8
    }
    // 0x44b8
    g94 = v7;
    v13 = *(int32_t *)g101;
    g98 = v13;
    g93 = v8;
    v9 = -2 - v13 + v7;
    g3 = ((v9 ^ v7) & (v9 ^ -v13)) < 0;
    g2 = v7 - v13 < 0;
    g4 = v7 == v13;
    g1 = v9 <= v7;
    if (v7 != v13) {
        // 0x44c2
        __stack_chk_fail();
        // branch -> 0x44c6
    }
    // 0x44c6
    g100 = v1;
    g101 = v2;
    g102 = v3;
    v4();
    v11 = v12 / 0x8000;
    v10 = v11;
    *(int32_t *)(g101 + 32) = v11;
    *(int32_t *)(g102 + 28) = v10;
    *(int32_t *)(g102 + 24) = v10 / 0x2000;
    v14 = g93;
    *(int32_t *)(v14 + 24) = v14;
}

// Address range: 0x4504 - 0x4615
int32_t function_4504(int32_t a1, int32_t a2, int32_t a3) {
    // 0x4504
    int32_t v1;
    char * v2 = (char *)v1; // bp-200
    int32_t v3 = g101; // 0x4504
    g101 = a1;
    uint32_t v4 = *(int32_t *)g25; // 0x4518
    duss_log_gen_head();
    duss_log_print();
    int32_t result = (int32_t)&v2;
    v2 = "rmc_msgq";
    duss_osal_msgq_create(result, g101 + 0x25e8);
    duss_log_gen_head();
    g99 = (int32_t)"duss_osal_msgq_create() error: %d\n";
    duss_log_print();
    g94 = v4;
    int32_t v5 = *(int32_t *)g25; // 0x4602
    g98 = v5;
    g93 = result;
    g1 = -2 - v5 + v4 <= v4;
    if (v4 != v5) {
        // 0x460a
        __stack_chk_fail();
        // branch -> 0x460e
    }
    // 0x460e
    g101 = v3;
    return result;
}

// Address range: 0x4616 - 0x464b
int32_t function_4616(uint32_t result, int32_t a2, int32_t a3, uint32_t a4) {
    int32_t v1 = (uint32_t)(a4 / 1024); // 0x461c
    *(int32_t *)(a3 + 24) = v1;
    int32_t v2 = result / 512; // 0x462c
    g101 = v2;
    *(int32_t *)(result + 20) = v2;
    *(int32_t *)(g100 + 12) = g101 / 128;
    g101 = v1 / 0x4000000;
    return result;
}

// Address range: 0x464c - 0x4691
char * function_464c(int32_t a1, int32_t a2) {
    int32_t str;
    memset((char *)&str, 0, 256);
    strcpy((char *)&str, "cat /data/dji/amt/state | busybox grep 'aging_test'");
    system((char *)&str);
    if (*(int32_t *)g25 != *(int32_t *)g25) {
        // 0x4688
        __stack_chk_fail();
        // branch -> 0x468c
    }
    // 0x468c
    return NULL;
}

// Address range: 0x4692 - 0x469b
int32_t function_4692(int32_t result, int32_t a2) {
    // 0x4692
    g93 = result;
    g101 = g102 / 0x100000;
    g1 = (g102 & 0x80000) != 0;
    return result;
}

// Address range: 0x469c - 0x4d01
int main() {
    int32_t v1 = &g28; // R7
    g101 = g25;
    char * mem = calloc(0x2954, 1); // 0x46bc
    int32_t v2 = (int32_t)mem; // R4
    memset(mem, 0, 0x2954);
    int32_t v3 = (int32_t)"bxthwclT"; // R11
    g101 = v2 + 0x25c0;
    int32_t v4 = 1; // R6
    int32_t v5;
    int32_t v6 = &v5; // 0x47d4_0
    int32_t str;
    int32_t v7 = &str; // 0x479c_0
    int32_t optstring = (int32_t)"bxthwclT"; // 0x4776
    // branch -> 0x4776
    while (true) {
        int32_t v8 = getopt(argc, (char **)argv, (char *)optstring); // 0x477c
        char v9 = v8;
        if (v8 == -1) {
            // 0x4786
            int32_t v10;
            if (*(int32_t *)(v2 + 0x25e0) == 1) {
                // 0x4790
                // branch -> 0x47ce
                // 0x47ce
                *(int32_t *)(0x28e4 + v2) = 0;
                // branch -> 0x47d0
                // 0x47d0
                memset((char *)&v5, 0, 192);
                g101 = &g18;
                memset((char *)&v10, 255, 32);
                v5 = 2;
                duss_sketch_initialize(v6);
                g101 = v6;
                duss_log_gen_head();
                duss_log_print();
                // branch -> 0x4772
                // 0x4772
                exit(-1);
                // UNREACHABLE
            }
            // 0x4798
            memset((char *)&str, 0, 92);
            property_get((int32_t)"wl.link.prefer", v7, (int32_t)&g17);
            if (strncmp("WIFI", (char *)&str, 4) == 0) {
                // 0x47c8
                *(int32_t *)(v2 + 0x28e4) = 0;
                // branch -> 0x47d0
                // 0x47d0
                memset((char *)&v5, 0, 192);
                g101 = &g18;
                memset((char *)&v10, 255, 32);
                v5 = 2;
                duss_sketch_initialize(v6);
                g101 = v6;
                duss_log_gen_head();
                duss_log_print();
                // branch -> 0x4772
                // 0x4772
                exit(-1);
                // UNREACHABLE
            }
            // 0x47ce
            *(int32_t *)(0x28e4 + v2) = 1;
            // branch -> 0x47d0
            // 0x47d0
            memset((char *)&v5, 0, 192);
            g101 = &g18;
            memset((char *)&v10, 255, 32);
            v5 = 2;
            duss_sketch_initialize(v6);
            g101 = v6;
            duss_log_gen_head();
            duss_log_print();
            // branch -> 0x4772
            // 0x4772
            exit(-1);
            // UNREACHABLE
        }
        // 0x46dc
        if (v9 == 104) {
            char * v11 = (char *)*(int32_t *)argv;
            int32_t v12 = *(int32_t *)(v1 - 28); // 0x4712
            fprintf((struct _IO_FILE *)(v12 + 84), "usage:\nrun with wifi\n     %s  -w\n\nrun with cp\n     %s  -c\n\nrun with local mb\n     %s  -l\n", v11, v11, v11);
            // branch -> 0x4772
            // 0x4772
            exit(0);
            // UNREACHABLE
        }
        // 0x46e0
        int32_t v13;
        char * v14;
        int32_t v15; // 0x474c
        if (v9 > 104) {
            // 0x46f0
            if (v9 == 116) {
                // 0x4734
                *(int32_t *)(g101 + 28) = v4;
                // branch -> 0x4776
            } else {
                // 0x46f4
                if (v9 > 116) {
                    // 0x46fc
                    if (v9 == 119) {
                        // 0x4726
                        *(int32_t *)(g101 + 32) = v4;
                        // branch -> 0x4776
                    } else {
                        // 0x4700
                        if (v9 != 120) {
                            // 0x4744
                            v15 = *(int32_t *)(v1 - 28);
                            fprintf((struct _IO_FILE *)(v15 + 168), "Invalid argument \"%c\"\n", v9);
                            v14 = (char *)*(int32_t *)argv;
                            fprintf((struct _IO_FILE *)(v15 + 84), "usage:\nrun with wifi\n     %s  -w\n\nrun with cp\n     %s  -c\n\nrun with local mb\n     %s  -l\n", v14, v14, v14);
                            // branch -> 0x4772
                            // 0x4772
                            exit(1);
                            // UNREACHABLE
                        }
                        // 0x473c
                        *(int32_t *)(g101 + 16) = v4;
                        // branch -> 0x4776
                        // 0x4776
                        optstring = v3;
                        // branch -> 0x4776
                        continue;
                    }
                  lab_0x4776:
                    // 0x4776
                    optstring = v3;
                    // branch -> 0x4776
                    continue;
                } else {
                    // 0x46f6
                    if (v9 != 108) {
                        // 0x4744
                        v15 = *(int32_t *)(v1 - 28);
                        fprintf((struct _IO_FILE *)(v15 + 168), "Invalid argument \"%c\"\n", v9);
                        v14 = (char *)*(int32_t *)argv;
                        fprintf((struct _IO_FILE *)(v15 + 84), "usage:\nrun with wifi\n     %s  -w\n\nrun with cp\n     %s  -c\n\nrun with local mb\n     %s  -l\n", v14, v14, v14);
                        // branch -> 0x4772
                        // 0x4772
                        exit(1);
                        // UNREACHABLE
                    }
                    v13 = 2;
                  lab_0x4730:
                    // 0x4730
                    *(int32_t *)(g101 + 32) = v13;
                    // branch -> 0x4776
                    goto lab_0x4776;
                }
            }
          lab_0x4776_3:
            // 0x4776
            optstring = v3;
            // branch -> 0x4776
            continue;
        } else {
            // 0x46e2
            if (v9 == 98) {
                // 0x4740
                *(int32_t *)(g101 + 20) = v4;
                // branch -> 0x4776
                goto lab_0x4776_3;
            } else {
                // 0x46e6
                if (v9 == 99) {
                    v13 = 0;
                    goto lab_0x4730;
                }
                // 0x46ea
                if (v9 != 84) {
                    // 0x4744
                    v15 = *(int32_t *)(v1 - 28);
                    fprintf((struct _IO_FILE *)(v15 + 168), "Invalid argument \"%c\"\n", v9);
                    v14 = (char *)*(int32_t *)argv;
                    fprintf((struct _IO_FILE *)(v15 + 84), "usage:\nrun with wifi\n     %s  -w\n\nrun with cp\n     %s  -c\n\nrun with local mb\n     %s  -l\n", v14, v14, v14);
                    // branch -> 0x4772
                    // 0x4772
                    exit(1);
                    // UNREACHABLE
                }
                // 0x4738
                *(int32_t *)(g101 + 24) = v4;
                // branch -> 0x4776
                goto lab_0x4776_3;
            }
        }
    }
}

// Address range: 0x4d02 - 0x4d91
int32_t function_4d02(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = (int32_t)*(char *)(g99 + a1); // 0x4d0c
    int32_t v2 = g100 / 64; // 0x4d10
    int32_t v3 = g101; // 0x4d14
    g94 = g25;
    int32_t v4 = *(int32_t *)g25; // 0x4d24
    g100 = v4;
    g102 = g25;
    int32_t result; // 0x4d82
    int32_t v5; // 0x4d80
    if (*(int32_t *)(v1 + 0x28e4) == 0) {
        // 0x4d7a
        // branch -> 0x4d7e
        // 0x4d7e
        g98 = v4;
        v5 = *(int32_t *)g102;
        g99 = v5;
        result = -1001;
        g93 = result;
        g1 = -2 - v5 + v4 <= v4;
        if (v4 != v5) {
            // 0x4d88
            __stack_chk_fail();
            // branch -> 0x4d8c
        }
        // 0x4d8c
        g101 = v3;
        g102 = v2;
        return result;
    }
    // 0x4d30
    g101 = 86;
    int32_t v6 = *(int32_t *)(v1 + (int32_t)&g34 + 60); // 0x4d3c
    g99 = a1 + 16;
    int32_t v7 = function_d6e4(v6, 3); // 0x4d44
    if (v7 == 0) {
        // 0x4d7e
        g98 = v4;
        v5 = *(int32_t *)g102;
        g99 = v5;
        result = v7;
        g93 = result;
        g1 = -2 - v5 + v4 <= v4;
        if (v4 != v5) {
            // 0x4d88
            __stack_chk_fail();
            // branch -> 0x4d8c
        }
        // 0x4d8c
        g101 = v3;
        g102 = v2;
        return result;
    }
    // 0x4d4c
    g94 = 1;
    duss_log_gen_head();
    if (g101 != 0) {
        // 0x4d6a
        g94 = 1;
        duss_log_print();
        // branch -> 0x4d7e
    }
    // 0x4d7e
    g98 = v4;
    v5 = *(int32_t *)g102;
    g99 = v5;
    result = v7;
    g93 = result;
    g1 = -2 - v5 + v4 <= v4;
    if (v4 != v5) {
        // 0x4d88
        __stack_chk_fail();
        // branch -> 0x4d8c
    }
    // 0x4d8c
    g101 = v3;
    g102 = v2;
    return result;
}

// Address range: 0x4d92 - 0x4e21
int32_t function_4d92(uint32_t a1, int32_t a2, int32_t a3) {
    uint32_t v1 = a1 / 16; // 0x4d98
    int32_t v2 = g102; // 0x4da0
    g103 = v2 / 16;
    int32_t v3 = g101; // 0x4da4
    g94 = g25;
    int32_t v4 = *(int32_t *)g25; // 0x4db4
    g100 = v4;
    g102 = g25;
    int32_t result; // 0x4e12
    int32_t v5; // 0x4e10
    if (*(int32_t *)(v1 + 0x28e4) == 0) {
        // 0x4e0a
        // branch -> 0x4e0e
        // 0x4e0e
        g98 = v4;
        v5 = *(int32_t *)g102;
        g99 = v5;
        result = -1001;
        g93 = result;
        g1 = -2 - v5 + v4 <= v4;
        if (v4 != v5) {
            // 0x4e18
            __stack_chk_fail();
            // branch -> 0x4e1c
        }
        // 0x4e1c
        g101 = v3;
        g102 = v2;
        return result;
    }
    // 0x4dc0
    g101 = 86;
    int32_t v6 = *(int32_t *)(v1 + (int32_t)&g34 + 60); // 0x4dcc
    g99 = a1 + 16;
    int32_t v7 = function_d6e4(v6, 3); // 0x4dd4
    if (v7 == 0) {
        // 0x4e0e
        g98 = v4;
        v5 = *(int32_t *)g102;
        g99 = v5;
        result = v7;
        g93 = result;
        g1 = -2 - v5 + v4 <= v4;
        if (v4 != v5) {
            // 0x4e18
            __stack_chk_fail();
            // branch -> 0x4e1c
        }
        // 0x4e1c
        g101 = v3;
        g102 = v2;
        return result;
    }
    // 0x4ddc
    g94 = 1;
    duss_log_gen_head();
    if (g101 != 0) {
        // 0x4dfa
        g94 = 1;
        duss_log_print();
        // branch -> 0x4e0e
    }
    // 0x4e0e
    g98 = v4;
    v5 = *(int32_t *)g102;
    g99 = v5;
    result = v7;
    g93 = result;
    g1 = -2 - v5 + v4 <= v4;
    if (v4 != v5) {
        // 0x4e18
        __stack_chk_fail();
        // branch -> 0x4e1c
    }
    // 0x4e1c
    g101 = v3;
    g102 = v2;
    return result;
}

// Address range: 0x4e22 - 0x4ff9
char * function_4e22(int32_t a1, int32_t a2, int32_t a3, uint32_t a4) {
    int32_t v1 = g101; // 0x4e2c
    g101 = g25;
    int32_t v2 = *(int32_t *)(a1 + 12); // 0x4e50
    int32_t v3;
    __memcpy_chk((char *)&v3, (char *)(a1 + 16), v2, (int32_t)(int16_t)&g65);
    if (v3 % 256 == 5) {
        // 0x4e62
        uint32_t v4;
        if (v4 % 256 == 0) {
            // 0x4e68
            duss_log_gen_head();
            // branch -> 0x4ebe
        } else {
            // 0x4e94
            duss_log_gen_head();
            // branch -> 0x4ebe
        }
        // 0x4ebe
        duss_log_print();
        // branch -> 0x4ec2
    }
    // 0x4ec2
    if (*(int32_t *)g25 != *(int32_t *)g101) {
        // 0x4ece
        __stack_chk_fail();
        // branch -> 0x4ed2
    }
    // 0x4ed2
    g101 = v1;
    return NULL;
}

// Address range: 0x4ffa - 0x50e1
int32_t function_4ffa(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g101; // 0x5004
    int32_t v2 = (int32_t)*(int16_t *)(v1 + g99); // 0x5004
    int32_t v3 = (int32_t)*(int16_t *)(v1 + 0x4000000 * g100); // 0x501c
    g101 = a3;
    uint32_t v4 = *(int32_t *)g25; // 0x5034
    int32_t v5 = a3 + 0x25c0; // R3
    int32_t v6; // 0x50cc
    int32_t v7; // 0x50c8
    uint16_t v8; // 0x50ca
    if (*(int32_t *)(a3 + 0x28e4) == 0) {
        // 0x5046
        *(int16_t *)(v3 + 4) = (int16_t)&g31;
        int32_t v9 = *(int32_t *)(v5 + 8); // 0x504c
        duss_event_send(v9);
        if (v9 != 0) {
            // 0x5058
            duss_log_gen_head();
            // branch -> 0x50c2
            // 0x50c2
            duss_log_print();
            // branch -> 0x50c6
        }
        // 0x50c6
        g94 = v4;
        v7 = *(int32_t *)g25;
        g98 = v7;
        v8 = *(int16_t *)(v3 + 16);
        g99 = v8;
        v6 = g101;
        g101 = v6 + 0x2900;
        g93 = 0;
        g1 = -2 - v7 + v4 <= v4;
        *(int16_t *)(v6 + 0x2938) = v8;
        if (v4 != v7) {
            // 0x50d8
            __stack_chk_fail();
            // branch -> 0x50dc
        }
        // 0x50dc
        g101 = v1;
        g102 = v2;
        return 0;
    }
    // 0x5086
    *(int16_t *)(v3 + 4) = (int16_t)&g89;
    int32_t v10 = *(int32_t *)(v5 + 8); // 0x508c
    duss_event_send(v10);
    if (v10 != 0) {
        // 0x5096
        duss_log_gen_head();
        // branch -> 0x50c2
        // 0x50c2
        duss_log_print();
        // branch -> 0x50c6
    }
    // 0x50c6
    g94 = v4;
    v7 = *(int32_t *)g25;
    g98 = v7;
    v8 = *(int16_t *)(v3 + 16);
    g99 = v8;
    v6 = g101;
    g101 = v6 + 0x2900;
    g93 = 0;
    g1 = -2 - v7 + v4 <= v4;
    *(int16_t *)(v6 + 0x2938) = v8;
    if (v4 != v7) {
        // 0x50d8
        __stack_chk_fail();
        // branch -> 0x50dc
    }
    // 0x50dc
    g101 = v1;
    g102 = v2;
    return 0;
}

// Address range: 0x50e2 - 0x5269
int32_t function_50e2(int32_t a1, int32_t a2) {
    int32_t v1 = 0x800000 * a1; // 0x50f4
    int32_t v2 = v1; // R1
    int32_t v3 = g101; // 0x5100
    g101 = g98;
    int32_t v4 = g25; // R6
    int32_t v5 = g98 + 0x2940; // R7
    *(int32_t *)(g98 + 0x2941) = *(int32_t *)(v1 | 16);
    uint32_t v6 = *(int32_t *)v4; // 0x511c
    *(int32_t *)(v5 + 5) = *(int32_t *)(v1 | 20);
    *(int32_t *)(v5 + 9) = *(int32_t *)(v2 + 24);
    *(int32_t *)(v5 + 13) = *(int32_t *)(v2 + 28);
    int32_t v7 = g101; // 0x5138
    v5 = v4;
    v4 = v7 + 0x25c0;
    int32_t result; // 0x525a
    int32_t v8; // 0x5216
    int32_t v9; // 0x51d2
    int32_t v10; // 0x521c
    int32_t v11; // 0x5258
    if (*(int32_t *)(v7 + 0x28e4) == 0) {
        // 0x5146
        *(int16_t *)(v2 + 4) = (int16_t)&g31;
        int32_t v12 = *(int32_t *)(v4 + 8); // 0x514c
        duss_event_send(v12);
        if (v12 != 0) {
            // 0x5158
            duss_log_gen_head();
            // branch -> 0x51c2
            // 0x51c2
            duss_log_print();
            // branch -> 0x51c6
        }
        // 0x51c6
        g92 = 256;
        *(int16_t *)(v2 + 4) = 256;
        v9 = *(int32_t *)(g101 + 0x25c8);
        duss_event_send(v9);
        if (v9 != 0) {
            // 0x51de
            duss_log_gen_head();
            duss_log_print();
            // branch -> 0x520e
        }
        // 0x520e
        *(int16_t *)(v2 + 4) = (int16_t)&g80;
        v8 = g101;
        g101 = v8 + 0x25c0;
        v10 = *(int32_t *)(v8 + 0x25c8);
        duss_event_send(v10);
        result = 0;
        if (v10 != 0) {
            // 0x5226
            duss_log_gen_head();
            duss_log_print();
            result = v10;
            // branch -> 0x5256
        }
        // 0x5256
        v11 = *(int32_t *)v5;
        g99 = v11;
        g93 = result;
        g1 = -2 - v11 + v6 <= v6;
        if (v6 != v11) {
            // 0x5260
            __stack_chk_fail();
            // branch -> 0x5264
        }
        // 0x5264
        g101 = v3;
        return result;
    }
    // 0x5186
    *(int16_t *)(v2 + 4) = (int16_t)&g89;
    int32_t v13 = *(int32_t *)(v4 + 8); // 0x518c
    duss_event_send(v13);
    if (v13 != 0) {
        // 0x5196
        duss_log_gen_head();
        // branch -> 0x51c2
        // 0x51c2
        duss_log_print();
        // branch -> 0x51c6
    }
    // 0x51c6
    g92 = 256;
    *(int16_t *)(v2 + 4) = 256;
    v9 = *(int32_t *)(g101 + 0x25c8);
    duss_event_send(v9);
    if (v9 != 0) {
        // 0x51de
        duss_log_gen_head();
        duss_log_print();
        // branch -> 0x520e
    }
    // 0x520e
    *(int16_t *)(v2 + 4) = (int16_t)&g80;
    v8 = g101;
    g101 = v8 + 0x25c0;
    v10 = *(int32_t *)(v8 + 0x25c8);
    duss_event_send(v10);
    result = 0;
    if (v10 != 0) {
        // 0x5226
        duss_log_gen_head();
        duss_log_print();
        result = v10;
        // branch -> 0x5256
    }
    // 0x5256
    v11 = *(int32_t *)v5;
    g99 = v11;
    g93 = result;
    g1 = -2 - v11 + v6 <= v6;
    if (v6 != v11) {
        // 0x5260
        __stack_chk_fail();
        // branch -> 0x5264
    }
    // 0x5264
    g101 = v3;
    return result;
}

// Address range: 0x526a - 0x5385
int32_t function_526a(int32_t a1, int32_t a2, int32_t a3) {
    // 0x526a
    g102 = 0x80000 * g103;
    int32_t v1 = g101; // 0x5280
    int32_t v2 = g99; // 0x528c
    char v3 = *(char *)((int32_t)*(char *)(v2 + g100) + v2); // 0x5298
    g101 = g25;
    *(int16_t *)4 = (int16_t)&g65;
    int32_t v4 = *(int32_t *)g101; // 0x52b4
    g99 = v4;
    int32_t v5 = *(int32_t *)((int32_t)v3 + 0x25c8); // 0x52b8
    duss_event_send(v5);
    int32_t result = 0; // 0x52f8
    if (v5 != 0) {
        // 0x52c4
        duss_log_gen_head();
        g99 = (int32_t)"duss_event_send() error: %d\n";
        duss_log_print();
        result = v5;
        // branch -> 0x52f4
    }
    // 0x52f4
    g98 = v4;
    int32_t v6 = *(int32_t *)g101; // 0x52f6
    g94 = v6;
    g93 = result;
    g1 = -2 - v6 + v4 <= v4;
    if (v4 != v6) {
        // 0x52fe
        __stack_chk_fail();
        // branch -> 0x5302
    }
    // 0x5302
    g101 = v1;
    return result;
}

// Address range: 0x5386 - 0x5491
int32_t function_5386(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = 0x1000 * g101; // R0
    *(char *)(2 * g99) = (char)g102;
    int32_t v2 = 0x10000 * g100; // 0x5394
    int32_t v3 = g102; // 0x5398
    g101 = a3;
    g103 = g25;
    g102 = v1;
    g100 = v1;
    uint32_t v4 = *(int32_t *)g25; // 0x53ac
    int32_t v5;
    int32_t v6 = &v5; // 0x53c4_0
    duss_log_gen_head();
    g98 = v6;
    duss_log_print();
    int32_t v7 = g101; // 0x53e0
    int32_t v8; // 0x5482
    if (*(int32_t *)(v7 + 0x28e4) == 0) {
        // 0x547c
        g93 = -1001;
        // branch -> 0x5480
        // 0x5480
        g94 = v4;
        v8 = *(int32_t *)g103;
        g99 = v8;
        g1 = -2 - v8 + v4 <= v4;
        if (v4 != v8) {
            // 0x5488
            __stack_chk_fail();
            // branch -> 0x548c
        }
        // 0x548c
        g101 = v2;
        g102 = v3;
        return g93;
    }
    // 0x53ea
    g101 = 86;
    int32_t v9 = *(int32_t *)(v7 + (int32_t)&g34 + 60); // 0x53f8
    g99 = g100 + 16;
    if (function_d6e4(v9, 1) == 0) {
        // 0x5444
        g98 = v6;
        duss_log_gen_head();
        if (g101 != 0) {
            // 0x5464
            g98 = v6;
            duss_log_print();
            // branch -> 0x5472
        }
        // 0x5472
        g93 = g102;
        duss_event_resp_ok(g102, g100);
        // branch -> 0x5480
    } else {
        // 0x5406
        duss_log_gen_head();
        if (g101 != 0) {
            // 0x5426
            duss_log_print();
            // branch -> 0x5434
        }
        // 0x5434
        g93 = g102;
        g98 = 230;
        duss_event_resp_err();
        // branch -> 0x5480
    }
    // 0x5480
    g94 = v4;
    v8 = *(int32_t *)g103;
    g99 = v8;
    g1 = -2 - v8 + v4 <= v4;
    if (v4 != v8) {
        // 0x5488
        __stack_chk_fail();
        // branch -> 0x548c
    }
    // 0x548c
    g101 = v2;
    g102 = v3;
    return g93;
}

// Address range: 0x5492 - 0x5601
int32_t function_5492(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = 0x80000 * g101; // 0x54a4
    char v2 = *(char *)(g102 + v1); // 0x54a8
    *(char *)(g103 + g102) = 0;
    int32_t v3 = g101; // 0x54bc
    int32_t v4 = g102; // 0x54bc
    g101 = v1;
    uint32_t v5 = *(int32_t *)g25; // 0x54d0
    duss_log_gen_head();
    g99 = (int32_t)"link_req hu_hdvt_sdr_link_req 0x%x\n";
    duss_log_print();
    int32_t result; // 0x55ee
    int32_t v6; // 0x55ec
    if (*(int16_t *)(v1 + 4) == 3584) {
        int32_t v7 = g101; // 0x5510
        duss_event_resp_ok(v7, v1);
        g101 = v7;
        if (v7 == 0) {
            // 0x551c
            g101 = 0;
            result = 0;
            // branch -> 0x55e8
            // 0x55e8
            g94 = v5;
            v6 = *(int32_t *)g25;
            g98 = v6;
            g93 = result;
            g1 = -2 - v6 + v5 <= v5;
            if (v5 != v6) {
                // 0x55f4
                __stack_chk_fail();
                // branch -> 0x55f8
            }
            // 0x55f8
            g101 = v3;
            g102 = v4;
            return result;
        }
        // 0x5520
        duss_log_gen_head();
        // branch -> 0x55e4
        // 0x55e4
        g99 = (int32_t)"link_req resp to 0x%x failed, should not happen\n";
        duss_log_print();
        result = g101;
        // branch -> 0x55e8
        // 0x55e8
        g94 = v5;
        v6 = *(int32_t *)g25;
        g98 = v6;
        g93 = result;
        g1 = -2 - v6 + v5 <= v5;
        if (v5 != v6) {
            // 0x55f4
            __stack_chk_fail();
            // branch -> 0x55f8
        }
        // 0x55f8
        g101 = v3;
        g102 = v4;
        return result;
    }
    // 0x5552
    g99 = 32;
    int32_t v8 = *(int32_t *)(256 * (int32_t)v2 + 0x25c8); // 0x5566
    duss_event_send(v8);
    if (v8 != 0) {
        // 0x5578
        duss_log_gen_head();
        g99 = (int32_t)"link_req duss_event_send() error: %d\n";
        duss_log_print();
        // branch -> 0x55a8
    }
    int32_t v9 = g101; // 0x55a8
    duss_event_resp_ok(v9, v1);
    g101 = v9;
    if (v9 == 0) {
        // 0x551c
        g101 = 0;
        result = 0;
        // branch -> 0x55e8
        // 0x55e8
        g94 = v5;
        v6 = *(int32_t *)g25;
        g98 = v6;
        g93 = result;
        g1 = -2 - v6 + v5 <= v5;
        if (v5 != v6) {
            // 0x55f4
            __stack_chk_fail();
            // branch -> 0x55f8
        }
        // 0x55f8
        g101 = v3;
        g102 = v4;
        return result;
    }
    // 0x55b6
    duss_log_gen_head();
    // branch -> 0x55e4
    // 0x55e4
    g99 = (int32_t)"link_req resp to 0x%x failed, should not happen\n";
    duss_log_print();
    result = g101;
    // branch -> 0x55e8
    // 0x55e8
    g94 = v5;
    v6 = *(int32_t *)g25;
    g98 = v6;
    g93 = result;
    g1 = -2 - v6 + v5 <= v5;
    if (v5 != v6) {
        // 0x55f4
        __stack_chk_fail();
        // branch -> 0x55f8
    }
    // 0x55f8
    g101 = v3;
    g102 = v4;
    return result;
}

// Address range: 0x5602 - 0x5731
int32_t function_5602(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7) {
    *(int16_t *)(a3 + a1) = (int16_t)g103;
    *(int32_t *)(g103 + a1) = a1;
    int32_t v1 = 8 * a4; // 0x5624
    *(int32_t *)(g101 + v1) = a1;
    int32_t v2 = 64 * a1; // 0x562c
    int32_t result = 4 * v2; // R0
    *(int32_t *)(v1 + v2) = a4;
    int32_t v3 = g101; // 0x563c
    g101 = 0x1000 * a1 + 0x28c0;
    int32_t v4 = 0;
    duss_log_gen_head();
    duss_log_print();
    duss_event_resp_data(result, result, (int32_t)&v4, 3);
    if (*(int32_t *)g25 != *(int32_t *)g25) {
        // 0x56ae
        __stack_chk_fail();
        // branch -> 0x56b2
    }
    // 0x56b2
    g101 = v3;
    return result;
}

// Address range: 0x5732 - 0x57b5
int32_t function_5732(int32_t result, int32_t a2) {
    *(char *)(2 * g101) = (char)g102;
    int32_t v1 = g101; // 0x574c
    g101 = result;
    uint32_t v2 = *(int32_t *)g25; // 0x5760
    duss_log_gen_head();
    duss_log_print();
    g99 = 12;
    g93 = result;
    duss_event_resp_data(result, g101, g98 + 0x28ec, 12);
    int32_t v3 = *(int32_t *)g25; // 0x57a6
    g1 = -2 - v3 + v2 <= v2;
    if (v2 != v3) {
        // 0x57ac
        __stack_chk_fail();
        // branch -> 0x57b0
    }
    // 0x57b0
    g101 = v1;
    return result;
}

// Address range: 0x57b6 - 0x58d9
int32_t function_57b6(int32_t a1, int32_t a2) {
    // 0x57b6
    *(char *)(g98 + a1) = (char)g101;
    int32_t v1 = g101; // 0x57c4
    unsigned char v2 = *(char *)(a1 + 16); // 0x57d8
    uint32_t v3 = *(int32_t *)g25; // 0x57da
    g101 = a1;
    int32_t v4 = 0; // bp-172
    int32_t v5 = *(int32_t *)(*(int32_t *)(a1 + 4) + 20); // 0x57fc
    duss_mb_find_route_item_ext(v5, 256 * (int32_t)(v2 % 32) | (int32_t)(v2 / 32));
    int32_t result; // 0x58d4_2
    int32_t v6; // 0x58c8
    if (v5 != 0) {
        // 0x580e
        duss_log_gen_head();
        duss_log_print();
        // branch -> 0x586e
        // 0x586e
        g93 = -1001;
        // branch -> 0x58c6
        // 0x58c6
        v6 = *(int32_t *)g25;
        g99 = v6;
        g1 = -2 - v6 + v3 <= v3;
        if (v3 != v6) {
            // 0x58ce
            __stack_chk_fail();
            result = g93;
            // branch -> 0x58d2
        } else {
            result = -1001;
        }
        // 0x58d2
        g101 = v1;
        return result;
    }
    // 0x583e
    int32_t v7; // 0x58d4_22
    if (v4 == 0) {
        // 0x5842
        duss_log_gen_head();
        duss_log_print();
        // branch -> 0x586e
        // 0x586e
        g93 = -1001;
        v7 = -1001;
        // branch -> 0x58c6
    } else {
        // 0x5874
        duss_log_gen_head();
        duss_log_print();
        duss_mb_control_route_item(*(int32_t *)(g101 + 4), v4, 1);
        duss_event_resp_ok(g101, a1);
        g93 = 0;
        v7 = 0;
        // branch -> 0x58c6
    }
    // 0x58c6
    v6 = *(int32_t *)g25;
    g99 = v6;
    g1 = -2 - v6 + v3 <= v3;
    if (v3 != v6) {
        // 0x58ce
        __stack_chk_fail();
        result = g93;
        // branch -> 0x58d2
    } else {
        result = v7;
    }
    // 0x58d2
    g101 = v1;
    return result;
}

// Address range: 0x58da - 0x5c61
int32_t function_58da(int32_t a1, int32_t a2, int32_t a3, char a4) {
    *(char *)(g103 + a3) = a4;
    *(char *)(a1 + a3) = (char)(8 * a1);
    *(char *)(a1 + a3) = (char)g101;
    int32_t v1 = g101; // 0x5904
    g100 = a3;
    g101 = g25;
    int32_t v2 = *(int32_t *)g25; // 0x5916
    g102 = a1;
    int32_t v3;
    int32_t v4 = &v3; // 0x591e_0
    int32_t v5 = *(int32_t *)(a1 + 12); // 0x5924
    __memcpy_chk((char *)&v3, (char *)(a1 + 16), v5, (int32_t)(int16_t)&g65);
    uint32_t v6 = v3 % 256; // 0x592e
    g104 = g101;
    int32_t v7; // 0x5b18
    int32_t result; // 0x5afe
    int32_t v8; // 0x5ade
    int32_t v9; // 0x5aea
    if (v6 != 16) {
        // 0x59fe
        if (v6 == 17) {
            int32_t * v10 = (int32_t *)(g100 + 0x2920); // 0x5a06_0
            *v10 = *v10 + 1;
            *(char *)(0x2918 + g100) = 1;
            g101 = (int32_t)"hu_hdvt_fc_monitor_info";
            duss_log_gen_head();
            duss_log_print();
            duss_log_gen_head();
            int32_t v11;
            g101 = &v11;
            duss_log_print();
            // branch -> 0x5b06
            // 0x5b06
            g103 = 86;
            g99 = v4;
            v7 = function_d6e4(*(int32_t *)(g100 + (int32_t)&g34 + 60), 3);
            g101 = v7;
            if (v7 != 0) {
                // 0x5b22
                duss_log_gen_head();
                if (g103 != 0) {
                    // 0x5ace
                    duss_log_print();
                    // branch -> 0x5ade
                }
            }
        } else {
            // 0x5a7c
            g101 = (int32_t)&g68;
            duss_log_gen_head();
            duss_log_print();
            g101 = -1003;
            // branch -> 0x5ade
        }
        // 0x5ade
        v8 = g100;
        if (*(int32_t *)(v8 + 0x28e4) == 0) {
            // 0x5ae6
            v9 = *(int32_t *)(v8 + 0x25c8);
            duss_event_forward(v9, g102, (int32_t)(int16_t)&g80);
            // branch -> 0x5af6
        }
        // 0x5af6
        result = g101;
        if (v2 != *(int32_t *)g104) {
            // 0x5b24
            __stack_chk_fail();
            // branch -> 0x5b28
        }
        // 0x5b28
        g101 = v1;
        return result;
    }
    int32_t * v12 = (int32_t *)(g100 + 0x2920); // 0x593c_0
    *v12 = *v12 + 1;
    *(char *)(0x2918 + g100) = 1;
    g101 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/src/hu_event.c";
    duss_log_gen_head();
    duss_log_print();
    g101 = &g66;
    duss_log_gen_head();
    duss_log_print();
    g101 = &g67;
    duss_log_gen_head();
    duss_log_print();
    // branch -> 0x5b06
    // 0x5b06
    g103 = 86;
    g99 = v4;
    v7 = function_d6e4(*(int32_t *)(g100 + (int32_t)&g34 + 60), 3);
    g101 = v7;
    if (v7 == 0) {
        // 0x5ade
        v8 = g100;
        if (*(int32_t *)(v8 + 0x28e4) == 0) {
            // 0x5ae6
            v9 = *(int32_t *)(v8 + 0x25c8);
            duss_event_forward(v9, g102, (int32_t)(int16_t)&g80);
            // branch -> 0x5af6
        }
        // 0x5af6
        result = g101;
        if (v2 != *(int32_t *)g104) {
            // 0x5b24
            __stack_chk_fail();
            // branch -> 0x5b28
        }
        // 0x5b28
        g101 = v1;
        return result;
    }
    // 0x5b22
    duss_log_gen_head();
    if (g103 != 0) {
        // 0x5ace
        duss_log_print();
        // branch -> 0x5ade
    }
    // 0x5ade
    v8 = g100;
    if (*(int32_t *)(v8 + 0x28e4) == 0) {
        // 0x5ae6
        v9 = *(int32_t *)(v8 + 0x25c8);
        duss_event_forward(v9, g102, (int32_t)(int16_t)&g80);
        // branch -> 0x5af6
    }
    // 0x5af6
    result = g101;
    if (v2 != *(int32_t *)g104) {
        // 0x5b24
        __stack_chk_fail();
        // branch -> 0x5b28
    }
    // 0x5b28
    g101 = v1;
    return result;
}

// Address range: 0x5c62 - 0x6239
int32_t function_5c62(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g101; // 0x5c80
    g101 = a3;
    g103 = a1;
    g102 = a1;
    int32_t v2 = *(int32_t *)g25; // 0x5c96
    duss_log_gen_head();
    g105 = g25;
    duss_log_print();
    int32_t v3 = g101; // 0x5ccc
    g104 = v3 + 0x28c0;
    int32_t result; // R0
    if (*(int32_t *)(v3 + 0x28e4) == 0) {
        // 0x5db6
        result = -1001;
        // branch -> 0x5dba
    } else {
        // 0x5cd8
        g99 = 0;
        g100 = 86;
        if (function_d6e4(*(int32_t *)(v3 + (int32_t)&g34 + 60), 3) == 0) {
            int32_t v4 = *(int32_t *)(g101 + 0x25cc); // 0x5d24
            duss_osal_event_wait(v4);
            if (v4 == 0) {
                // 0x5d62
                duss_log_gen_head();
                if (g100 != 0) {
                    // 0x5d82
                    duss_log_print();
                    // branch -> 0x5d96
                }
                // 0x5d96
                duss_event_resp_data(g103, g102, g101 + 0x28c0, 1);
                // branch -> 0x5dba
            } else {
                // 0x5d32
                duss_log_gen_head();
                if (g100 != 0) {
                    // 0x5d5c
                    duss_log_print();
                    // branch -> 0x5da6
                }
                // 0x5da6
                duss_event_resp_err();
                // branch -> 0x5dba
            }
            // 0x5dba
            if (v2 != *(int32_t *)g105) {
                // 0x5dc4
                __stack_chk_fail();
                // branch -> 0x5dc8
            }
            // 0x5dc8
            g101 = v1;
            return g103;
        }
        // 0x5cf0
        duss_log_gen_head();
        if (g100 != 0) {
            // 0x5d5c
            duss_log_print();
            // branch -> 0x5da6
        }
        // 0x5da6
        result = g103;
        duss_event_resp_err();
        // branch -> 0x5dba
    }
    // 0x5dba
    if (v2 != *(int32_t *)g105) {
        // 0x5dc4
        __stack_chk_fail();
        // branch -> 0x5dc8
    }
    // 0x5dc8
    g101 = v1;
    return result;
}

// Address range: 0x623a - 0x67e9
int32_t function_623a(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g101; // 0x6260
    g101 = (int32_t)*(char *)(g100 + 18);
    int32_t * v2 = (int32_t *)g25; // 0x6280_0
    if (*v2 != *v2) {
        // 0x67de
        __stack_chk_fail();
        // branch -> 0x67e2
    }
    // 0x67e2
    g101 = v1;
    return -1001;
}

// Address range: 0x67ea - 0x6925
int32_t function_67ea(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10) {
    int32_t v1 = g100; // 0x6800
    g101 = v1;
    uint32_t v2 = g97; // 0x6808
    int16_t v3 = v2; // 0x6808
    int16_t v4 = v3 > 1 ? 1 : v3; // 0x6808
    int32_t v5 = v4 < -1 ? 0x7fffffff : (int32_t)v4; // 0x6808
    int16_t v6 = v2 / 0x10000; // 0x6808
    int16_t v7 = v6 > 1 ? 1 : v6; // 0x6808
    int32_t v8 = v7 < -1 ? 0x7fff0000 : 0x10000 * (int32_t)v7; // 0x6808
    uint32_t v9 = g96; // 0x6818
    float32_t v10 = fabsf((float32_t)(v8 | v5));
    int32_t v11 = v2 + a4 + g106; // 0x6830
    int32_t v12 = g104; // 0x6838
    char v13 = *(char *)((int32_t)(v9 - 1 + ((int32_t)v10 ^ 0x7fffffff) <= v9) + v12 - 1 + v12); // 0x684c
    *(int32_t *)g105 = v1;
    int32_t v14 = g97; // 0x6868
    int32_t v15 = v14 | (int32_t)v13 * (-1 - (g102 + a4) & -1 - a3); // R7
    *(int16_t *)g96 = (int16_t)v14;
    *(char *)g100 = (char)v14;
    int32_t v16 = g102; // 0x6884
    int32_t v17 = -v16; // 0x6884
    uint32_t v18 = g101; // 0x6890
    int32_t v19 = *(int32_t *)(g100 + v14); // 0x6894
    fabsf((float32_t)v17);
    int32_t v20 = v18 == 0 ? 1 : 1 << v18 - 1; // 0x689c
    int32_t v21 = g96; // 0x68a0
    int32_t v22 = v18 + -1 - v15; // 0x68a8
    int32_t v23 = (int32_t)((v20 & v17) != 0) + v22; // 0x68a8
    g101 = v23;
    int16_t v24 = *(int16_t *)(2 * (int32_t)*(int16_t *)(v21 + v19)); // 0x68ac
    int32_t v25 = v24;
    g103 = (int32_t)((int32_t)((v20 & v17) != 0) + v22 <= v18) + v16 + v15;
    *(int16_t *)(v25 + v21) = v24;
    *(int32_t *)(v11 - 12) = g100;
    *(int32_t *)(v11 - 8) = v23;
    *(int32_t *)(v11 - 4) = g92;
    int32_t v26 = g25;
    g101 = v26;
    *(int32_t *)(v11 - 20) = *(int32_t *)v26;
    *(int32_t *)g106 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/src/hu_event.c";
    *(int32_t *)(g106 + 4) = (int32_t)"hu_hdvt_tracking_state";
    *(int32_t *)(g106 + 8) = (int32_t)&g81;
    duss_log_gen_head();
    *(int32_t *)g106 = (int32_t)*(char *)(v25 + 16);
    g99 = (int32_t)"tracking state report 0x%x\n";
    duss_log_print();
    char v27 = *(char *)(v25 + 16); // 0x6900
    int32_t command = v27 == 0 ? (int32_t)"/system/bin/sdrs_log_cmd log 7" : (int32_t)"/system/bin/sdrs_log_cmd log 6";
    system((char *)command);
    int32_t v28 = g106; // 0x6912
    uint32_t v29 = *(int32_t *)(v28 + 148); // 0x6912
    g94 = v29;
    int32_t v30 = *(int32_t *)g101; // 0x6914
    g98 = v30;
    g93 = 0;
    uint32_t v31 = -2 - v30 + v29; // 0x6918
    g3 = ((v31 ^ v29) & (v31 ^ -v30)) < 0;
    g2 = v29 - v30 < 0;
    g4 = v29 == v30;
    g1 = v31 <= v29;
    int32_t v32; // 0x6920
    if (v29 != v30) {
        // 0x691c
        __stack_chk_fail();
        v32 = g106;
        // branch -> 0x6920
    } else {
        v32 = v28;
    }
    int32_t v33 = *(int32_t *)(v32 + 156); // 0x6922
    g100 = v33;
    g101 = *(int32_t *)(v32 + 160);
    ((int32_t (*)())*(int32_t *)(v32 + 164))();
    *(char *)(v33 + 20) = (char)g102;
    return 0;
}

// Address range: 0x6926 - 0x74c9
int32_t function_6926(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    int32_t v1 = g101; // 0x6940
    g101 = a1;
    duss_log_gen_head();
    duss_log_print();
    system("busybox mkdir -p /data/dji/cfg");
    system("busybox touch /data/dji/cfg/sdr_link_ok");
    system("sync");
    if (*(int32_t *)g25 != *(int32_t *)g25) {
        // 0x69a6
        __stack_chk_fail();
        // branch -> 0x69aa
    }
    // 0x69aa
    g101 = v1;
    return 0;
}

// Address range: 0x74ca - 0x74d5
int32_t function_74ca(int32_t a1, int32_t a2) {
    // 0x74ca
    function_7c68();
    g93 = 86;
    return 86;
}

// Address range: 0x74d6 - 0x74e1
int32_t function_74d6(int32_t a1, int32_t a2) {
    int32_t v1;
    g93 = &v1;
    function_7c0c();
    g93 = 86;
    return 86;
}

// Address range: 0x74e2 - 0x74ed
int32_t function_74e2(int32_t a1, int32_t a2, int32_t a3) {
    int32_t result = function_7bac(g99); // 0x74e8
    g93 = result;
    return result;
}

// Address range: 0x74ee - 0x74f9
int32_t function_74ee(int32_t result, int32_t a2) {
    // 0x74ee
    function_7b54(result);
    g93 = result;
    return result;
}

// Address range: 0x74fa - 0x7505
int32_t function_74fa(int32_t a1, int32_t a2) {
    int32_t result = (int32_t)function_7ad8(a1); // 0x7500_2
    g93 = result;
    return result;
}

// Address range: 0x7506 - 0x7511
int32_t function_7506(int32_t a1, int32_t a2, int32_t a3) {
    int32_t result = function_7a68(g102); // 0x750c
    g93 = result;
    return result;
}

// Address range: 0x7512 - 0x7523
int32_t function_7512(int32_t a1, int32_t a2, int32_t a3) {
    // 0x7512
    g98 = a3;
    g99 += 234;
    function_7938(g96);
    g93 = g96;
    return g96;
}

// Address range: 0x7524 - 0x78f5
void function_7524(void) {
    int32_t v1 = g100; // 0x7524
    int32_t v2 = g101; // 0x7524
    int32_t v3 = g102; // 0x7524
    int32_t v4 = g103; // 0x7524
    int32_t v5 = g104; // 0x7524
    int32_t v6 = g105; // 0x7524
    int32_t (*v7)() = (int32_t (*)())g92;
    g101 = g98;
    int32_t v8 = g25;
    int32_t v9 = *(int32_t *)(*(int32_t *)(g93 + 0x25c8) + 4); // 0x753c
    uint32_t v10 = *(int32_t *)v8; // 0x753e
    char * v11 = NULL; // bp-204
    int32_t v12 = *(int32_t *)(v9 + 20); // 0x754c
    duss_mb_find_route_item_ext(v12, (int32_t)&g31);
    int32_t v13 = v12; // R4
    uint32_t v14; // 0x78d4
    int32_t v15; // 0x78ce
    if (v12 != 0) {
        // 0x7748
        g94 = 1;
        duss_log_gen_head();
        // branch -> 0x78cc
        // 0x78cc
        g98 = v10;
        v15 = *(int32_t *)v8;
        g99 = v15;
        g93 = v13;
        v14 = -2 - v15 + v10;
        g3 = ((v14 ^ v10) & (v14 ^ -v15)) < 0;
        g2 = v10 - v15 < 0;
        g4 = v10 == v15;
        g1 = v14 <= v10;
        if (v10 != v15) {
            // 0x78d8
            __stack_chk_fail();
            // branch -> 0x78dc
        }
        // 0x78dc
        g100 = v1;
        g101 = v2;
        g102 = v3;
        g103 = v4;
        g104 = v5;
        g105 = v6;
        v7();
        g94 = g93;
        function_7aa4();
        return;
    }
    // 0x777a
    if (v11 == NULL) {
        // 0x777e
        g94 = 1;
        duss_log_gen_head();
        // branch -> 0x78cc
    } else {
        char v16 = *v11; // 0x77ae
        if (g101 == 0) {
            // 0x77e8
            if (v16 == 0) {
                // 0x77ea
                duss_log_gen_head();
                // branch -> 0x77e2
                // 0x77e2
                g94 = 3;
                duss_log_print();
                // branch -> 0x78cc
                // 0x78cc
                g98 = v10;
                v15 = *(int32_t *)v8;
                g99 = v15;
                g93 = v13;
                v14 = -2 - v15 + v10;
                g3 = ((v14 ^ v10) & (v14 ^ -v15)) < 0;
                g2 = v10 - v15 < 0;
                g4 = v10 == v15;
                g1 = v14 <= v10;
                if (v10 != v15) {
                    // 0x78d8
                    __stack_chk_fail();
                    // branch -> 0x78dc
                }
                // 0x78dc
                g100 = v1;
                g101 = v2;
                g102 = v3;
                g103 = v4;
                g104 = v5;
                g105 = v6;
                v7();
                g94 = g93;
                function_7aa4();
                return;
            }
        } else {
            // 0x77b2
            if (v16 != 0) {
                // 0x77b6
                duss_log_gen_head();
                // branch -> 0x77e2
                // 0x77e2
                g94 = 3;
                duss_log_print();
                // branch -> 0x78cc
                // 0x78cc
                g98 = v10;
                v15 = *(int32_t *)v8;
                g99 = v15;
                g93 = v13;
                v14 = -2 - v15 + v10;
                g3 = ((v14 ^ v10) & (v14 ^ -v15)) < 0;
                g2 = v10 - v15 < 0;
                g4 = v10 == v15;
                g1 = v14 <= v10;
                if (v10 != v15) {
                    // 0x78d8
                    __stack_chk_fail();
                    // branch -> 0x78dc
                }
                // 0x78dc
                g100 = v1;
                g101 = v2;
                g102 = v3;
                g103 = v4;
                g104 = v5;
                g105 = v6;
                v7();
                g94 = g93;
                function_7aa4();
                return;
            }
        }
        // 0x7818
        duss_log_gen_head();
        if (g101 == 0) {
            // 0x7840
            // branch -> 0x7844
        }
        // 0x7844
        duss_log_print();
        duss_mb_control_route_item(v9, (int32_t)v11, g101);
        v13 = v9;
        if (v9 != 0) {
            // 0x7862
            duss_log_gen_head();
            duss_log_print();
            // branch -> 0x7890
        }
        // 0x7890
        duss_log_gen_head();
        if (g101 == 0) {
            // 0x78b8
            // branch -> 0x78bc
        }
        // 0x78bc
        g94 = 3;
        duss_log_print();
        // branch -> 0x78cc
    }
    // 0x78cc
    g98 = v10;
    v15 = *(int32_t *)v8;
    g99 = v15;
    g93 = v13;
    v14 = -2 - v15 + v10;
    g3 = ((v14 ^ v10) & (v14 ^ -v15)) < 0;
    g2 = v10 - v15 < 0;
    g4 = v10 == v15;
    g1 = v14 <= v10;
    if (v10 != v15) {
        // 0x78d8
        __stack_chk_fail();
        // branch -> 0x78dc
    }
    // 0x78dc
    g100 = v1;
    g101 = v2;
    g102 = v3;
    g103 = v4;
    g104 = v5;
    g105 = v6;
    v7();
    g94 = g93;
    function_7aa4();
}

// Address range: 0x78f6 - 0x7901
int32_t function_78f6(int32_t a1, int32_t a2) {
    int32_t result = function_7a34(a1); // 0x78fc
    g93 = result;
    return result;
}

// Address range: 0x7902 - 0x790d
int32_t function_7902(int32_t a1, int32_t a2) {
    int32_t result = function_7f7c(a1, a1, g98, g99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0); // 0x7904
    g93 = result;
    return result;
}

// Address range: 0x790e - 0x7919
int32_t function_790e(int32_t result, int32_t a2) {
    // 0x790e
    function_7968(result);
    g93 = result;
    return result;
}

// Address range: 0x791a - 0x7937
int32_t function_791a(int32_t result, int32_t a2) {
    uint32_t v1 = g101; // 0x7924
    g101 = v1 + 134;
    g93 = result;
    g1 = v1 > 0xffffff79;
    return result;
}

// Address range: 0x7938 - 0x7967
int32_t function_7938(int32_t result) {
    // 0x7938
    g101 += 62;
    int32_t v1 = g100; // 0x7958
    g93 = result;
    g100 = v1 + 286;
    g94 = result;
    g1 = v1 > 0xfffffee1;
    return result;
}

// Address range: 0x7968 - 0x7971
int32_t function_7968(int32_t result) {
    // 0x7968
    function_7c5e(result);
    return result;
}

// Address range: 0x7972 - 0x79cf
int32_t function_7972(uint32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9) {
    // 0x7972
    // branch -> 0x7984
    while (a1 < 1) {
        // 0x7984
        // continue -> 0x7984
    }
    // 0x799a
    g101 = &g28;
    return *(int32_t *)g25;
}

// Address range: 0x79d0 - 0x7a33
int32_t function_79d0(int32_t a1, int32_t a2) {
    duss_log_gen_head();
    g105 = g100;
    duss_log_print();
    int32_t v1;
    memset((char *)&v1, 0, 22);
    g100 = 86;
    g99 = 0;
    function_d6e4(*(int32_t *)((int32_t)&g34 + 60), 3);
    g99 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/src/hu_event.c";
    g93 = (int32_t)"hu_hdvt_get_sdr_vt_config_info";
    return (int32_t)"hu_hdvt_get_sdr_vt_config_info";
}

// Address range: 0x7a34 - 0x7a67
int32_t function_7a34(int32_t a1) {
    // 0x7a34
    duss_log_gen_head();
    function_7a9a();
    return g100;
}

// Address range: 0x7a68 - 0x7a99
int32_t function_7a68(int32_t a1) {
    duss_osal_event_wait(a1);
    duss_log_gen_head();
    g1 = g100 > 1;
    g93 = g100;
    g94 = 1;
    int32_t v1;
    g98 = &v1;
    g99 = (int32_t)"sdr_debug: duss_osal_event_wait GET_SDR_VT_CONFIG_INFO_DONE failed\n";
    return g100;
}

// Address range: 0x7a9a - 0x7aa3
void function_7a9a(void) {
    // 0x7a9a
    duss_log_print();
    function_7af0();
    g99 = 0;
}

// Address range: 0x7aa4 - 0x7ad7
void function_7aa4(void) {
    // 0x7aa4
    if (*(int32_t *)g99 <= 129) {
        // 0x7ad6
        return;
    }
    // 0x7aaa
    duss_log_gen_head();
    function_7a9a();
}

// Address range: 0x7ad8 - 0x7aef
char * function_7ad8(int32_t a1) {
    int32_t v1 = *(int32_t *)(g101 + a1); // 0x7ada
    int32_t v2;
    __memcpy_chk((char *)&v2, (char *)v1, g98, 22);
    int32_t v3 = g104; // 0x7ae2
    int32_t v4 = g103; // 0x7ae4
    duss_event_resp_data(v3, v4, (int32_t)&v2, 22);
    return (char *)function_7b04((char *)v3, v4);
}

// Address range: 0x7af0 - 0x7b03
int32_t function_7af0(void) {
    // 0x7af0
    duss_event_resp_err();
    g93 = function_7b04((char *)g104, g103);
    return 0;
}

// Address range: 0x7b04 - 0x7b19
int32_t function_7b04(char * a1, int32_t a2) {
    int32_t v1 = (int32_t)a1; // 0x7b04_0
    g93 = v1;
    g94 = a2;
    uint32_t v2;
    g98 = v2;
    int32_t v3 = *(int32_t *)g105; // 0x7b06
    g99 = v3;
    uint32_t v4 = -2 - v3 + v2; // 0x7b0a
    g3 = ((v4 ^ v2) & (v4 ^ -v3)) < 0;
    g2 = v2 - v3 < 0;
    g4 = v2 == v3;
    g1 = v4 <= v2;
    if (v2 != v3) {
        // 0x7b0e
        __stack_chk_fail();
        // branch -> 0x7b12
    }
    // 0x7b12
    int32_t v5;
    g100 = v5;
    int32_t v6;
    g101 = v6;
    int32_t v7;
    g102 = v7;
    int32_t v8;
    g103 = v8;
    int32_t v9;
    g104 = v9;
    int32_t v10;
    g105 = v10;
    int32_t v11;
    ((int32_t (*)())v11)();
    g1 = (v1 & 0x100000) != 0;
    return v1 / 0x200000;
}

// Address range: 0x7b1a - 0x7b53
int32_t function_7b1a(int32_t a1, int32_t a2) {
    // 0x7b1a
    g99 = a1;
    *(int32_t *)(g101 + 64) = a1;
    int32_t v1 = a1 + 364; // 0x7b34
    int32_t v2 = unknown_7b10(v1, v1, a1);
    int32_t result = v2 + 78; // 0x7b50
    g93 = result;
    g1 = v2 > 0xffffffb1;
    return result;
}

// Address range: 0x7b54 - 0x7b5b
int32_t function_7b54(int32_t result) {
    // 0x7b54
    g93 = result;
    return result;
}

// Address range: 0x7b5c - 0x7bab
int32_t function_7b5c(int32_t a1, int32_t * a2, int32_t * a3, int32_t a4, int32_t a5) {
    g105 = a4;
    g101 = g25;
    g104 = a1;
    g103 = (int32_t)a2;
    g102 = (int32_t)a3;
    int32_t v1;
    memset((char *)&v1, 0, (int32_t)(int16_t)&g65);
    g100 = (int32_t)"linker";
    g94 = &v1;
    g98 = 2;
    return g104;
}

// Address range: 0x7bac - 0x7c0b
int32_t function_7bac(int32_t a1) {
    // 0x7bac
    g99 = (int32_t)&g62;
    duss_event_send_with_retry(a1, (int32_t)&g62);
    int32_t v1 = 0; // 0x7bf2
    if (a1 != 0) {
        // 0x7bbc
        duss_log_gen_head();
        g99 = (int32_t)"duss_event_send_with_retry error: %d\n";
        duss_log_print();
        v1 = a1;
        // branch -> 0x7bec
    }
    // 0x7bec
    uint32_t v2;
    g94 = v2;
    int32_t v3 = *(int32_t *)g101; // 0x7bf0
    g98 = v3;
    g93 = v1;
    uint32_t v4 = -2 - v3 + v2; // 0x7bf4
    g3 = ((v4 ^ v2) & (v4 ^ -v3)) < 0;
    g2 = v2 - v3 < 0;
    g4 = v2 == v3;
    g1 = v4 <= v2;
    if (v2 != v3) {
        // 0x7bf8
        __stack_chk_fail();
        // branch -> 0x7bfc
    }
    // 0x7bfc
    int32_t v5;
    g100 = v5;
    int32_t v6;
    g101 = v6;
    int32_t result;
    g102 = result;
    int32_t v7;
    g103 = v7;
    int32_t v8;
    g104 = v8;
    int32_t v9;
    g105 = v9;
    int32_t v10;
    ((int32_t (*)())v10)();
    g93 = result;
    return result;
}

// Address range: 0x7c0c - 0x7c5d
int32_t function_7c0c(void) {
    *(int32_t *)(g93 + 40) = g98;
    uint32_t v1 = g103; // 0x7c18
    g3 = ((v1 - 82 ^ v1) & v1 + 0x7fffffae) < 0;
    g1 = v1 > 81;
    g104 = g98;
    g100 = g25;
    g103 = g93;
    g101 = v1 - g93;
    g102 = 0x3246;
    g94 = 3;
    g93 = 86;
    int32_t v2;
    g98 = &v2;
    g99 = 128;
    return 86;
}

// Address range: 0x7c5e - 0x7c67
void function_7c5e(int32_t a1) {
    // 0x7c5e
    g93 = a1;
    duss_log_gen_head();
}

// Address range: 0x7c68 - 0x7cbf
int32_t function_7c68(void) {
    int32_t v1;
    int32_t v2 = &v1; // 0x7c6e_0
    duss_log_print();
    int32_t v3 = g104; // 0x7c76
    g100 = v3 + 0x28c0;
    g102 = 1;
    *(char *)(v3 + 0x28cf) = 1;
    function_f8f0(86, 3, v2);
    int32_t v4 = *(int32_t *)(g100 + 36); // 0x7c84
    g100 = v4;
    int32_t v5;
    int32_t v6;
    function_7b5c(g101, &v5, &v5, v4, v6);
    duss_log_gen_head();
    g3 = false;
    g1 = true;
    g93 = 86;
    g94 = g100;
    g98 = v2;
    g99 = (int32_t)"wifi mode change reg\n";
    return 86;
}

// Address range: 0x7cc0 - 0x7f53
int32_t function_7cc0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    duss_log_print();
    // branch -> 0x7d4e
    while (true) {
        // 0x7d4e
        g100 = 1;
        g102 = 86;
        int32_t v1;
        g99 = &v1;
        if (function_d6e4(*(int32_t *)(g104 + (int32_t)&g34 + 60), 1) == 0) {
            int32_t v2 = g101; // 0x7dae
            g93 = v2;
            duss_event_resp_ok(v2, g103);
            // branch -> 0x7db6
        } else {
          lab_0x7d6c:
            // 0x7d6c
            duss_log_gen_head();
            if (g102 != 0) {
                // 0x7d8c
                duss_log_print();
                // branch -> 0x7d9e
            }
            // 0x7d9e
            g99 = 0;
            g93 = g101;
            duss_event_resp_err();
            // branch -> 0x7db6
        }
        // 0x7db6
        uint32_t v3;
        g94 = v3;
        int32_t v4 = *(int32_t *)g105; // 0x7db8
        g98 = v4;
        uint32_t v5 = -2 - v4 + v3; // 0x7dbc
        g3 = ((v5 ^ v3) & (v5 ^ -v4)) < 0;
        g2 = v3 - v4 < 0;
        g4 = v3 == v4;
        g1 = v5 <= v3;
        if (v3 != v4) {
            // 0x7dc0
            __stack_chk_fail();
            // branch -> 0x7dc4
        }
        // 0x7dc4
        int32_t v6;
        g100 = v6;
        int32_t v7;
        g101 = v7;
        int32_t v8;
        g102 = v8;
        int32_t v9;
        g103 = v9;
        int32_t v10;
        g104 = v10;
        int32_t v11;
        g105 = v11;
        int32_t v12;
        ((int32_t (*)())v12)();
        *(int32_t *)(g103 + 24) = g102;
        int32_t v13 = g93; // 0x7dce
        uint32_t v14 = g98; // 0x7dd4
        bool v15;
        int32_t v16; // 0x7dfc
        if (v13 > -1) {
            int32_t v17 = v13; // 0x7e12
            // 0x7e00
            int32_t v18; // 0x7e98_0
            int32_t v19;
            int32_t v20;
            if (v17 != 0 && v14 > 176) {
              lab_0x7e0a:
                // 0x7e0a
                v15 = g103 > 153;
                v16 = v17;
                // branch -> 0x7df0
              lab_0x7df0:
                // 0x7df0
                if (v16 != 0 && !((v15 ^ true))) {
                  lab_0x7df6:
                    // 0x7df6
                    v17 = g106 & -0x10000 | v16 & (int32_t)&g90;
                    // branch -> 0x7e00
                    // 0x7e00
                    if (v17 != 0 && g103 > 219) {
                        goto lab_0x7e0a;
                    }
                    // 0x7e90
                    v18 = &v19;
                    // branch -> 0x7eb2
                    while (true) {
                        // 0x7eb2
                        duss_log_gen_head();
                        g98 = v18;
                        duss_log_print();
                        v20 = g102;
                        if (*(char *)(v20 + 0x2928) != 0) {
                          lab_0x7ebc:;
                            int32_t v21 = -1;
                            g98 = 6;
                            duss_osal_msgq_send((int32_t)&v21, 6, 0);
                            int32_t v22 = *(int32_t *)(v20 + 0x292c); // 0x7ee0
                            g100 = v22;
                            if (v22 != 0) {
                                // 0x7ee4
                                // branch -> 0x7ee8
                              lab_0x7ee8:
                                // 0x7ee8
                                duss_log_gen_head();
                                g98 = v18;
                                duss_log_print();
                                // branch -> 0x7f14
                            }
                        }
                      lab_0x7f14:
                        // 0x7f14
                        g94 = v9;
                        int32_t v23 = *(int32_t *)g103; // 0x7f16
                        g99 = v23;
                        g93 = g100;
                        uint32_t v24 = -2 - v23 + v9; // 0x7f1a
                        g3 = ((v24 ^ v9) & (v24 ^ -v23)) < 0;
                        g2 = v9 - v23 < 0;
                        g4 = v9 == v23;
                        g1 = v24 <= v9;
                        if (v9 != v23) {
                            // 0x7f1e
                            __stack_chk_fail();
                            // branch -> 0x7f22
                        }
                        // 0x7f22
                        g100 = v11;
                        g101 = v12;
                        int32_t v25;
                        g102 = (int32_t)(int64_t *)v25;
                        int32_t v26;
                        g103 = v26;
                        int32_t v27;
                        ((int32_t (*)())v27)();
                        g100 = (int32_t)*(int16_t *)(g103 + g102);
                        int32_t result = g93; // 0x7f2a
                        bool v28 = g1; // 0x7f2a
                        if (result == 0) {
                            int32_t v29 = g92; // 0x7f38
                            if (v29 % 4 == 0) {
                                // if_7f38_0_true
                                // branch -> after_if_7f38_0
                            }
                            // after_if_7f38_0
                            g92 = v29;
                            // branch -> 0x7ee8
                            goto lab_0x7ee8;
                        }
                        // 0x7f50
                        if (v28) {
                            // 0x7f52
                            return result;
                        }
                        // 0x7e8a
                        // branch -> 0x7eb2
                    }
                }
              lab_0x7d00:
                // 0x7d00
                remove("/data/misc/wifi/preference.conf");
                if (access("/data/misc/wifi/hostapd.conf", F_OK) == 0) {
                    // 0x7d14
                    duss_log_gen_head();
                    duss_log_print();
                    remove("/data/misc/wifi/hostapd.conf");
                    // branch -> 0x7d4a
                }
                // 0x7d4a
                sync();
                // branch -> 0x7d4e
                continue;
            }
            // 0x7e90
            v18 = &v19;
            // branch -> 0x7eb2
            while (true) {
                // 0x7eb2
                duss_log_gen_head();
                g98 = v18;
                duss_log_print();
                v20 = g102;
                if (*(char *)(v20 + 0x2928) == 0) {
                    goto lab_0x7f14;
                }
                goto lab_0x7ebc;
            }
        } else {
            int32_t v30 = v13 + 104; // 0x7ddc
            uint32_t v31 = g99 + v30; // 0x7de0
            if (v30 == 0 || v13 <= 0xffffff97) {
                goto lab_0x7d6c;
            }
            // 0x7de6
            v15 = v31 > 0xffffffe7;
            v16 = v31 + 24;
            // branch -> 0x7df0
            goto lab_0x7df0;
        }
    }
}

// Address range: 0x7f54 - 0x7f7b
int32_t function_7f54(int32_t a1, int32_t a2, int32_t a3) {
    // 0x7f54
    g99 = g25;
    g100 = a1;
    g101 = g25;
    function_d6b0(124, 4, a1);
    g93 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/src/hu_event.c";
    g98 = (int32_t)"hu_set_country_code_to_sdr";
    return (int32_t)"dji/duml/service/hdvt/hdvt_uav/src/hu_event.c";
}

// Address range: 0x7f7c - 0x94df
int32_t function_7f7c(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int64_t a13, int32_t a14, int64_t a15, int32_t a16, int32_t a17, int32_t a18, int32_t a19, int32_t a20, int32_t a21, int32_t a22, int32_t a23, int32_t a24, char a25, int32_t a26, int32_t a27, int32_t a28, int32_t a29, int32_t a30, int32_t a31, int32_t a32, int32_t a33, int32_t a34, int32_t a35, int32_t a36, int32_t a37, int32_t a38, int32_t a39, int32_t a40, int32_t a41, int32_t a42, int32_t a43, int32_t a44, int32_t * a45, int32_t a46, int32_t a47) {
    char * v1 = (char *)a5;
    g93 = 86;
    // branch -> 0x7f8c
    int32_t v2; // 0x7fbc
    int32_t v3; // 0x7fbc
    int32_t v4; // 0x7fbe
    while (true) {
        // 0x7f8c
        g99 = 128;
        duss_log_gen_head();
        if (g93 != 0) {
            // 0x7f94
            g99 = (int32_t)"set country code to sdr %s\n";
            duss_log_print();
            // branch -> 0x7fa4
        }
        // 0x7fa4
        g93 = 0;
        int32_t v5;
        g94 = v5;
        int32_t v6 = *(int32_t *)g101; // 0x7fae
        g98 = v6;
        uint32_t v7 = -2 - v6 + v5; // 0x7fb0
        g3 = ((v7 ^ v5) & (v7 ^ -v6)) < 0;
        g2 = v5 - v6 < 0;
        g4 = v5 == v6;
        g1 = v7 <= v5;
        if (v5 != v6) {
            // 0x7fb4
            __stack_chk_fail();
            // branch -> 0x7fb8
        }
        // 0x7fb8
        int32_t v8;
        g100 = v8;
        int32_t v9;
        g101 = v9;
        int32_t v10;
        ((int32_t (*)())v10)();
        v3 = g98;
        v2 = (int32_t)*(int16_t *)(g94 + v3);
        g102 = v2;
        v4 = g93;
        if (!g3) {
            // break -> 0x7fc6
            break;
        }
        // continue -> 0x7f8c
    }
    int32_t (*v11)(int32_t, int32_t, int32_t) = (int32_t (*)(int32_t, int32_t, int32_t))a7;
    int32_t v12 = g100; // bp-48
    int32_t v13 = g101; // 0x7fd0
    int32_t v14 = g103; // 0x7fd0
    int32_t v15 = g104; // 0x7fd0
    int32_t v16 = g105; // 0x7fd0
    int32_t v17 = g95; // 0x7fd0
    int32_t v18 = g96; // bp-20
    int32_t (*v19)() = (int32_t (*)())g92;
    g100 = v3;
    int32_t v20 = g25;
    g101 = v3 + 0x28c0;
    g104 = v4;
    uint32_t v21 = *(int32_t *)v20; // 0x7fea
    g102 = v4;
    int32_t v22 = 0;
    duss_osal_mutex_lock(*(int32_t *)(v3 + 0x28dc), -1);
    *(char *)(g101 + 14) = 1;
    *(int32_t *)(g101 + 16) = *(int32_t *)(g102 + 16);
    *(int32_t *)(g101 + 20) = *(int32_t *)(g102 + 20);
    int32_t v23;
    int32_t v24 = &v23; // 0x8022_0
    g105 = (int32_t)*(char *)(g102 + 24);
    duss_log_gen_head();
    int32_t v25 = g101; // 0x802e
    int32_t v26 = v25 + 16; // 0x802e
    g95 = v26;
    g103 = v25 + 20;
    int32_t v27 = v25 + 24; // 0x803a
    g101 = v27;
    g98 = v24;
    duss_log_print();
    int32_t str = g101; // 0x805a
    g94 = str;
    g96 = g100 + 0x28c0;
    uint32_t v28; // 0x81b0
    int32_t v29;
    int32_t v30; // 0x8166
    int32_t v31; // 0x81ae
    int32_t v32; // 0x81c0
    int32_t v33; // 0x8142
    int32_t v34; // 0x8156
    uint32_t v35; // 0x81cc
    int32_t v36; // 0x81ac
    if (strcmp((char *)g103, (char *)str) != 0) {
        char * v37 = "dji/duml/service/hdvt/hdvt_uav/src/hu_event.c"; // bp-212
        duss_log_gen_head();
        duss_log_print();
        v22 = 1;
        int32_t v38 = g100; // 0x809e
        int32_t v39 = v38 + 0x28c0; // 0x809e
        *(int32_t *)(g96 + 24) = *(int32_t *)g103;
        if (*(char *)(v38 + 0x28cf) == 0) {
            // 0x80ac
            function_f75c(86, (char *)g101, 1, v39, (int32_t)v37, (int32_t)"hu_event_set_wireless_country_code", (int32_t)&g24, v27, 1, v20);
            int32_t v40 = 0x1000000 * function_f978(86, (char *)g101, 1, v39, (int32_t)v37) / 0x1000000;
            g99 = &v40;
            v37 = (char *)1;
            int32_t v41 = function_d6e4(*(int32_t *)(g100 + (int32_t)&g34 + 60), 1); // 0x80d6
            if (v41 != 0) {
                // 0x80e0
                duss_log_gen_head();
                v37 = (char *)v41;
                g94 = 2;
                g98 = v24;
                duss_log_print();
                // branch -> 0x8142
            }
        } else {
            // 0x8114
            v37 = "dji/duml/service/hdvt/hdvt_uav/src/hu_event.c";
            g94 = 2;
            g98 = v24;
            duss_log_gen_head();
            // 0x8134
            g94 = 2;
            g98 = v24;
            duss_log_print();
            // branch -> 0x8142
        }
        // 0x8142
        v33 = g100;
        v34 = v33;
        if (*(char *)(v33 + 0x28cf) == 0) {
            // 0x814a
            function_7b5c(g104, (int32_t *)g95, (int32_t *)g103, g105, (int32_t)v37);
            v34 = g100;
            // branch -> 0x8156
        }
        // 0x8156
        function_7f54(g101, g94, g98);
        duss_osal_mutex_unlock(*(int32_t *)(v34 + 0x28dc));
        v30 = g104;
        duss_event_resp_data(v30, g102, (int32_t)&v22, 1);
        v31 = 0;
        if (v30 != 0) {
            // 0x8178
            duss_log_gen_head();
            duss_log_print();
            v31 = v30;
            // branch -> 0x81a8
        }
        // 0x81a8
        g99 = v20;
        g98 = v21;
        v36 = *(int32_t *)v20;
        g94 = v36;
        g93 = v31;
        v28 = -2 - v36 + v21;
        g3 = ((v28 ^ v21) & (v28 ^ -v36)) < 0;
        g2 = v21 - v36 < 0;
        g4 = v21 == v36;
        g1 = v28 <= v21;
        if (v21 == v36) {
          lab_0x81b8:;
            int32_t v42;
            int32_t v43; // 0x81f0
            while (true) {
                // 0x81b8
                g100 = v12;
                g101 = v13;
                g102 = v2;
                g103 = v14;
                g104 = v15;
                g105 = v16;
                g95 = v17;
                g96 = v18;
                v19();
                v32 = g93;
                v29 = unknown_8264(v32);
                g93 = v29;
                v35 = g99;
                g3 = ((v35 - 199 ^ v35) & v35 + 0x7fffff39) < 0;
                g94 = v29;
                g2 = v29 < 0;
                g4 = v29 == 0;
                g1 = v35 > 198;
                if (v29 <= 0) {
                  lab_0x81e2:
                    // 0x81e2
                    v42 = unknown_8274(v29, v29);
                    g93 = v42;
                    v43 = g98;
                    g3 = ((v43 - 189 ^ v43) & v43 + 0x7fffff43) < 0;
                    g94 = v42;
                    g2 = v42 < 0;
                    g4 = v42 == 0;
                    g1 = v43 > 188;
                    if (v42 >= 0) {
                        // break -> 0x81fa
                        break;
                    }
                    // continue -> 0x81b8
                    continue;
                }
            }
            // 0x81fa
            v12 = g100;
            int32_t v44 = g101; // 0x8208
            int32_t v45 = (int32_t)*(int16_t *)(g94 + v32); // 0x8208
            int32_t v46 = g103; // 0x8208
            int32_t v47 = g104; // 0x8208
            int32_t v48 = g105; // 0x8208
            int32_t v49 = g92; // 0x8208
            g100 = v43;
            int32_t v50 = g25;
            g101 = v42;
            int32_t v51 = *(int32_t *)(v42 + 48); // 0x8226
            uint32_t v52 = *(int32_t *)v50; // 0x822a
            g104 = v51;
            int32_t v53 = v51 / 8 % 2; // 0x8244
            *(char *)(v43 + 0x28e0) = (char)v53;
            if (*(char *)(v43 + 0x28e1) == 0) {
                // 0x8250
                if (v53 != 0) {
                    // 0x8252
                    // branch -> 0x8262
                    // 0x8262
                    system((char *)(int32_t)"/system/bin/cpu_freq_scaling.sh max");
                    // branch -> 0x8266
                }
            } else {
                // 0x825a
                if (v53 == 0) {
                    // 0x8262
                    system((char *)(int32_t)"/system/bin/cpu_freq_scaling.sh min");
                    // branch -> 0x8266
                }
            }
            int32_t v54 = g100; // 0x8266
            *(char *)(v54 + 0x28e1) = *(char *)(v54 + 0x28e0);
            int32_t v55;
            int32_t v56 = &v55; // 0x828c_2
            duss_log_gen_head();
            duss_log_print();
            int32_t v57 = g100; // 0x82b4
            int32_t v58 = v57; // 0x8538
            if (*(char *)(v57 + 0x28cd) <= 1) {
                // 0x8476
                duss_log_gen_head();
                duss_log_print();
                int32_t v59 = g100; // 0x84ac
                g102 = v59 + 0x28c0;
                duss_osal_mutex_lock(*(int32_t *)(v59 + 0x28dc), -1);
                int32_t v60 = g102; // 0x84ba
                int32_t v61;
                if (*(char *)(v60 + 14) == 0) {
                    // 0x84ce
                    v61 = (int32_t)*(char *)(v60 + 3);
                    // branch -> 0x84d4
                } else {
                    char * v62 = (char *)(int32_t)*(char *)(0x28cd + v57);
                    v61 = function_f978(86, (char *)(v60 + 24), v56, (int32_t)"re-send to cp, sdr_area_set_count=%u\n", (int32_t)v62);
                    // branch -> 0x84d4
                }
                int32_t v63 = 0x1000000 * v61 / 0x1000000;
                int32_t v64 = g100; // 0x84d4
                if (*(char *)(v64 + 0x28cf) == 0) {
                    // 0x84dc
                    g102 = 1;
                    g103 = 86;
                    g99 = &v63;
                    int32_t v65 = function_d6e4(*(int32_t *)(v64 + (int32_t)&g34 + 60), 1); // 0x84f0
                    g105 = v65;
                    if (v65 != 0) {
                        // 0x84f8
                        duss_log_gen_head();
                        if (g103 != 0) {
                            // 0x851a
                            duss_log_print();
                            // branch -> 0x852e
                        }
                    }
                }
                // 0x852e
                duss_osal_mutex_unlock(*(int32_t *)(g100 + 0x28dc));
                v58 = g100;
                // branch -> 0x8538
            }
            int32_t * v66 = (int32_t *)(v58 + 0x28f0); // 0x853c_0
            *v66 = *v66 + 1;
            int32_t v67 = g100 + 0x25c0; // R3
            if (*(int32_t *)(v58 + 0x28e4) == 0) {
                // 0x854a
                *(int16_t *)(g101 + 4) = (int16_t)&g31;
                int32_t v68 = *(int32_t *)(v67 + 8); // 0x8550
                duss_event_send(v68);
                if (v68 != 0) {
                    // 0x855e
                    duss_log_gen_head();
                    // branch -> 0x85d4
                    // 0x85d4
                    duss_log_print();
                    // branch -> 0x85d8
                }
            } else {
                // 0x8590
                g92 = &g89;
                *(int16_t *)(g101 + 4) = (int16_t)&g89;
                int32_t v69 = *(int32_t *)(v67 + 8); // 0x8598
                duss_event_send(v69);
                if (v69 != 0) {
                    // 0x85a4
                    duss_log_gen_head();
                    // branch -> 0x85d4
                    // 0x85d4
                    duss_log_print();
                    // branch -> 0x85d8
                }
            }
            // 0x85d8
            *(int16_t *)(g101 + 4) = (int16_t)&g80;
            int32_t v70 = *(int32_t *)(g100 + 0x25c8); // 0x85e2
            duss_event_send(v70);
            if (v70 != 0) {
                // 0x85ee
                duss_log_gen_head();
                duss_log_print();
                // branch -> 0x8622
            }
            // 0x8622
            *(int16_t *)(g101 + 4) = 256;
            int32_t v71 = *(int32_t *)(g100 + 0x25c8); // 0x862c
            duss_event_send(v71);
            if (v71 != 0) {
                // 0x8638
                duss_log_gen_head();
                duss_log_print();
                // branch -> 0x866c
            }
            int32_t v72 = g100; // 0x866c
            if (*(int32_t *)(v72 + 0x25b8) != 0) {
                // 0x8674
                g102 = 86;
                g99 = g101 + 16;
                if (function_d6e4(*(int32_t *)(v72 + (int32_t)&g34 + 60), 3) != 0) {
                    // 0x8690
                    duss_log_gen_head();
                    if (g102 != 0) {
                        // 0x86b2
                        duss_log_print();
                        // branch -> 0x86c2
                    }
                }
            }
            // 0x86c2
            g99 = 30;
            g94 = v52;
            int32_t v73 = *(int32_t *)v50; // 0x8c94
            g98 = v73;
            g93 = 0;
            uint32_t v74 = -2 - v73 + v52; // 0x8c98
            g3 = ((v74 ^ v52) & (v74 ^ -v73)) < 0;
            g2 = v52 - v73 < 0;
            g4 = v52 == v73;
            g1 = v74 <= v52;
            if (v52 != v73) {
                // 0x8c9c
                __stack_chk_fail();
                // branch -> 0x8ca0
            }
            // 0x8ca0
            g100 = v12;
            g101 = v44;
            g102 = v45;
            g103 = v46;
            g104 = v47;
            g105 = v48;
            ((int32_t (*)())v49)();
            int32_t v75 = g25;
            g99 = v75;
            int32_t v76 = *(int32_t *)v75; // 0x8cbe
            g101 = v76;
            g101 = v75;
            if (*(int32_t *)(g98 + 0x28e4) != 0) {
                // 0x8cca
                g97 = &g23;
                *(int16_t *)(g94 + 4) = (int16_t)&g23;
                int32_t v77 = *(int32_t *)(g98 + 0x25c8); // 0x8cd6
                duss_event_send(v77);
                if (v77 != 0) {
                    // 0x8ce0
                    duss_log_gen_head();
                    g99 = (int32_t)"uss_event_send() error: %d\n";
                    duss_log_print();
                    // branch -> 0x8d10
                }
            }
            g98 = v76;
            int32_t v78 = *(int32_t *)g101; // 0x8d12
            g94 = v78;
            g93 = 0;
            uint32_t v79 = -2 - v78 + v76; // 0x8d16
            g3 = ((v79 ^ v76) & (v79 ^ -v78)) < 0;
            g2 = v76 - v78 < 0;
            g4 = v76 == v78;
            g1 = v79 <= v76;
            if (v76 != v78) {
                // 0x8d1a
                __stack_chk_fail();
                // branch -> 0x8d1e
            }
            // 0x8d1e
            g100 = v12;
            g101 = v44;
            ((int32_t (*)())g92)();
            *(int32_t *)(g102 + v12) = g98;
            int32_t v80 = g93; // 0x8d26
            int32_t v81 = *(int32_t *)(v80 + 4); // 0x8d2c
            int32_t v82 = *(int32_t *)(v80 + 12); // 0x8d2c
            g101 = v82;
            int32_t v83 = v82 - 6; // 0x8d30
            g94 = v83;
            int32_t v84 = g92; // 0x8d38
            g101 = v81;
            int32_t v85 = g25;
            uint32_t v86 = *(int32_t *)v85; // 0x8d48
            v67 = v81 + 0x25c0;
            if (*(int32_t *)(v81 + 0x28e4) == 0) {
                // 0x8d5a
                g92 = (int32_t)&g31;
                *(int16_t *)(v82 - 2) = (int16_t)&g31;
                int32_t v87 = *(int32_t *)(v67 + 8); // 0x8d62
                duss_event_send(v87);
                if (v87 != 0) {
                    // 0x8d6e
                    duss_log_gen_head();
                    // branch -> 0x8e22
                    // 0x8e22
                    g94 = 1;
                    duss_log_print();
                    // branch -> 0x8e26
                }
            } else {
                // 0x8d9e
                *(int16_t *)(v82 - 2) = (int16_t)&g89;
                int32_t v88 = *(int32_t *)(v67 + 8); // 0x8da4
                duss_event_send(v88);
                if (v88 != 0) {
                    // 0x8dae
                    duss_log_gen_head();
                    duss_log_print();
                    // branch -> 0x8dde
                }
                // 0x8dde
                g97 = &g85;
                *(int16_t *)(v83 + 4) = (int16_t)&g85;
                int32_t v89 = g101; // 0x8de6
                g101 = v89 + 0x25c0;
                g94 = v83;
                int32_t v90 = *(int32_t *)(v89 + 0x25c8); // 0x8dec
                duss_event_send(v90);
                if (v90 != 0) {
                    // 0x8df6
                    duss_log_gen_head();
                    // branch -> 0x8e22
                    // 0x8e22
                    g94 = 1;
                    duss_log_print();
                    // branch -> 0x8e26
                }
            }
            // 0x8e26
            g98 = v86;
            int32_t v91 = *(int32_t *)v85; // 0x8e28
            g99 = v91;
            g93 = 0;
            uint32_t v92 = -2 - v91 + v86; // 0x8e2c
            g3 = ((v92 ^ v86) & (v92 ^ -v91)) < 0;
            g2 = v86 - v91 < 0;
            g4 = v86 == v91;
            g1 = v92 <= v86;
            if (v86 != v91) {
                // 0x8e30
                __stack_chk_fail();
                // branch -> 0x8e34
            }
            // 0x8e34
            g100 = *(int32_t *)(v80 + 8);
            g101 = v82;
            g102 = *(int32_t *)(v80 + 16);
            ((int32_t (*)())v84)();
            *(int32_t *)(g98 + v82) = g93;
            int32_t v93 = g93; // 0x8e3a
            g101 = *(int32_t *)(v93 + 4);
            int32_t v94 = v93 + 16; // 0x8e40
            *(int32_t *)v94 = v94;
            *(int32_t *)(v93 + 20) = g101;
            g99 = *(int32_t *)v94;
            int32_t v95 = *(int32_t *)(v94 + 4); // 0x8e4c
            g101 = v95;
            int32_t v96 = *(int32_t *)(v94 + 8); // 0x8e4c
            g103 = v96;
            int32_t v97 = v94 + 12; // 0x8e4c
            *(int32_t *)v97 = v97;
            *(int32_t *)(v94 + 16) = v97;
            *(int32_t *)(v94 + 20) = g101;
            *(int32_t *)(v94 + 24) = *(int32_t *)(v93 + 8);
            *(int32_t *)(v94 + 28) = v96;
            int32_t v98 = *(int32_t *)(v94 + 32); // 0x8e58
            g101 = v98;
            g102 = *(int32_t *)(v94 + 36);
            int32_t v99 = v94 + 40; // 0x8e58
            g93 = v99;
            uint32_t v100 = v95 + 3; // 0x8e5c
            int32_t v101 = v100 + 2; // 0x8e5c
            g3 = (v101 & -v100) < 0;
            g94 = v99;
            g2 = v99 < 0;
            g4 = v99 == 0;
            g1 = v100 > 0xfffffffd;
            // branch -> 0x8e36
            while (v99 < 1) {
                // 0x8e36
                g100 = *(int32_t *)(v80 + 8);
                g101 = v82;
                g102 = *(int32_t *)(v80 + 16);
                ((int32_t (*)())v84)();
                *(int32_t *)(g98 + v82) = g93;
                v93 = g93;
                g101 = *(int32_t *)(v93 + 4);
                v94 = v93 + 16;
                *(int32_t *)v94 = v94;
                *(int32_t *)(v93 + 20) = g101;
                g99 = *(int32_t *)v94;
                v95 = *(int32_t *)(v94 + 4);
                g101 = v95;
                v96 = *(int32_t *)(v94 + 8);
                g103 = v96;
                v97 = v94 + 12;
                *(int32_t *)v97 = v97;
                *(int32_t *)(v94 + 16) = v97;
                *(int32_t *)(v94 + 20) = g101;
                *(int32_t *)(v94 + 24) = *(int32_t *)(v93 + 8);
                *(int32_t *)(v94 + 28) = v96;
                v98 = *(int32_t *)(v94 + 32);
                g101 = v98;
                g102 = *(int32_t *)(v94 + 36);
                v99 = v94 + 40;
                g93 = v99;
                v100 = v95 + 3;
                v101 = v100 + 2;
                g3 = (v101 & -v100) < 0;
                g94 = v99;
                g2 = v99 < 0;
                g4 = v99 == 0;
                g1 = v100 > 0xfffffffd;
                // continue -> 0x8e36
            }
            int32_t v102 = g25;
            int32_t v103 = g98; // 0x8e6e
            int32_t v104 = *(int32_t *)v102; // 0x8e72
            g101 = v104;
            int32_t v105 = v103 + 0x25c0; // R2
            g101 = v102;
            if (*(int32_t *)(v103 + 0x28e4) == 0) {
                // 0x8e82
                *(int16_t *)(v94 + 44) = (int16_t)&g31;
                int32_t v106 = *(int32_t *)(v105 + 8); // 0x8e88
                duss_event_send(v106);
                if (v106 != 0) {
                    // 0x8e94
                    duss_log_gen_head();
                    // branch -> 0x8f00
                    // 0x8f00
                    g99 = (int32_t)"duss_event_send() error: %d\n";
                    duss_log_print();
                    // branch -> 0x8f04
                }
            } else {
                // 0x8ec2
                g97 = &g89;
                *(int16_t *)(v94 + 44) = (int16_t)&g89;
                int32_t v107 = *(int32_t *)(v105 + 8); // 0x8eca
                duss_event_send(v107);
                if (v107 != 0) {
                    // 0x8ed4
                    duss_log_gen_head();
                    // branch -> 0x8f00
                    // 0x8f00
                    g99 = (int32_t)"duss_event_send() error: %d\n";
                    duss_log_print();
                    // branch -> 0x8f04
                }
            }
            g98 = v104;
            int32_t v108 = *(int32_t *)g101; // 0x8f06
            g94 = v108;
            g93 = 0;
            uint32_t v109 = -2 - v108 + v104; // 0x8f0a
            g3 = ((v109 ^ v104) & (v109 ^ -v108)) < 0;
            g2 = v104 - v108 < 0;
            g4 = v104 == v108;
            g1 = v109 <= v104;
            if (v104 != v108) {
                // 0x8f0e
                __stack_chk_fail();
                // branch -> 0x8f12
            }
            // 0x8f12
            g100 = v101;
            g101 = v98;
            ((int32_t (*)())g92)();
            *(int32_t *)0x4479447a = g93;
            *(int32_t *)0x4479447e = g102;
            *(int32_t *)0x44794482 = 0x4479447a;
            int32_t v110 = g93; // 0x8f22
            int32_t v111 = g98 + v110; // 0x8f24
            *(int32_t *)v111 = v110;
            *(int32_t *)(v111 + 4) = v111;
            g103 = 2 * v110;
            g91 = -67;
            int32_t v112 = g101; // 0x8f38
            int32_t v113 = g25;
            int32_t v114 = g98; // 0x8f42
            int32_t v115 = *(int32_t *)v113; // 0x8f46
            g101 = v115;
            v105 = v114 + 0x25c0;
            g101 = v113;
            if (*(int32_t *)(v114 + 0x28e4) == 0) {
                // 0x8f56
                *(int16_t *)(v110 + 4) = (int16_t)&g31;
                int32_t v116 = *(int32_t *)(v105 + 8); // 0x8f5c
                duss_event_send(v116);
                if (v116 != 0) {
                    // 0x8f68
                    duss_log_gen_head();
                    // branch -> 0x8fd4
                    // 0x8fd4
                    g99 = (int32_t)"duss_event_send() error: %d\n";
                    duss_log_print();
                    // branch -> 0x8fd8
                }
            } else {
                // 0x8f96
                g97 = &g89;
                *(int16_t *)(v110 + 4) = (int16_t)&g89;
                int32_t v117 = *(int32_t *)(v105 + 8); // 0x8f9e
                duss_event_send(v117);
                if (v117 != 0) {
                    // 0x8fa8
                    g99 = 128;
                    duss_log_gen_head();
                    // 0x8fd4
                    g99 = (int32_t)"duss_event_send() error: %d\n";
                    duss_log_print();
                    // branch -> 0x8fd8
                }
            }
            g98 = v115;
            int32_t v118 = *(int32_t *)g101; // 0x8fda
            g94 = v118;
            g93 = 0;
            uint32_t v119 = -2 - v118 + v115; // 0x8fde
            g3 = ((v119 ^ v115) & (v119 ^ -v118)) < 0;
            g2 = v115 - v118 < 0;
            g4 = v115 == v118;
            g1 = v119 <= v115;
            if (v115 != v118) {
                // 0x8fe2
                __stack_chk_fail();
                // branch -> 0x8fe6
            }
            int32_t v120 = g100; // 0x8fe8
            g100 = v120;
            g101 = v112;
            ((int32_t (*)())g92)();
            int32_t v121 = g93; // 0x8fee
            *(int32_t *)0x6a7a6818 = v121;
            *(int32_t *)0x6a7a681c = g98;
            *(int32_t *)0x6a7a6820 = g99;
            *(int32_t *)0x6a7a6824 = g101;
            *(int32_t *)0x6a7a6828 = 0x6a7a6818;
            *(int32_t *)0x6a7a682c = g103;
            int32_t v122 = g93; // 0x8ff6
            g91 = 41;
            *(int32_t *)0x6a7a6830 = v122;
            *(int32_t *)0x6a7a6834 = g98;
            *(int32_t *)0x6a7a6838 = g99;
            *(int32_t *)0x6a7a683c = g101;
            *(int32_t *)0x6a7a6840 = v121 + 6;
            g102 = 0x6a7a6844;
            g103 = v122 + 5;
            int32_t v123 = g101; // 0x900c
            int32_t v124 = g25;
            int32_t v125 = g98; // 0x9016
            int32_t v126 = *(int32_t *)v124; // 0x901a
            g101 = v126;
            v105 = v125 + 0x25c0;
            g101 = v124;
            if (*(int32_t *)(v125 + 0x28e4) == 0) {
                // 0x902a
                *(int16_t *)(v122 + 4) = (int16_t)&g31;
                int32_t v127 = *(int32_t *)(v105 + 8); // 0x9030
                duss_event_send(v127);
                if (v127 != 0) {
                    // 0x903c
                    duss_log_gen_head();
                    // branch -> 0x90a8
                    // 0x90a8
                    g99 = (int32_t)"duss_event_send() error: %d\n";
                    duss_log_print();
                    // branch -> 0x90ac
                }
            } else {
                // 0x906a
                g97 = &g89;
                *(int16_t *)(v122 + 4) = (int16_t)&g89;
                int32_t v128 = *(int32_t *)(v105 + 8); // 0x9072
                duss_event_send(v128);
                if (v128 != 0) {
                    // 0x907c
                    duss_log_gen_head();
                    // branch -> 0x90a8
                    // 0x90a8
                    g99 = (int32_t)"duss_event_send() error: %d\n";
                    duss_log_print();
                    // branch -> 0x90ac
                }
            }
            g98 = v126;
            int32_t v129 = *(int32_t *)g101; // 0x90ae
            g94 = v129;
            g93 = 0;
            uint32_t v130 = -2 - v129 + v126; // 0x90b2
            g3 = ((v130 ^ v126) & (v130 ^ -v129)) < 0;
            g2 = v126 - v129 < 0;
            g4 = v126 == v129;
            g1 = v130 <= v126;
            if (v126 != v129) {
                // 0x90b6
                __stack_chk_fail();
                // branch -> 0x90ba
            }
            // 0x90ba
            g100 = v120;
            g101 = v123;
            ((int32_t (*)())g92)();
            int32_t v131 = g102; // 0x90c8
            *(int32_t *)v131 = g93;
            *(int32_t *)(v131 + 4) = g99;
            *(int32_t *)(v131 + 8) = g100;
            g102 = v131 + 12;
            int32_t v132 = g93; // 0x90ca
            *(int32_t *)0x4b2ab5f0 = v132;
            *(int32_t *)0x4b2ab5f4 = g99;
            *(int32_t *)0x4b2ab5f8 = g100;
            *(int32_t *)0x4b2ab5fc = g102;
            *(int32_t *)0x4b2ab600 = g103;
            g101 = 0x4b2ab604;
            int32_t v133 = g25;
            int32_t v134 = g98; // 0x90ea
            int32_t v135 = *(int32_t *)v133; // 0x90ee
            g101 = v135;
            v105 = v134 + 0x25c0;
            g101 = v133;
            if (*(int32_t *)(v134 + 0x28e4) == 0) {
                // 0x90fe
                *(int16_t *)(v132 + 4) = (int16_t)&g31;
                int32_t v136 = *(int32_t *)(v105 + 8); // 0x9104
                duss_event_send(v136);
                if (v136 != 0) {
                    // 0x9110
                    duss_log_gen_head();
                    // branch -> 0x917c
                    // 0x917c
                    g99 = (int32_t)"duss_event_send() error: %d\n";
                    duss_log_print();
                    // branch -> 0x9180
                }
            } else {
                // 0x913e
                g97 = &g89;
                *(int16_t *)(v132 + 4) = (int16_t)&g89;
                int32_t v137 = *(int32_t *)(v105 + 8); // 0x9146
                duss_event_send(v137);
                if (v137 != 0) {
                    // 0x9150
                    duss_log_gen_head();
                    // branch -> 0x917c
                    // 0x917c
                    g99 = (int32_t)"duss_event_send() error: %d\n";
                    duss_log_print();
                    // branch -> 0x9180
                }
            }
            g98 = v135;
            int32_t v138 = *(int32_t *)g101; // 0x9182
            g94 = v138;
            g93 = 0;
            uint32_t v139 = -2 - v138 + v135; // 0x9186
            g3 = ((v139 ^ v135) & (v139 ^ -v138)) < 0;
            g2 = v135 - v138 < 0;
            g4 = v135 == v138;
            g1 = v139 <= v135;
            if (v135 != v138) {
                // 0x918a
                __stack_chk_fail();
                // branch -> 0x918e
            }
            int32_t v140 = g100; // 0x9190
            g100 = v140;
            g101 = 0x4b2ab604;
            ((int32_t (*)())g92)();
            int32_t v141 = g93; // 0x9196
            g5 = v141;
            g6 = g98;
            *(int32_t *)"%K" = g102;
            g101 = 0x116f6;
            g98 = 0;
            g94 = v141;
            g2 = v141 < 0;
            g4 = v141 == 0;
            g1 = false;
            int32_t v142 = (int32_t)v1;
            g93 = v142;
            g103 = a6;
            v11(v142, v141, 0);
            int32_t v143 = g93; // 0x91a6
            g7 = g94;
            g8 = g98;
            int32_t v144 = g101 + 8; // 0x91a8
            g101 = v144;
            int32_t v145 = v144 / 0x4000000; // 0x91ac
            g98 = v145;
            g94 = v143;
            g2 = v143 < 0;
            g4 = v143 == 0;
            g1 = (v144 & 0x2000000) != 0;
            int32_t v146 = (int32_t)v1;
            g93 = v146;
            g102 = a6;
            v11(v146, v143, v145);
            int32_t v147 = g101; // 0x91b4
            int32_t (*v148)() = (int32_t (*)())g92;
            int32_t v149 = g25;
            v18 = *(int32_t *)v149;
            g101 = v149;
            g97 = &g89;
            *(int16_t *)(g94 + 4) = (int16_t)&g89;
            duss_event_send(0x5187f240);
            duss_log_gen_head();
            g99 = (int32_t)"duss_event_send() error: %d\n";
            duss_log_print();
            g98 = v18;
            int32_t v150 = *(int32_t *)g101; // 0x9256
            g94 = v150;
            g93 = 0;
            uint32_t v151 = -2 - v150 + v18; // 0x925a
            g3 = ((v151 ^ v18) & (v151 ^ -v150)) < 0;
            g2 = v18 - v150 < 0;
            g4 = v18 == v150;
            g1 = v151 <= v18;
            if (v18 != v150) {
                // 0x925e
                __stack_chk_fail();
                // branch -> 0x9262
            }
            // 0x9262
            g100 = v140;
            g101 = v147;
            v148();
            *(int32_t *)0x21012056 = g93;
            *(int32_t *)0x2101205a = 0x21012056;
            *(int32_t *)0x2101205e = v147;
            *(int32_t *)0x21012062 = g102;
            int32_t v152 = &a10; // 0x9278_0
            *(int32_t *)0x21012066 = g93;
            *(int32_t *)0x2101206a = 0x21012066;
            *(int32_t *)0x2101206e = a8;
            int32_t v153 = (int32_t)v1; // R1
            int32_t v154 = &a15;
            a10 = 0x21012072;
            *(int32_t *)(v154 - 12) = a14;
            *(int32_t *)(v154 - 8) = a9;
            *(int32_t *)(v154 - 4) = g92;
            g101 = a11;
            int32_t v155 = g25;
            int32_t v156 = *(int32_t *)(a11 + 0x28e4); // 0x929a
            g98 = v156;
            g103 = v155;
            g100 = v153;
            int32_t v157 = *(int32_t *)v155; // bp+12
            v67 = a11 + 0x25c0;
            int32_t v158;
            if (v156 == 0) {
                // 0x92aa
                *(int16_t *)(v153 + 4) = (int16_t)&g31;
                int32_t v159 = *(int32_t *)(v67 + 8); // 0x92b0
                duss_event_send(v159);
                if (v159 != 0) {
                    // 0x92bc
                    duss_log_gen_head();
                    g98 = &v158;
                    duss_log_print();
                    // branch -> 0x934c
                }
            } else {
                // 0x92f0
                *(int16_t *)(v153 + 4) = (int16_t)&g89;
                int32_t v160 = *(int32_t *)(v67 + 8); // 0x92f6
                duss_event_send(v160);
                g102 = v160;
                if (v160 != 0) {
                    // 0x9300
                    duss_log_gen_head();
                    g98 = &v158;
                    duss_log_print();
                    // branch -> 0x9330
                }
                int32_t v161 = g100; // 0x9330
                if (*(char *)v161 == 30) {
                    int32_t v162 = (int32_t)*(char *)(v161 + 16); // 0x9336
                    g97 = v162;
                    g92 = 2 - v162;
                    function_d2cc(g101, (char)(1 - v162 >= -v162));
                    // branch -> 0x934c
                }
            }
            // 0x934c
            g94 = v157;
            int32_t v163 = *(int32_t *)g103; // 0x934e
            g99 = v163;
            g93 = 0;
            uint32_t v164 = -2 - v163 + v157; // 0x9352
            g3 = ((v164 ^ v157) & (v164 ^ -v163)) < 0;
            g2 = v157 - v163 < 0;
            g4 = v157 == v163;
            g1 = v164 <= v157;
            if (v157 != v163) {
                // 0x9356
                __stack_chk_fail();
                // branch -> 0x93f6
            }
            // 0x93f6
            g100 = a10;
            g101 = *(int32_t *)(v152 + 4);
            g102 = *(int32_t *)(v152 + 8);
            g103 = *(int32_t *)(v152 + 12);
            ((int32_t (*)())*(int32_t *)(v152 + 16))();
            *(int32_t *)-0x40ff4210 = g93;
            *(int32_t *)-0x40ff420c = -0x40ff4210;
            *(int32_t *)-0x40ff4208 = g100;
            *(int32_t *)-0x40ff4204 = g103;
            g101 = g102 - 0x40ff4200;
            duss_event_resp_err();
            g94 = v86;
            int32_t v165 = *(int32_t *)g103; // 0x93f8
            g99 = v165;
            uint32_t v166 = -2 - v165 + v86; // 0x93fa
            g3 = ((v166 ^ v86) & (v166 ^ -v165)) < 0;
            g2 = v86 - v165 < 0;
            g4 = v86 == v165;
            g1 = v166 <= v86;
            if (v86 != v165) {
                // 0x93fe
                __stack_chk_fail();
                // branch -> 0x9402
            }
            // 0x9402
            g100 = v18;
            g101 = v82;
            g102 = v140;
            g103 = v147;
            v148();
            *(int32_t *)0x4b5968f6 = g93;
            *(int32_t *)0x4b5968fa = 0x4b5968f6;
            *(int32_t *)0x4b5968fe = g101;
            *(int32_t *)0x4b596902 = v147;
            int32_t v167 = g102; // 0x9414
            int32_t v168 = 0x4b596906;
            if (g93 == 0) {
                int32_t v169 = g101; // 0x941c
                int32_t v170 = g25;
                int32_t v171 = 0; // R7
                uint32_t v172 = *(int32_t *)v170; // 0x942e
                g101 = 67;
                int32_t v173;
                int32_t v174 = &v173; // 0x9444_0
                duss_log_gen_head();
                g101 = v170;
                duss_log_print();
                memset((char *)&v173, 0, 30);
                g97 = v174;
                v173 = 18;
                int32_t str2;
                strncpy((char *)&str2, "DJI P1 HDVT", 16);
                g93 = v171;
                g98 = v174;
                duss_event_resp_data(v171, 0, v174, 30);
                g94 = v172;
                int32_t v175 = *(int32_t *)g101; // 0x94b8
                g99 = v175;
                uint32_t v176 = -2 - v175 + v172; // 0x94ba
                g3 = ((v176 ^ v172) & (v176 ^ -v175)) < 0;
                g2 = v172 - v175 < 0;
                g4 = v172 == v175;
                g1 = v176 <= v172;
                if (v172 != v175) {
                    // 0x94be
                    __stack_chk_fail();
                    // branch -> 0x94c2
                }
                // 0x94c2
                g101 = v169;
                g102 = v167;
                g103 = v167 / 0x8000;
                ((int32_t (*)())g92)();
                v168 = g98;
                // branch -> 0x94d0
            }
            *(int32_t *)v168 = g99;
            *(int32_t *)(v168 + 4) = g101;
            int32_t v177 = g101; // 0x94d4
            g101 = v177 / 0x200000;
            // branch -> 0x94d0
            while (!g3) {
                // 0x94d0
                v168 += 8;
                *(int32_t *)v168 = g99;
                *(int32_t *)(v168 + 4) = g101;
                v177 = g101;
                g101 = v177 / 0x200000;
                // continue -> 0x94d0
            }
            // 0x94de
            g1 = (v177 & 0x100000) != 0;
            return g93;
        }
      lab_0x81b4:
        // 0x81b4
        __stack_chk_fail();
        // branch -> 0x81b8
        goto lab_0x81b8;
    }
    // 0x8142
    v33 = g100;
    v34 = v33;
    if (*(char *)(v33 + 0x28cf) == 0) {
        // 0x814a
        function_7b5c(g104, (int32_t *)g95, (int32_t *)g103, g105, (int32_t)(char *)v26);
        v34 = g100;
        // branch -> 0x8156
    }
    // 0x8156
    function_7f54(g101, g94, g98);
    duss_osal_mutex_unlock(*(int32_t *)(v34 + 0x28dc));
    v30 = g104;
    duss_event_resp_data(v30, g102, (int32_t)&v22, 1);
    v31 = 0;
    if (v30 != 0) {
        // 0x8178
        duss_log_gen_head();
        duss_log_print();
        v31 = v30;
        // branch -> 0x81a8
    }
    // 0x81a8
    g99 = v20;
    g98 = v21;
    v36 = *(int32_t *)v20;
    g94 = v36;
    g93 = v31;
    v28 = -2 - v36 + v21;
    g3 = ((v28 ^ v21) & (v28 ^ -v36)) < 0;
    g2 = v21 - v36 < 0;
    g4 = v21 == v36;
    g1 = v28 <= v21;
    if (v21 == v36) {
      lab_0x81b8_2:
        while (true) {
            // 0x81b8
            g100 = v12;
            g101 = v13;
            g102 = v2;
            g103 = v14;
            g104 = v15;
            g105 = v16;
            g95 = v17;
            g96 = v18;
            v19();
            v32 = g93;
            v29 = unknown_8264(v32);
            g93 = v29;
            v35 = g99;
            g3 = ((v35 - 199 ^ v35) & v35 + 0x7fffff39) < 0;
            g94 = v29;
            g2 = v29 < 0;
            g4 = v29 == 0;
            g1 = v35 > 198;
            if (v29 > 0) {
                goto lab_0x81b4;
            }
            goto lab_0x81e2;
        }
    }
    // 0x81b4
    __stack_chk_fail();
    // branch -> 0x81b8
    goto lab_0x81b8_2;
}

// Address range: 0x94e0 - 0x951f
void function_94e0(void) {
    int32_t v1 = g100; // 0x94e0
    int32_t v2 = g101; // 0x94e0
    int32_t v3 = g93; // 0x94e2
    g100 = v3;
    g101 = v3 + 0x25c0;
    if (g94 != 0) {
        // 0x9502
        g94 = 7;
        g98 = 0;
        function_7524();
        g93 = g100;
        if (*(int32_t *)(g101 + 20) == 0) {
            // 0x9510
            g94 = 4;
            // branch -> 0x9516
        } else {
            // 0x9514
            g94 = 9;
            // branch -> 0x9516
        }
        // 0x9516
        g98 = 1;
        g100 = v1;
        g101 = v2;
        function_7524();
        return;
    }
    int32_t v4 = *(int32_t *)(v3 + 0x25d4); // 0x94ec
    g98 = v4;
    if (v4 == 0) {
        // 0x94f0
        g94 = 4;
        // branch -> 0x94f8
    } else {
        // 0x94f4
        g94 = 9;
        g98 = 0;
        // branch -> 0x94f8
    }
    // 0x94f8
    function_7524();
    g93 = g100;
    g94 = 7;
    // branch -> 0x9516
    // 0x9516
    g98 = 1;
    g100 = v1;
    g101 = v2;
    function_7524();
}

// Address range: 0x9520 - 0x9757
void function_9520(void) {
    int32_t v1 = g100; // bp-20
    int32_t v2 = g101; // 0x9520
    int32_t v3 = g102; // 0x9520
    int32_t v4 = g103; // 0x9520
    int32_t v5 = g25;
    g103 = v5;
    g100 = g61;
    g101 = g94 + 16;
    uint32_t v6 = *(int32_t *)v5; // 0x9538
    duss_log_gen_head();
    duss_log_print();
    duss_log_gen_head();
    duss_log_print();
    duss_log_gen_head();
    g99 = (int32_t)"Network info: %s\n";
    duss_log_print();
    char * substr_pos = strstr((char *)g101, "Wifi Connected"); // 0x95d4
    g102 = (int32_t)substr_pos;
    uint32_t v7; // 0x96cc
    int32_t v8; // 0x96c8
    if (substr_pos == NULL) {
        // 0x95ec
        if (strstr((char *)g101, "Wifi Disconnected") == NULL) {
            // 0x9630
            if (strstr((char *)g101, "SDR Connected") == NULL) {
                // 0x965a
                if (strstr((char *)g101, "SDR Disconnected") == NULL) {
                    // 0x9696
                    duss_log_gen_head();
                    g94 = 3;
                    duss_log_print();
                    // branch -> 0x96c6
                } else {
                    // 0x966e
                    // branch -> 0x9688
                  lab_0x9688:
                    // 0x9688
                    duss_log_gen_head();
                    // branch -> 0x9690
                    // 0x9690
                    g94 = 3;
                    duss_log_print();
                    // branch -> 0x96c6
                }
                // 0x96c6
                g98 = v6;
                v8 = *(int32_t *)g103;
                g99 = v8;
                g93 = 0;
                v7 = -2 - v8 + v6;
                g3 = ((v7 ^ v6) & (v7 ^ -v8)) < 0;
                g2 = v6 - v8 < 0;
                g4 = v6 == v8;
                g1 = v7 <= v6;
                if (v6 != v8) {
                  lab_0x96d0_3:
                    // 0x96d0
                    __stack_chk_fail();
                    // branch -> 0x96d4
                }
              lab_0x96d4_3:
                // 0x96d4
                g100 = v1;
                g101 = v2;
                g102 = v3;
                g103 = v4;
                ((int32_t (*)())g92)();
                *(int32_t *)0x4628ec26 = 0x4628ec26;
                *(int32_t *)0x4628ec2a = g98;
                *(int32_t *)0x4628ec2e = g99;
                *(int32_t *)0x4628ec32 = v1;
                g101 = 2245;
                int32_t v9 = *(int32_t *)v3; // 0x96e8
                *(int32_t *)v9 = 0x4628ec26;
                *(int32_t *)(v9 + 4) = g99;
                *(int32_t *)(v9 + 8) = g101;
                *(int32_t *)(v9 + 12) = v3 + 8;
                *(int32_t *)(v9 + 16) = v4;
                int32_t v10 = g101; // 0x96f4
                g98 = *(int32_t *)(v10 + 4);
                g100 = *(int32_t *)(v10 + 8);
                g101 = *(int32_t *)(v10 + 12);
                int32_t v11 = *(int32_t *)(v10 + 16); // R6
                g101 = v10 + 24;
                *(int32_t *)(v9 + 20) = g99;
                *(int32_t *)(v9 + 24) = g100;
                *(int32_t *)(v9 + 28) = g101;
                *(int32_t *)(v9 + 32) = *(int32_t *)(v10 + 20);
                int32_t v12 = v9 + 36; // 0x96f8
                g103 = g100 / 0x20000;
                if (g3) {
                    goto lab_0x9688;
                }
                // 0x971e
                *(int32_t *)v12 = g98;
                *(int32_t *)(v9 + 40) = g100;
                *(int32_t *)(v9 + 44) = v11;
                int32_t v13 = v9 + 48; // 0x970c
                g99 = v13 / 0x10000;
                int32_t v14 = g101; // 0x9730
                g103 = v14 / 0x2000;
                g94 = v13;
                g1 = (v14 & 0x1000) != 0;
                g102 = v13;
                g101 = v13;
                function_9520();
                int32_t v15 = g93; // 0x9742
                int32_t v16 = v15; // 0x974e
                if (v15 == 0) {
                    int32_t v17 = g101; // 0x9748
                    g94 = v17;
                    duss_event_resp_ok(g102, v17);
                    v16 = v15;
                    // branch -> 0x974e
                }
                // 0x974e
                g93 = v16;
                g101 = v14;
                g102 = v11;
                ((int32_t (*)(int32_t))g92)(v16);
                g2 = g93 < 0;
                g4 = g93 == 0;
                return;
            }
            int32_t v18 = g100; // 0x963c
            g93 = v18;
            g94 = *(int32_t *)(v18 + 0x25d4) == 0 ? 4 : 9;
            function_94e0();
            // branch -> 0x9656
            // 0x9656
            *(int32_t *)(g100 + 0x28e4) = 1;
            // branch -> 0x96c6
          lab_0x96c6:
            // 0x96c6
            g98 = v6;
            v8 = *(int32_t *)g103;
            g99 = v8;
            g93 = 0;
            v7 = -2 - v8 + v6;
            g3 = ((v7 ^ v6) & (v7 ^ -v8)) < 0;
            g2 = v6 - v8 < 0;
            g4 = v6 == v8;
            g1 = v7 <= v6;
            if (v6 == v8) {
                goto lab_0x96d4_3;
            }
            goto lab_0x96d0_3;
        } else {
            int32_t v19 = g102; // 0x95f8
            g94 = v19;
            g98 = v19;
            g93 = g100;
            function_7524();
            duss_log_gen_head();
            // branch -> 0x9690
            // 0x9690
            g94 = 3;
            duss_log_print();
            // branch -> 0x96c6
            goto lab_0x96c6;
        }
    } else {
        // 0x95dc
        g93 = g100;
        g94 = 0;
        function_94e0();
        // branch -> 0x9656
    }
    // 0x9656
    *(int32_t *)(g100 + 0x28e4) = 0;
    // branch -> 0x96c6
    // 0x96c6
    g98 = v6;
    v8 = *(int32_t *)g103;
    g99 = v8;
    g93 = 0;
    v7 = -2 - v8 + v6;
    g3 = ((v7 ^ v6) & (v7 ^ -v8)) < 0;
    g2 = v6 - v8 < 0;
    g4 = v6 == v8;
    g1 = v7 <= v6;
    if (v6 == v8) {
        goto lab_0x96d4_3;
    }
    goto lab_0x96d0_3;
}

// Address range: 0x9758 - 0x9b33
void time_diff(void) {
    int32_t v1 = g94; // 0x975c
    int32_t v2 = g98; // 0x9760
    int32_t v3 = g99; // 0x9768
    g94 = v2;
    int32_t v4 = v2; // 0x97dc
    int32_t v5 = v3; // 0x97b8
    if (v3 < v1) {
        int32_t v6 = v3 + 0xf4240; // 0x9772
        g99 = v6;
        int32_t v7 = v2 - 1; // 0x9776
        g94 = v7;
        v4 = v7;
        v5 = v6;
        // branch -> 0x9778
    }
    // 0x9778
    g97 = v5 - v1;
    int32_t v8 = *(int32_t *)0xbe7eef8; // 0x9788
    int32_t v9 = *(int32_t *)0xbe7eefc; // 0x9788
    g103 = v9;
    g98 = 0xbe7ef00;
    int32_t v10;
    int32_t v11; // 0x97e0
    int32_t v12; // 0x97e0
    int32_t v13; // 0x97a8
    if (v10 == 1) {
        // 0x97d4
        v13 = v8 * (int32_t)&g62;
        g98 = v13;
        g3 = ((v5 - 18 ^ v5) & v5 + 0x7fffffee) < 0;
        g99 = 0x1b08eddf;
        v12 = (v8 - v9) / 0x8000000;
        v11 = 0x1b08eddf;
        // branch -> 0x97de
    } else {
        // 0x97da
        g3 = false;
        g94 = v4 / 256;
        v13 = 0xbe7ef00;
        v12 = v1;
        v11 = v5;
        // branch -> 0x97de
    }
    int32_t v14 = (int32_t)*(int16_t *)(v11 + v12); // 0x97e0
    g93 = v14;
    g101 = v13 / 0x1000;
    g2 = false;
    g4 = v13 < 0x1000;
    g1 = (v13 & 2048) != 0;
    ((int32_t (*)(int32_t))g92)(v14);
    unknown_387f0();
}

// Address range: 0x9b34 - 0x9bff
int32_t function_9b34(char * a1) {
    int32_t result = (int32_t)a1; // 0x9b34_0
    int32_t v1 = g101; // 0x9b34
    g101 = -32;
    int32_t v2 = *(int32_t *)g25; // 0x9b40
    g101 = 0;
    int32_t result2 = 0; // bp-152
    duss_mb_find_route_item(result);
    if (a1 != NULL) {
        // 0x9b56
        duss_log_gen_head();
        // 0x9bc8
        duss_log_print();
        // branch -> 0x9bcc
        // 0x9bcc
        if (v2 != *(int32_t *)g25) {
            // 0x9bd6
            __stack_chk_fail();
            // branch -> 0x9bda
        }
        // 0x9bda
        g101 = v1;
        return result;
    }
    // 0x9b84
    uint32_t v3;
    duss_mb_adjust_route_item(result2, v3 % 256, (int32_t)&g90);
    if (result2 != 0) {
        // 0x9b9c
        duss_log_gen_head();
        // branch -> 0x9bc8
        // 0x9bc8
        duss_log_print();
        // branch -> 0x9bcc
    }
    // 0x9bcc
    if (v2 != *(int32_t *)g25) {
        // 0x9bd6
        __stack_chk_fail();
        // branch -> 0x9bda
    }
    // 0x9bda
    g101 = v1;
    return result2;
}

// Address range: 0x9c00 - 0x9d11
int32_t function_9c00(int32_t a1, int32_t * a2) {
    int32_t v1 = g100; // 0x9c00
    int32_t v2 = g101; // 0x9c00
    int32_t v3 = g102; // 0x9c00
    int32_t v4 = g103; // 0x9c00
    int32_t v5 = *(int32_t *)g25; // 0x9c0c
    int32_t v6 = 0;
    g101 = (int32_t)a2;
    g103 = g25;
    if (a2 == NULL) {
        // 0x9cfc
        // branch -> 0x9d00
        // 0x9d00
        if (v5 != *(int32_t *)g103) {
            // 0x9d08
            __stack_chk_fail();
            // branch -> 0x9d0c
        }
        // 0x9d0c
        g100 = v1;
        g101 = v2;
        g102 = v3;
        g103 = v4;
        return -1001;
    }
    int32_t v7 = *(int32_t *)(a1 + 0x2910); // 0x9c20
    if (v7 != -0x1ddfffe9) {
        // 0x9c28
        if (v7 != -0x1ddfffdb) {
            // 0x9c2e
            if (v7 != -0x1ddfffe8) {
                // 0x9c34
                if (v7 != -0x1ddfffda) {
                    // 0x9cfc
                    // branch -> 0x9d00
                    // 0x9d00
                    if (v5 != *(int32_t *)g103) {
                        // 0x9d08
                        __stack_chk_fail();
                        // branch -> 0x9d0c
                    }
                    // 0x9d0c
                    g100 = v1;
                    g101 = v2;
                    g102 = v3;
                    g103 = v4;
                    return -1001;
                }
            }
        }
    }
    int32_t v8 = a1 + 0x267c; // 0x9c3e
    g102 = v8;
    int32_t v9 = function_ca60(v8, 199); // 0x9c44
    g100 = v9;
    if (v9 != 0) {
        // 0x9c4c
        duss_log_gen_head();
        // branch -> 0x9cb6
        // 0x9cb6
        duss_log_print();
        // branch -> 0x9cfc
        // 0x9cfc
        // branch -> 0x9d00
        // 0x9d00
        if (v5 != *(int32_t *)g103) {
            // 0x9d08
            __stack_chk_fail();
            // branch -> 0x9d0c
        }
        // 0x9d0c
        g100 = v1;
        g101 = v2;
        g102 = v3;
        g103 = v4;
        return -1001;
    }
    // 0x9c7c
    int32_t v10; // R0
    int32_t v11; // 0x9d0e_23
    if (function_cae4(g102, 199, (int32_t)&v6) == 0) {
        // 0x9cbc
        duss_log_gen_head();
        duss_log_print();
        *(int32_t *)g101 = 1;
        v10 = 0;
        v11 = 0;
        // branch -> 0x9d00
    } else {
        // 0x9c8a
        duss_log_gen_head();
        // branch -> 0x9cb6
        // 0x9cb6
        duss_log_print();
        // branch -> 0x9cfc
        // 0x9cfc
        v10 = -1001;
        v11 = -1001;
        // branch -> 0x9d00
    }
    // 0x9d00
    int32_t result; // 0x9d0e_2
    if (v5 != *(int32_t *)g103) {
        // 0x9d08
        __stack_chk_fail();
        result = v10;
        // branch -> 0x9d0c
    } else {
        result = v11;
    }
    // 0x9d0c
    g100 = v1;
    g101 = v2;
    g102 = v3;
    g103 = v4;
    return result;
}

// Address range: 0x9d12 - 0x9d15
int32_t function_9d12(int32_t a1) {
    // 0x9d12
    return function_a154();
}

// Address range: 0x9d16 - 0x9ecf
int32_t function_9d16(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    uint32_t v1 = g102; // 0x9d20
    g100 = v1 / 0x8000000;
    int32_t v2;
    int32_t v3 = v2; // 0x9e904
    int32_t v4;
    int32_t result = v4; // 0x9e823
    if (v1 < 0x8000000) {
        // 0x9d2a
        if (a1 == 0) {
            int32_t v5 = g101; // 0x9d40
            g101 = g25;
            g100 = 0;
            v3 = v5;
            result = *(int32_t *)g25;
            // branch -> 0x9d5e
        } else {
            v3 = v2;
            result = v4;
        }
    }
    // 0x9d5e
    duss_log_gen_head();
    g103 = g101;
    duss_log_print();
    g102 = &g44;
    int32_t v6 = g44;
    g101 = v6;
    int32_t v7 = 0;
    int32_t v8;
    int32_t v9; // 0x9e40
    int32_t v10; // 0x9dfc
    if (v6 == 0) {
        // 0x9d8e
        if (function_10c44(86, 3, 0, 0x16f17) == 0) {
            // 0x9dd2
            v7 = 0x1000000 * (v7 & 254) / 0x1000000;
            *(int32_t *)g102 = 1;
            // branch -> 0x9de2
        } else {
            // 0x9d96
            duss_log_gen_head();
            duss_log_print();
            int32_t v11 = v7 % 256; // 0x9dc4
            g101 = v11;
            v7 = 0x1000000 * (v11 | 1) / 0x1000000;
            // branch -> 0x9de2
        }
        // 0x9de2
        if (function_9c00(g100, &v8) == 0) {
            // 0x9dec
            if (*(int32_t *)(g100 + 0x28e4) != v8) {
                // 0x9df8
                v10 = v7 % 256 | 4;
                g101 = v10;
                v7 = 0x1000000 * v10 / 0x1000000;
                // branch -> 0x9e04
            }
        }
        // 0x9e04
        duss_log_gen_head();
        g101 = *(int32_t *)(g100 + 0x28e4);
        duss_log_print();
        g101 = 86;
        v9 = g100;
        g100 = v9 + 0x25c0;
        g99 = 55;
        if (function_d8dc(*(int32_t *)(v9 + 0x25c8), (char *)&v7, 4) != 0) {
            // 0x9e54
            duss_log_gen_head();
            if (g101 != 0) {
                // 0x9e74
                duss_log_print();
                // branch -> 0x9e82
            }
        }
        // 0x9e82
        if (result != *(int32_t *)g103) {
            // 0x9e8a
            __stack_chk_fail();
            // branch -> 0x9e8e
        }
        // 0x9e8e
        g101 = v3;
        return result;
    }
    // 0x9de2
    if (function_9c00(g100, &v8) == 0) {
        // 0x9dec
        if (*(int32_t *)(g100 + 0x28e4) != v8) {
            // 0x9df8
            v10 = v7 % 256 | 4;
            g101 = v10;
            v7 = 0x1000000 * v10 / 0x1000000;
            // branch -> 0x9e04
        }
        // 0x9e04
        duss_log_gen_head();
        g101 = *(int32_t *)(g100 + 0x28e4);
        duss_log_print();
        g101 = 86;
        v9 = g100;
        g100 = v9 + 0x25c0;
        g99 = 55;
        if (function_d8dc(*(int32_t *)(v9 + 0x25c8), (char *)&v7, 4) != 0) {
            // 0x9e54
            duss_log_gen_head();
            if (g101 != 0) {
                // 0x9e74
                duss_log_print();
                // branch -> 0x9e82
            }
        }
        // 0x9e82
        if (result != *(int32_t *)g103) {
            // 0x9e8a
            __stack_chk_fail();
            // branch -> 0x9e8e
        }
        // 0x9e8e
        g101 = v3;
        return result;
    }
    // 0x9e04
    duss_log_gen_head();
    g101 = *(int32_t *)(g100 + 0x28e4);
    duss_log_print();
    g101 = 86;
    v9 = g100;
    g100 = v9 + 0x25c0;
    g99 = 55;
    if (function_d8dc(*(int32_t *)(v9 + 0x25c8), (char *)&v7, 4) == 0) {
        // 0x9e82
        if (result != *(int32_t *)g103) {
            // 0x9e8a
            __stack_chk_fail();
            // branch -> 0x9e8e
        }
        // 0x9e8e
        g101 = v3;
        return result;
    }
    // 0x9e54
    duss_log_gen_head();
    if (g101 != 0) {
        // 0x9e74
        duss_log_print();
        // branch -> 0x9e82
    }
    // 0x9e82
    if (result != *(int32_t *)g103) {
        // 0x9e8a
        __stack_chk_fail();
        // branch -> 0x9e8e
    }
    // 0x9e8e
    g101 = v3;
    return result;
}

// Address range: 0x9ed0 - 0x9f6f
int32_t function_9ed0(int32_t a1) {
    // 0x9ed0
    int32_t v1;
    char * v2 = (char *)v1; // bp-172
    int32_t v3 = g101; // 0x9ed0
    g101 = g25;
    int32_t v4 = *(int32_t *)g25; // 0x9ee2
    v2 = "hdvt self test timer";
    duss_osal_timer_create((int32_t)&v2, a1 + 0x2914);
    duss_log_gen_head();
    duss_log_print();
    g93 = -1001;
    g94 = v4;
    int32_t v5 = *(int32_t *)g101; // 0x9f40
    g99 = v5;
    int32_t result; // 0x9f4c_2
    if (v4 != v5) {
        // 0x9f46
        __stack_chk_fail();
        result = g93;
        // branch -> 0x9f4a
    } else {
        result = -1001;
    }
    // 0x9f4a
    g101 = v3;
    return result;
}

// Address range: 0x9f70 - 0xa153
char * function_9f70(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    g101 = a1;
    int32_t v1;
    int32_t v2 = &v1; // 0x9f8e_0
    memset((char *)&v1, 0, (int32_t)&g33);
    int32_t v3;
    memset((char *)&v3, 0, 88);
    int32_t v4;
    memset((char *)&v4, 0, 88);
    duss_log_gen_head();
    g104 = g25;
    // 0x9fd0
    duss_log_print();
    // branch -> 0x9fe0
    int32_t v5 = g101; // 0x9fe0
    int32_t v6 = *(int32_t *)(v5 + 0x25e0); // 0x9fe4
    int32_t v7; // 0xa0e4
    int32_t v8;
    int32_t v9; // 0xa092
    if (v6 == 0) {
        int32_t v10 = *(int32_t *)(v5 + 0x25d4); // 0x9fe8
        if (v10 == 0) {
            // 0x9fec
            duss_sketch_get_config_file_name();
            // branch -> 0xa08a
            // 0xa08a
            duss_mb_create_route_table((int32_t)&v8);
            v9 = 86;
            g100 = v9;
            if (v9 != 0) {
                // 0xa096
                g99 = 128;
                duss_log_gen_head();
                return (char *)function_a3e4(86);
            }
            // 0xa0cc
            g102 = g101 + 0x28c0;
            v7 = function_9b34((char *)&v1);
            g102 = v2;
            if (v7 != 0) {
                // 0xa0ec
                duss_log_gen_head();
                function_a288();
                return (char *)-1;
            }
            // 0xa11e
            function_9b34((char *)&v1);
            g101 = &g87;
            duss_log_gen_head();
            return (char *)86;
        }
        // 0xa020
        if (v10 == 1) {
            // 0xa024
            duss_sketch_get_config_file_name();
            // branch -> 0xa08a
        } else {
            // 0xa04c
            duss_log_gen_head();
            // 0xa06c
            duss_log_print();
            // branch -> 0xa07a
            // 0xa07a
            duss_sketch_get_config_file_name();
            // branch -> 0xa08a
        }
        // 0xa08a
        duss_mb_create_route_table((int32_t)&v8);
        v9 = 86;
        g100 = v9;
        if (v9 != 0) {
            // 0xa096
            g99 = 128;
            duss_log_gen_head();
            return (char *)function_a3e4(86);
        }
        // 0xa0cc
        g102 = g101 + 0x28c0;
        v7 = function_9b34((char *)&v1);
        g102 = v2;
        if (v7 != 0) {
            // 0xa0ec
            duss_log_gen_head();
            function_a288();
            return (char *)-1;
        }
        // 0xa11e
        function_9b34((char *)&v1);
        g101 = &g87;
        duss_log_gen_head();
        return (char *)86;
    }
    // 0xa002
    if (v6 == 1) {
        int32_t v11 = *(int32_t *)(v5 + 0x25d4); // 0xa006
        int32_t v12 = v11; // R0
        if (v11 == 0) {
            // 0xa00a
            duss_sketch_get_config_file_name();
            // branch -> 0xa08a
            // 0xa08a
            duss_mb_create_route_table((int32_t)&v8);
            v9 = v12;
            g100 = v9;
            if (v9 != 0) {
                // 0xa096
                g99 = 128;
                duss_log_gen_head();
                return (char *)function_a3e4(86);
            }
            // 0xa0cc
            g102 = g101 + 0x28c0;
            v7 = function_9b34((char *)&v1);
            g102 = v2;
            if (v7 != 0) {
                // 0xa0ec
                duss_log_gen_head();
                function_a288();
                return (char *)-1;
            }
            // 0xa11e
            function_9b34((char *)&v1);
            g101 = &g87;
            duss_log_gen_head();
            return (char *)86;
        }
        // 0xa036
        if (v11 == 1) {
            // 0xa03a
            duss_sketch_get_config_file_name();
            // branch -> 0xa08a
        } else {
            // 0xa04c
            v12 = 86;
            duss_log_gen_head();
            if (v12 != 0) {
                // 0xa06c
                v12 = 86;
                duss_log_print();
                // branch -> 0xa07a
            }
            // 0xa07a
            duss_sketch_get_config_file_name();
            // branch -> 0xa08a
        }
        // 0xa08a
        duss_mb_create_route_table((int32_t)&v8);
        v9 = v12;
        g100 = v9;
        if (v9 != 0) {
            // 0xa096
            g99 = 128;
            duss_log_gen_head();
            return (char *)function_a3e4(86);
        }
        // 0xa0cc
        g102 = g101 + 0x28c0;
        v7 = function_9b34((char *)&v1);
        g102 = v2;
        if (v7 != 0) {
            // 0xa0ec
            duss_log_gen_head();
            function_a288();
            return (char *)-1;
        }
        // 0xa11e
        function_9b34((char *)&v1);
        g101 = &g87;
        duss_log_gen_head();
        return (char *)86;
    }
    // 0xa04c
    duss_log_gen_head();
    // 0xa06c
    duss_log_print();
    // branch -> 0xa07a
    // 0xa07a
    duss_sketch_get_config_file_name();
    // branch -> 0xa08a
    // 0xa08a
    duss_mb_create_route_table((int32_t)&v8);
    v9 = 86;
    g100 = v9;
    if (v9 != 0) {
        // 0xa096
        g99 = 128;
        duss_log_gen_head();
        return (char *)function_a3e4(86);
    }
    // 0xa0cc
    g102 = g101 + 0x28c0;
    v7 = function_9b34((char *)&v1);
    g102 = v2;
    if (v7 != 0) {
        // 0xa0ec
        duss_log_gen_head();
        function_a288();
        return (char *)-1;
    }
    // 0xa11e
    function_9b34((char *)&v1);
    g101 = &g87;
    duss_log_gen_head();
    return (char *)86;
}

// Address range: 0xa154 - 0xa283
int32_t function_a154(void) {
    // 0xa154
    function_a288();
    g93 = -1;
    return g98;
}

// Address range: 0xa284 - 0xa287
void function_a284(void) {
    // 0xa284
    duss_log_print();
}

// Address range: 0xa288 - 0xa28f
int32_t function_a288(void) {
    // 0xa288
    g93 = -1;
    exit(-1);
    // UNREACHABLE
}

// Address range: 0xa290 - 0xa3e3
void function_a290(int32_t a1, int32_t a2) {
    int32_t v1;
    duss_mb_destroy_route_table((int32_t)&v1, a2);
    duss_log_gen_head();
    duss_log_print();
    int32_t v2 = g101; // 0xa2c4
    int32_t v3 = v2 + 0x2898; // R9
    g101 = 0;
    *(char *)(v2 + 0x28b8) = 0;
    memset((char *)v3, g101, 16);
    int32_t file = (int32_t)"/amt/product/sn.txt"; // R7
    memset((char *)(0x28a8 + v2), g101, 16);
    int32_t v4 = access((char *)file, g101); // 0xa2f0
    if (v4 != 0) {
        // 0xa2f8
        duss_log_gen_head();
        g99 = (int32_t)"product sn is not found\n";
        duss_log_print();
        function_a3e4(86);
        return;
    }
    // 0xa32a
    file = (int32_t)fopen((char *)file, "r");
    int32_t data;
    int32_t v5 = &data; // 0xa33a_0
    memset((char *)&data, v4, 128);
    int32_t items_read = fread((char *)&data, 1, 128, (struct _IO_FILE *)file); // 0xa350
    g101 = items_read;
    if (items_read == 0) {
        // 0xa358
        duss_log_gen_head();
        duss_log_print();
        // branch -> 0xa3de
    } else {
        // 0xa38a
        duss_log_gen_head();
        duss_log_print();
        g101 = v5;
        int32_t v6 = v5 + 8; // R6
        *(int32_t *)v3 = *(int32_t *)v5;
        *(int32_t *)(v3 + 4) = *(int32_t *)(v5 + 4);
        int32_t v7 = v3 + 8; // 0xa3ce
        int32_t v8 = v6; // 0xa3d0
        g101 = v8;
        // branch -> 0xa3c6
        int32_t v9;
        while (v8 != (int32_t)&v9) {
            // 0xa3c6
            v3 = v7;
            v5 = v8;
            v6 = v5 + 8;
            *(int32_t *)v3 = *(int32_t *)v5;
            *(int32_t *)(v3 + 4) = *(int32_t *)(v5 + 4);
            v7 = v3 + 8;
            v8 = v6;
            g101 = v8;
            // continue -> 0xa3c6
        }
        // 0xa3d6
        *(int32_t *)v7 = *(int32_t *)v8;
        *(int16_t *)(v7 + 4) = *(int16_t *)(v6 + 4);
        // branch -> 0xa3de
    }
    // 0xa3de
    fclose((struct _IO_FILE *)file);
}

// Address range: 0xa3e4 - 0xa3fd
int32_t function_a3e4(int32_t a1) {
    // 0xa3e4
    uint32_t v1;
    g94 = v1;
    int32_t v2 = *(int32_t *)g104; // 0xa3e6
    g98 = v2;
    int32_t result = g100; // 0xa3ea
    g93 = result;
    uint32_t v3 = -2 - v2 + v1; // 0xa3ec
    g3 = ((v3 ^ v1) & (v3 ^ -v2)) < 0;
    g2 = v1 - v2 < 0;
    g4 = v1 == v2;
    g1 = v3 <= v1;
    if (v1 != v2) {
        // 0xa3f0
        __stack_chk_fail();
        // branch -> 0xa3f4
    }
    // 0xa3f4
    int32_t v4;
    g100 = v4;
    int32_t v5;
    g101 = v5;
    int32_t v6;
    g102 = v6;
    int32_t v7;
    g103 = v7;
    int32_t v8;
    g104 = v8;
    int32_t v9;
    g105 = v9;
    int32_t v10;
    g95 = v10;
    int32_t v11;
    ((int32_t (*)())v11)();
    return result;
}

// Address range: 0xa3fe - 0xa4f3
int32_t function_a3fe(int32_t a1, int32_t a2, int32_t a3) {
    // 0xa3fe
    g101 = *(int32_t *)(g103 + 12);
    g101 = *(int32_t *)(g103 + 64);
    g101 = *(int32_t *)(g103 + 120);
    g101 = *(int32_t *)(g103 + 152);
    g101 = *(int32_t *)(g103 + 208);
    int32_t v1 = *(int32_t *)(g103 + 220); // 0xa44c
    g101 = *(int32_t *)(g103 + 224);
    int32_t v2 = g103 + 232; // R7
    *(int32_t *)v1 = *(int32_t *)(g103 + 204);
    *(int32_t *)(v1 + 4) = *(int32_t *)(g103 + 192);
    *(int32_t *)(v1 + 8) = v1;
    *(int32_t *)(v1 + 12) = *(int32_t *)(g103 + 228);
    *(int32_t *)(v1 + 16) = v2;
    int32_t v3 = *(int32_t *)(v2 + 4); // 0xa45c
    g101 = *(int32_t *)(v2 + 8);
    int32_t v4 = *(int32_t *)(v2 + 16); // R2
    *(int32_t *)(v3 + 108) = v3;
    g19 = v4;
    int32_t v5 = (int32_t)*(char *)(v4 + 0x46388000); // 0xa48c
    *(int32_t *)(v4 + 104) = v5;
    g101 = 0x100000 * v5;
    g101 = *(int32_t *)(v5 + 4);
    g101 = *(int32_t *)(v5 + 28);
    int32_t v6 = *(int32_t *)(v5 + 36); // 0xa4c8
    g101 = v6;
    g101 = *(int32_t *)(v6 + 8);
    int32_t v7 = v6 + 20; // 0xa4d4
    g101 = v7;
    g102 = *(int32_t *)(v6 + 16) % 256;
    int32_t result = *(int32_t *)v7; // 0xa4e4
    g98 = *(int32_t *)(v6 + 28);
    g99 = *(int32_t *)(v6 + 32);
    g101 = *(int32_t *)(v6 + 36);
    int32_t v8 = *(int32_t *)(v6 + 40); // 0xa4e4
    int32_t v9 = 0x80000000 * v8; // 0xa4ec
    g101 = v9;
    g94 = result;
    g101 = v9 | 8;
    g93 = result;
    g1 = (v8 & 2) != 0;
    return result;
}

// Address range: 0xa4f4 - 0xa5b7
int32_t function_a4f4(int32_t a1) {
    // 0xa4f4
    int32_t v1;
    char * v2 = (char *)v1; // bp-152
    int32_t v3 = g101; // 0xa4f4
    g101 = 0x10726;
    g101 = (int32_t)"hu_init_wireless_country_code";
    v2 = "country_code_mutex";
    duss_log_gen_head();
    g101 = g25;
    // 0xa52e
    duss_log_print();
    // branch -> 0xa53c
    // 0xa53c
    duss_osal_mutex_create((int32_t)&v2, a1 + 0x28dc);
    duss_log_gen_head();
    g94 = 1;
    duss_log_print();
    g93 = -1001;
    int32_t v4 = *(int32_t *)g101; // 0xa584
    g99 = v4;
    int32_t result; // 0xa590_2
    if (*(int32_t *)g25 != v4) {
        // 0xa58a
        __stack_chk_fail();
        result = g93;
        // branch -> 0xa58e
    } else {
        result = -1001;
    }
    // 0xa58e
    g101 = v3;
    return result;
}

// Address range: 0xa5b8 - 0xa76f
int32_t function_a5b8(int32_t a1) {
    int32_t v1 = g101; // 0xa5b8
    int32_t v2 = g25;
    g101 = v2;
    int32_t v3 = *(int32_t *)v2; // 0xa5ca
    int32_t v4;
    int32_t v5 = &v4; // 0xa5e2_0
    duss_log_gen_head();
    g105 = g101;
    duss_log_print();
    g101 = a1 + 0x28c0;
    duss_osal_mutex_lock(*(int32_t *)(a1 + 0x28dc), -1);
    int32_t v6 = g101; // 0xa60a
    int32_t v7 = *(int32_t *)(v6 + 12); // 0xa60a
    int32_t v8; // 0xa732_23
    if ((v7 & 0xff00ff) == 0) {
        int32_t v9 = v6 + 24; // 0xa658
        g101 = v9;
        if (function_f548(86, v9, v5, v7) == 0) {
            // 0xa666
            duss_log_gen_head();
            char * v10 = (char *)g101; // bp-196
            duss_log_print();
            int32_t v11 = g100; // 0xa69e
            int32_t v12 = 0x1000000 * function_f978(86, (char *)g101, v5, (int32_t)"load country_code %s\n", (int32_t)v10) / 0x1000000;
            if (*(char *)(v11 + 0x28cf) == 0) {
                // 0xa6aa
                g102 = 1;
                g103 = 86;
                v10 = (char *)1;
                g99 = &v12;
                int32_t v13 = function_d6e4(*(int32_t *)(v11 + (int32_t)&g34 + 60), 1); // 0xa6c0
                g104 = v13;
                if (v13 != 0) {
                    // 0xa6c8
                    v10 = "dji/duml/service/hdvt/hdvt_uav/src/hu_event.c";
                    g98 = v5;
                    duss_log_gen_head();
                    if (g103 != 0) {
                        // 0xa6e8
                        v10 = (char *)g104;
                        g98 = v5;
                        duss_log_print();
                        // branch -> 0xa6fa
                    }
                }
            }
            int32_t v14 = g100; // 0xa6fa
            unsigned char v15 = *(char *)(v14 + 0x28cf); // 0xa6fe
            int32_t v16 = v14 + 0x28c0; // 0xa712
            if (v15 == 0) {
                int32_t v17 = *(int32_t *)(v14 + 0x25c8); // 0xa706
                int32_t * v18 = (int32_t *)g101;
                function_7b5c(v17, v18, v18, (int32_t)v15, (int32_t)v10);
                v16 = g94;
                // branch -> 0xa710
            }
            // 0xa710
            function_7f54(g101, v16, g98);
            // branch -> 0xa716
        }
        // 0xa716
        duss_osal_mutex_unlock(*(int32_t *)(g100 + 0x28dc));
        g93 = 0;
        v8 = 0;
        // branch -> 0xa722
    } else {
        // 0xa612
        duss_log_gen_head();
        g99 = (int32_t)"already got country code, got_country_code=%u,gps_valid=%u return directly\n";
        duss_log_print();
        duss_osal_mutex_unlock(*(int32_t *)(a1 + 0x28dc));
        g93 = -1001;
        v8 = -1001;
        // branch -> 0xa722
    }
    // 0xa722
    g94 = v3;
    int32_t result; // 0xa732_2
    if (v3 != *(int32_t *)g105) {
        // 0xa72c
        __stack_chk_fail();
        result = g93;
        // branch -> 0xa730
    } else {
        result = v8;
    }
    // 0xa730
    g101 = v1;
    return result;
}

// Address range: 0xa770 - 0xa7ab
int32_t function_a770(char * a1, int16_t a2, char * a3, int32_t * a4) {
    int32_t v1 = a2;
    int32_t result = (int32_t)a3;
    int32_t v2 = g101; // 0xa770
    *a3 = 85;
    int32_t v3 = v1 + 6; // R6
    *(int16_t *)(result + 1) = a2;
    g101 = v1;
    duss_util_crc8_append(result, 4, 119, 85, g100, v2, g102, g103, g104, g92);
    memcpy((char *)(result + 4), a1, v1);
    duss_util_crc16_append(result, v3, 0x3692);
    *a4 = v3;
    g101 = v2;
    return result;
}

// Address range: 0xa7ac - 0xa9c3
int32_t function_a7ac(int32_t a1, char * a2, int32_t a3) {
    int32_t v1 = (int32_t)a2;
    int32_t v2 = g101; // 0xa7ac
    g101 = v1;
    int32_t v3 = *(int32_t *)g25; // 0xa7be
    if (a3 <= 259) {
        char v4 = *a2; // 0xa802
        int32_t v5; // R0
        int32_t v6; // 0xa96e_26
        if (v4 == 17) {
            // 0xa808
            int32_t v7;
            lib_recorder_get_status((int32_t)&v7);
            int32_t v8;
            g101 = &v8;
            duss_log_gen_head();
            // branch -> 0xa914
            // 0xa914
            duss_log_print();
            // branch -> 0xa918
            // 0xa918
            v5 = -1001;
            v6 = -1001;
            // branch -> 0xa95c
        } else {
            // 0xa864
            if (v4 == 18) {
                int32_t v9 = *(int32_t *)(v1 + 2); // 0xa86c
                duss_log_gen_head();
                duss_log_print();
                lib_recorder_cmd_set(v9);
                if (v9 != 0) {
                    // 0xa8a8
                    duss_log_gen_head();
                    duss_log_print();
                    // branch -> 0xa918
                    // 0xa918
                    // branch -> 0xa95c
                    // 0xa95c
                    if (v3 != *(int32_t *)g25) {
                        // 0xa966
                        __stack_chk_fail();
                        // branch -> 0xa96a
                    }
                    // 0xa96a
                    g101 = v2;
                    return -1001;
                }
            } else {
                // 0xa8d6
                if (v4 != 19) {
                    // 0xa8da
                    if (v4 == 20) {
                        uint32_t v10 = v1 + 2; // 0xa8de
                        lib_recorder_data_ring(v10);
                        if (v10 % 256 != 0) {
                            // 0xa8ea
                            duss_log_gen_head();
                            // branch -> 0xa914
                            // 0xa914
                            duss_log_print();
                            // branch -> 0xa918
                            // 0xa918
                            // branch -> 0xa95c
                            // 0xa95c
                            if (v3 != *(int32_t *)g25) {
                                // 0xa966
                                __stack_chk_fail();
                                // branch -> 0xa96a
                            }
                            // 0xa96a
                            g101 = v2;
                            return -1001;
                        }
                    } else {
                        // 0xa91e
                        if (v4 == 21) {
                            // 0xa922
                            *(char *)(v1 + a3 - 1) = 0;
                            duss_log_gen_head();
                            g101 += 2;
                            duss_log_print();
                            // branch -> 0xa95a
                        }
                    }
                    // 0xa95a
                    // branch -> 0xa95c
                    // 0xa95c
                    if (v3 != *(int32_t *)g25) {
                        // 0xa966
                        __stack_chk_fail();
                        // branch -> 0xa96a
                    }
                    // 0xa96a
                    g101 = v2;
                    return 0;
                }
            }
            // 0xa95a
            v5 = 0;
            v6 = 0;
            // branch -> 0xa95c
        }
        // 0xa95c
        int32_t result; // 0xa96e_2
        if (v3 != *(int32_t *)g25) {
            // 0xa966
            __stack_chk_fail();
            result = v5;
            // branch -> 0xa96a
        } else {
            result = v6;
        }
        // 0xa96a
        g101 = v2;
        return result;
    }
    // 0xa7d2
    duss_log_gen_head();
    // branch -> 0xa918
    // 0xa918
    // branch -> 0xa95c
    // 0xa95c
    if (v3 != *(int32_t *)g25) {
        // 0xa966
        __stack_chk_fail();
        // branch -> 0xa96a
    }
    // 0xa96a
    g101 = v2;
    return -1001;
}

// Address range: 0xa9c4 - 0xad55
int32_t function_a9c4(int32_t a1, char * a2) {
    int32_t v1 = g101; // 0xa9c4
    int32_t path2;
    int32_t v2 = &path2; // 0xa9de_0
    int32_t path = (int32_t)a2; // R6
    path2 = *(int32_t *)g25;
    duss_sketch_get_config_file_name();
    int32_t buf;
    int32_t v3 = &buf; // 0xa9e8_0
    g101 = v2;
    int32_t result; // R4
    int32_t v4;
    int32_t v5;
    int32_t fd;
    if (v2 == 0) {
        // 0xa9ee
        g101 = (int32_t)"hu_hdvt_get_pairing_gpio";
        duss_log_gen_head();
        duss_log_print();
        fd = open((char *)path, O_RDONLY);
        g101 = fd;
        if (fd <= 0xffffffff) {
            // 0xaa6a
            duss_log_gen_head();
            duss_log_print();
            // branch -> 0xabd8
            // 0xabd8
            if (path2 != *(int32_t *)g25) {
                // 0xabe8
                __stack_chk_fail();
                // branch -> 0xabec
            }
            // 0xabec
            g101 = v1;
            return -1001;
        }
        // 0xaaa0
        if (read(fd, (char *)&buf, (int32_t)" %u\n") <= 0) {
            // 0xaab0
            duss_log_gen_head();
            duss_log_print();
            // branch -> 0xab90
            // 0xab90
            // branch -> 0xabd2
            // 0xabd2
            close(g101);
            // branch -> 0xabd8
            // 0xabd8
            if (path2 != *(int32_t *)g25) {
                // 0xabe8
                __stack_chk_fail();
                // branch -> 0xabec
            }
            // 0xabec
            g101 = v1;
            return -1001;
        }
        // 0xaae0
        cJSON_Parse(v3);
        cJSON_GetObjectItem((int32_t)"platform");
        cJSON_GetObjectItem((int32_t)"pairing_gpio");
        if (v5 == 3) {
            // 0xab96
            *(int32_t *)(a1 + 0x2884) = v4;
            duss_log_gen_head();
            duss_log_print();
            result = 0;
            // branch -> 0xabd2
        } else {
            // 0xab62
            duss_log_gen_head();
            duss_log_print();
            // branch -> 0xab90
            // 0xab90
            result = -1001;
            // branch -> 0xabd2
        }
        // 0xabd2
        close(g101);
        // branch -> 0xabd8
        // 0xabd8
        if (path2 != *(int32_t *)g25) {
            // 0xabe8
            __stack_chk_fail();
            // branch -> 0xabec
        }
        // 0xabec
        g101 = v1;
        return result;
    }
    // 0xaa10
    duss_log_gen_head();
    duss_log_print();
    int32_t fd2 = open((char *)&path2, O_RDONLY);
    g101 = fd2;
    if (fd2 > 0xffffffff) {
        // 0xaaa0
        if (read(fd2, (char *)&buf, (int32_t)" %u\n") <= 0) {
            // 0xaab0
            duss_log_gen_head();
            duss_log_print();
            // branch -> 0xab90
            // 0xab90
            // branch -> 0xabd2
            // 0xabd2
            close(g101);
            // branch -> 0xabd8
            // 0xabd8
            if (path2 != *(int32_t *)g25) {
                // 0xabe8
                __stack_chk_fail();
                // branch -> 0xabec
            }
            // 0xabec
            g101 = v1;
            return -1001;
        }
        // 0xaae0
        cJSON_Parse(v3);
        cJSON_GetObjectItem((int32_t)"platform");
        cJSON_GetObjectItem((int32_t)"pairing_gpio");
        if (v5 == 3) {
            // 0xab96
            *(int32_t *)(a1 + 0x2884) = v4;
            duss_log_gen_head();
            duss_log_print();
            result = 0;
            // branch -> 0xabd2
        } else {
            // 0xab62
            duss_log_gen_head();
            duss_log_print();
            // branch -> 0xab90
            // 0xab90
            result = -1001;
            // branch -> 0xabd2
        }
        // 0xabd2
        close(g101);
        // branch -> 0xabd8
        // 0xabd8
        if (path2 != *(int32_t *)g25) {
            // 0xabe8
            __stack_chk_fail();
            // branch -> 0xabec
        }
        // 0xabec
        g101 = v1;
        return result;
    }
    // 0xa9ee
    g101 = (int32_t)"hu_hdvt_get_pairing_gpio";
    duss_log_gen_head();
    duss_log_print();
    fd = open((char *)path, O_RDONLY);
    g101 = fd;
    if (fd <= 0xffffffff) {
        // 0xaa6a
        duss_log_gen_head();
        duss_log_print();
        // branch -> 0xabd8
        // 0xabd8
        if (path2 != *(int32_t *)g25) {
            // 0xabe8
            __stack_chk_fail();
            // branch -> 0xabec
        }
        // 0xabec
        g101 = v1;
        return -1001;
    }
    // 0xaaa0
    if (read(fd, (char *)&buf, (int32_t)" %u\n") <= 0) {
        // 0xaab0
        duss_log_gen_head();
        duss_log_print();
        // branch -> 0xab90
        // 0xab90
        // branch -> 0xabd2
        // 0xabd2
        close(g101);
        // branch -> 0xabd8
        // 0xabd8
        if (path2 != *(int32_t *)g25) {
            // 0xabe8
            __stack_chk_fail();
            // branch -> 0xabec
        }
        // 0xabec
        g101 = v1;
        return -1001;
    }
    // 0xaae0
    cJSON_Parse(v3);
    cJSON_GetObjectItem((int32_t)"platform");
    cJSON_GetObjectItem((int32_t)"pairing_gpio");
    if (v5 == 3) {
        // 0xab96
        *(int32_t *)(a1 + 0x2884) = v4;
        duss_log_gen_head();
        duss_log_print();
        result = 0;
        // branch -> 0xabd2
    } else {
        // 0xab62
        duss_log_gen_head();
        duss_log_print();
        // branch -> 0xab90
        // 0xab90
        result = -1001;
        // branch -> 0xabd2
    }
    // 0xabd2
    close(g101);
    // branch -> 0xabd8
    // 0xabd8
    if (path2 != *(int32_t *)g25) {
        // 0xabe8
        __stack_chk_fail();
        // branch -> 0xabec
    }
    // 0xabec
    g101 = v1;
    return result;
}

// Address range: 0xad56 - 0xad7f
int32_t function_ad56(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = (int32_t)a1;
    *(int32_t *)g103 = v1;
    *(int32_t *)(g103 + 4) = a3;
    *(int32_t *)(g103 + 8) = g100;
    *(int32_t *)(g103 + 12) = g101;
    *(int32_t *)(g103 + 16) = g103;
    int32_t v2 = *a1; // R2
    int32_t v3 = *(int32_t *)(v1 + 8); // 0xad64
    g101 = v3;
    int32_t v4 = *(int32_t *)(v1 + 12); // 0xad64
    int32_t v5 = v1 + 16; // 0xad64
    *(int32_t *)v4 = v5;
    *(int32_t *)(v4 + 4) = v2;
    *(int32_t *)(v4 + 8) = v3;
    *(int32_t *)(v4 + 12) = g102;
    int32_t v6 = *(int32_t *)(v5 + 8); // 0xad70
    g101 = v6;
    int32_t v7 = v5 + 16; // 0xad70
    int32_t v8 = 2 * v2; // 0xad74
    *(int32_t *)v8 = v7;
    *(int32_t *)(v8 + 4) = v6;
    return v7 + 20;
}

// Address range: 0xad80 - 0xaee7
int32_t function_ad80(int32_t a1, char * a2) {
    int32_t v1 = g101; // 0xad80
    int32_t v2 = *(int32_t *)g25; // 0xad8e
    g101 = (int32_t)"socket";
    int32_t str2;
    int32_t v3 = &str2; // 0xada4
    int32_t v4 = (int32_t)"/hdvt/hdvt_wifi_socket"; // 0xada0
    *(int32_t *)v3 = *(int32_t *)v4;
    *(int32_t *)(v3 + 4) = *(int32_t *)(v4 + 4);
    int32_t v5 = v3 + 8; // 0xada6
    int32_t result = v5; // R4
    int32_t v6 = (int32_t)"/hdvt/hdvt_wifi_socket"; // 0xada8
    int32_t v7 = v6 + 8; // 0xada8
    // branch -> 0xada0
    while (v7 != g101) {
        // 0xada0
        v3 = v5;
        v4 = v7;
        *(int32_t *)v3 = *(int32_t *)v4;
        *(int32_t *)(v3 + 4) = *(int32_t *)(v4 + 4);
        v5 = v3 + 8;
        result = v5;
        v6 = v7;
        v7 = v6 + 8;
        // continue -> 0xada0
    }
    // 0xadb0
    *(int32_t *)v5 = *(int32_t *)v7;
    *(int16_t *)(result + 4) = *(int16_t *)(v6 + 12);
    *(char *)(result + 6) = *(char *)(v6 + 14);
    int32_t sock_fd = socket(AF_LOCAL, SOCK_DGRAM, IPPROTO_IP); // 0xadc2
    g101 = sock_fd;
    if (sock_fd > -1) {
        int32_t v8 = 1;
        int32_t str;
        strncpy((char *)&str, (char *)&str2, 107);
        int32_t message = -0x2122;
        int32_t length = (int32_t)a2 == 0 ? 4 : 5;
        int32_t dest_addr = &v8; // 0xae3e_0
        // branch -> 0xae46
        while (true) {
            int32_t v9 = sendto(g101, (char *)&message, length, 0, (struct sockaddr *)dest_addr, 110); // 0xae52
            result = v9;
            if (v9 == -1) {
                // 0xae5c
                if (*__errno() == 4) {
                    // 0xae5c
                    // branch -> 0xae46
                    continue;
                }
            } else {
                // 0xae68
                if (v9 > -1) {
                    // 0xaea4
                    close(g101);
                    // branch -> 0xaeaa
                    // 0xaeaa
                    if (v2 != *(int32_t *)g25) {
                        // 0xaeb4
                        __stack_chk_fail();
                        // branch -> 0xaeb8
                    }
                    // 0xaeb8
                    g101 = v1;
                    return result;
                }
            }
            // 0xae6c
            duss_log_gen_head();
            int32_t err_num = *__errno(); // 0xae8e
            strerror(err_num);
            duss_log_print();
            // branch -> 0xaea4
            // 0xaea4
            close(g101);
            // branch -> 0xaeaa
        }
    } else {
        // 0xadca
        duss_log_gen_head();
        int32_t err_num2 = *__errno(); // 0xadec
        strerror(err_num2);
        duss_log_print();
        // branch -> 0xaeaa
    }
    // 0xaeaa
    if (v2 != *(int32_t *)g25) {
        // 0xaeb4
        __stack_chk_fail();
        // branch -> 0xaeb8
    }
    // 0xaeb8
    g101 = v1;
    return -1;
}

// Address range: 0xaee8 - 0xaf1d
int32_t function_aee8(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    g105 = &g28;
    g100 = a1;
    int32_t result = g25;
    int32_t v1 = *(int32_t *)result; // 0xaf02
    int32_t v2;
    g101 = &v2;
    int32_t v3;
    g104 = &v3;
    g102 = (int32_t)*(int16_t *)(g103 + 28);
    int32_t v4;
    int32_t v5;
    int32_t v6;
    int32_t v7;
    function_c2de(result, (int32_t)&v4, v1, -32, v7, 0, 0, 0, 0, 0, 0, v6, v5);
    return result;
}

// Address range: 0xaf1e - 0xaf61
char * function_af1e(int32_t a1, int32_t a2) {
    int32_t fds;
    memset((char *)&fds, g103, 16);
    g99 = &g35;
    fds = g35;
    g94 = 2;
    g98 = (int32_t)&g62;
    int32_t v1 = poll((struct pollfd *)&fds, 2, (int32_t)&g62); // 0xaf54
    g93 = v1;
    g3 = ((v1 - 2 ^ v1) & 1 - v1) < 0;
    g2 = v1 < 0;
    g4 = v1 == 0;
    g1 = v1 > 1;
    if (v1 == 0) {
        // if_af5c_0_true
        if (g91 % 16 == 0) {
            // if_af5c_1_true
            ((int32_t (*)())0xc2de)();
            // branch -> after_if_af5c_0
        }
    } else {
        // if_af5c_0_false
        if (v1 < 0 ^ ((v1 - 2 ^ v1) & 1 - v1) < 0) {
            // if_af5c_3_true
            if (g91 % 16 == 0) {
                // if_af5c_4_true
                ((int32_t (*)())0xc2de)();
                // branch -> after_if_af5c_0
            }
        }
    }
    // after_if_af5c_0
    return (char *)v1;
}

// Address range: 0xaf62 - 0xc1a7
int32_t function_af62(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t (*a11)(int32_t, int32_t, int32_t, int32_t), int32_t a12, int32_t a13, int32_t a14, int32_t a15, char * a16, char a17, int32_t a18, int16_t a19, char a20, char a21, int32_t a22, int32_t a23, int32_t a24, int32_t a25, int32_t a26, int32_t a27, int32_t a28, int32_t a29, int32_t a30, int32_t a31, int32_t a32, int32_t a33, int32_t a34, int32_t a35, int32_t a36, int32_t a37, int32_t a38, int32_t a39) {
    // 0xaf62
    duss_log_gen_head();
    g99 = (int32_t)"receive the local cmd\n";
    duss_log_print();
    g98 = 0x80000000 * (int32_t)&g90;
    int32_t v1;
    int32_t v2;
    function_c2d6(v1 & (int32_t)&g90, v2 & (int32_t)&g90);
    return g93;
}

// Address range: 0xc1aa - 0xc27f
int32_t function_c1aa(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9) {
    *(int16_t *)(a3 + 4) = (int16_t)g101;
    int32_t result = g103; // 0xc1ae
    g93 = result;
    g94 = g96;
    int32_t v1;
    g98 = &v1;
    g99 = (int32_t)"start test cmd to cp failed \n";
    function_c29a();
    return result;
}

// Address range: 0xc280 - 0xc299
int32_t function_c280(int32_t a1) {
    // 0xc280
    duss_log_gen_head();
    g93 = 86;
    g94 = 3;
    g99 = (int32_t)"factory link test, fix band\n";
    return 86;
}

// Address range: 0xc29a - 0xc29f
int32_t function_c29a(void) {
    // 0xc29a
    duss_log_print();
    int32_t result = function_c2d6(g93, g94); // 0xc29e
    g103 = result;
    return result;
}

// Address range: 0xc2a0 - 0xc2d1
int32_t function_c2a0(int32_t a1, int32_t a2, int32_t a3) {
    duss_log_gen_head();
    g94 = 1;
    g93 = 86;
    g1 = g106 > 0xfffffab3;
    int32_t v1;
    g98 = &v1;
    g99 = (int32_t)"unsupport cmd %d\n";
    return 86;
}

// Address range: 0xc2d2 - 0xc2d5
void function_c2d2(void) {
    // 0xc2d2
    duss_log_print();
}

// Address range: 0xc2d6 - 0xc2dd
int32_t function_c2d6(int32_t a1, int32_t a2) {
    // 0xc2d6
    int32_t result;
    g93 = function_af62(a1, a2, g98, g99, 0, 0, 0, 0, 0, 0, NULL, 0, result, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    return result;
}

// Address range: 0xc2de - 0xc30b
int32_t function_c2de(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13) {
    // 0xc2de
    g96 = &g36;
    int32_t result = g36;
    g103 = result;
    function_af1e(a1, a2);
    return result;
}

// Address range: 0xc30c - 0xc391
int32_t function_c30c(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t (*a7)(int32_t, int32_t), int32_t (*a8)(int32_t, int32_t), int32_t (*a9)(int32_t, int32_t), int32_t a10, int32_t a11, int32_t (*a12)(int32_t, int32_t, int32_t), int32_t a13, int32_t a14) {
    // 0xc30c
    g94 = a2;
    g98 = a3;
    bool v1 = g1; // 0xc30e
    bool v2 = v1; // 0xc33e
    int32_t v3 = a1; // 0xc33e
    if (a4 == 0) {
        // 0xc30e
        int32_t v4; // 0xc336
        bool v5; // 0xc336
        if (g101 == 0) {
            // 0xc31a
            g2 = a1 < 0;
            g4 = a1 == 0;
            g1 = v1;
            g93 = a5;
            g94 = a6;
            int32_t v6 = (int32_t)a7;
            g99 = v6;
            g100 = (int32_t)a8;
            g101 = (int32_t)a9;
            g102 = a10;
            g103 = a11;
            a12(a5, a6, v6);
            int32_t v7 = g93; // 0xc322
            bool v8 = g1; // 0xc322
            g2 = v7 < 0;
            g4 = v7 == 0;
            if (g99 == 0) {
                // 0xc326
                g93 = v7;
                g2 = v7 < 0;
                g4 = v7 == 0;
                g1 = v8;
                // branch -> 0xc32c
            }
            // 0xc32c
            g94 = a5;
            g99 = a6;
            g102 = v6;
            g103 = (int32_t)a8;
            a9(a5, a6);
            v5 = g1;
            v4 = g93;
            // branch -> 0xc334
        } else {
            // 0xc30e
            v5 = v1;
            v4 = a1;
            // branch -> 0xc334
        }
        // 0xc334
        g93 = v4;
        g2 = v4 < 0;
        g4 = v4 == 0;
        g1 = v5;
        g99 = a5;
        g101 = a6;
        g102 = (int32_t)a7;
        a8(v4, a5);
        v2 = g1;
        v3 = g93;
        // branch -> 0xc33e
    }
    // 0xc33e
    g93 = v3;
    g2 = v3 < 0;
    g4 = v3 == 0;
    g1 = v2;
    g99 = a5;
    g101 = a6;
    a7(v3, a5);
    int32_t v9 = &a14; // 0xc35c_0
    int32_t v10;
    g101 = v10;
    int32_t * v11 = (int32_t *)(v9 + 20); // 0xc374_0
    int32_t result = *v11; // 0xc374
    int32_t * v12 = (int32_t *)(v9 + 24); // 0xc374_1
    int32_t * v13 = (int32_t *)(v9 + 28); // 0xc374_2
    g101 = *v13;
    *(int32_t *)(v9 + 4) = result;
    int32_t v14;
    *(int32_t *)(v9 + 8) = v14;
    *(int32_t *)(v9 + 12) = a6;
    *(int32_t *)(v9 + 16) = *v12;
    *v11 = a13;
    *v12 = (int32_t)a9;
    *v13 = g92;
    *(int32_t *)(v9 - 16) = result;
    *(int32_t *)(v9 - 12) = v14;
    *(int32_t *)(v9 - 8) = a6;
    *(int32_t *)(v9 - 4) = a13;
    return result;
}

// Address range: 0xc392 - 0xc47d
int32_t function_c392(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5, int32_t a6, int32_t a7) {
    int32_t v1 = (int32_t)a4;
    int32_t v2;
    int32_t v3; // 0xc414
    int32_t v4; // 0xc422
    int32_t v5; // 0xc400
    if (g103 != 0) {
        // 0xc3ec
        if (g100 != 0) {
            // 0xc41e
            if (a2 != 0) {
                // 0xc42a
                return unknown_3b430(a1);
            }
            // 0xc41e
            // branch -> 0xc448
            // 0xc448
            // branch -> 0xc44a
            // 0xc44a
            duss_log_gen_head();
            duss_log_print();
            // branch -> 0xc474
            // 0xc474
            function_aee8(g100, g100, (int32_t)&a7, (int32_t)"ERROR: Assertion Fail\n", v2);
            return *(int32_t *)g101;
        }
        int32_t v6 = g102; // 0xc3f0
        v3 = v6 % 0x10000;
        // branch -> 0xc3f2
        // 0xc3f2
        if (v6 == 0) {
            // 0xc3fa
            g101 = 0;
            v5 = a1 - g105;
            if (g100 == 0) {
                // 0xc412
                g101 = 0;
                if (v3 != 0) {
                    // 0xc418
                    // branch -> 0xc41e
                    // 0xc41e
                    if (v3 != 0) {
                        // 0xc42a
                        return unknown_3b430(v5);
                    }
                    // 0xc41e
                    // branch -> 0xc448
                    // 0xc448
                    // branch -> 0xc44a
                }
                // 0xc44a
                duss_log_gen_head();
                duss_log_print();
                // branch -> 0xc474
                // 0xc474
                function_aee8(g100, g100, (int32_t)&a7, (int32_t)"ERROR: Assertion Fail\n", v2);
                return *(int32_t *)g101;
            }
            v4 = v5;
        } else {
            // 0xc418
            v4 = a1;
            // branch -> 0xc41e
        }
        // 0xc41e
        if (v3 != 0) {
            // 0xc42a
            return unknown_3b430(v4);
        }
        // 0xc41e
        // branch -> 0xc448
        // 0xc448
        // branch -> 0xc44a
        // 0xc44a
        duss_log_gen_head();
        duss_log_print();
        // branch -> 0xc474
        // 0xc474
        function_aee8(g100, g100, (int32_t)&a7, (int32_t)"ERROR: Assertion Fail\n", v2);
        return *(int32_t *)g101;
    }
    // 0xc39a
    if (g101 == 0) {
        uint32_t v7 = g100; // 0xc3b0
        g100 = a1;
        g101 = v1;
        int32_t v8 = a1; // 0xc476
        int32_t v9 = a1; // 0xc474
        int32_t v10 = v7 / 256 % 256 | 0x1000000 * v7 / 0x10000; // 0xc476
        if (a1 == 0) {
            // 0xc446
            // branch -> 0xc448
            // 0xc448
            // branch -> 0xc44a
            // 0xc44a
            duss_log_gen_head();
            duss_log_print();
            v8 = 0;
            v9 = g100;
            v1 = (int32_t)"ERROR: Assertion Fail\n";
            a3 = &a7;
            v10 = g100;
            // branch -> 0xc474
        }
        // 0xc474
        function_aee8(v9, v10, a3, v1, v8);
        return *(int32_t *)g101;
    }
    // 0xc39a
    v3 = a2;
    // branch -> 0xc3f2
    // 0xc3f2
    if (g102 == 0) {
        // 0xc3fa
        g101 = 0;
        v5 = a1 - g105;
        if (g100 == 0) {
            // 0xc412
            g101 = 0;
            if (v3 != 0) {
                // 0xc418
                // branch -> 0xc41e
                // 0xc41e
                if (v3 != 0) {
                    // 0xc42a
                    return unknown_3b430(v5);
                }
                // 0xc41e
                // branch -> 0xc448
                // 0xc448
                // branch -> 0xc44a
            }
            // 0xc44a
            duss_log_gen_head();
            duss_log_print();
            // branch -> 0xc474
            // 0xc474
            function_aee8(g100, g100, (int32_t)&a7, (int32_t)"ERROR: Assertion Fail\n", v2);
            return *(int32_t *)g101;
        }
        v4 = v5;
    } else {
        // 0xc418
        v4 = a1;
        // branch -> 0xc41e
    }
    // 0xc41e
    if (v3 != 0) {
        // 0xc42a
        return unknown_3b430(v4);
    }
    // 0xc41e
    // branch -> 0xc448
    // 0xc448
    // branch -> 0xc44a
    // 0xc44a
    duss_log_gen_head();
    duss_log_print();
    // branch -> 0xc474
    // 0xc474
    function_aee8(g100, g100, (int32_t)&a7, (int32_t)"ERROR: Assertion Fail\n", v2);
    return *(int32_t *)g101;
}

// Address range: 0xc47e - 0xc49f
int32_t function_c47e(int64_t * a1, uint32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t result = (int32_t)a1;
    g93 = result;
    g94 = a2;
    g98 = a3;
    g99 = a4;
    uint32_t v1 = -2 - result + a2; // 0xc47e
    g3 = ((v1 ^ a2) & (v1 ^ -result)) < 0;
    g2 = a2 - result < 0;
    g4 = result == a2;
    g1 = v1 <= a2;
    if (result != a2) {
        // 0xc482
        __stack_chk_fail();
        // branch -> 0xc486
    }
    // 0xc486
    int32_t v2;
    g100 = v2;
    int32_t v3;
    g101 = v3;
    int32_t v4;
    ((int32_t (*)())v4)();
    if (result % 4 == 0) {
        int64_t v5 = result; // 0xc498
        *a1 = 0x100000000 * v5 | v5;
        // branch -> after_if_c498_0
    } else {
        // if_c498_0_false
        *(int32_t *)a1 = result;
        *(int32_t *)(result + 4) = result;
        // branch -> after_if_c498_0
    }
    // after_if_c498_0
    return result;
}

// Address range: 0xc4a0 - 0xc53d
int32_t function_c4a0(int32_t a1) {
    int32_t v1 = g101; // 0xc4a0
    int32_t v2 = a1 + (int32_t)&g34; // R1
    *(int32_t *)(a1 + (int32_t)&g34 + 32) = 0xc431;
    *(int32_t *)(v2 + 36) = a1;
    int32_t v3 = 0; // R0
    g101 = 1;
    int32_t v4 = *(int32_t *)g25; // 0xc4be
    g99 = v4;
    *(int32_t *)(v2 + 28) = (int32_t)"hdvt_work";
    *(int32_t *)(v2 + 40) = v3;
    *(int32_t *)(v2 + 44) = v3;
    *(int32_t *)(v2 + 48) = v3;
    *(int32_t *)(v2 + 56) = v3;
    *(char *)(v2 + 52) = (char)g101;
    int32_t v5 = v2 + 28; // 0xc4d0
    duss_osal_task_create(v5, v2 + 24);
    int32_t result = 0; // 0xc514
    if (v5 != 0) {
        // 0xc4e0
        duss_log_gen_head();
        g99 = (int32_t)"duss_osal_task_create() error: %d\n";
        duss_log_print();
        result = v5;
        // branch -> 0xc510
    }
    // 0xc510
    g94 = v4;
    g93 = result;
    if (v4 != *(int32_t *)g25) {
        // 0xc51a
        __stack_chk_fail();
        // branch -> 0xc51e
    }
    // 0xc51e
    g101 = v1;
    return result;
}

// Address range: 0xc53e - 0xc53f
int32_t function_c53e(int32_t result) {
    // 0xc53e
    g93 = result;
    return result;
}

// Address range: 0xc540 - 0xc8df
int32_t function_c540(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    int32_t v1 = g100; // 0xc540
    int32_t v2 = g101; // 0xc540
    int32_t v3 = g102; // 0xc540
    int32_t v4 = g103; // 0xc540
    int32_t v5 = g104; // 0xc540
    int32_t v6 = g105; // 0xc540
    int32_t v7 = g95; // 0xc540
    g100 = a1;
    int32_t v8 = g25;
    g101 = v8;
    uint32_t v9 = *(int32_t *)v8; // 0xc55a
    memset((char *)(a1 + (int32_t)&g34 + 24), 0, (int32_t)&g70);
    g104 = g101;
    g101 = (int32_t)"/dev/lmi6";
    g102 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/src/hu_hdvt.c";
    int32_t v10;
    int32_t v11 = &v10; // 0xc592_0
    int32_t path = (int32_t)"/dev/lmi6"; // 0xc578
    // branch -> 0xc578
    while (true) {
        // 0xc578
        int32_t buf;
        if (stat((char *)path, (struct stat *)&buf) > -1) {
            // 0xc5b2
            int32_t v12;
            if ((v12 & 0xf000) == 0x2000) {
                int32_t (*v13)() = (int32_t (*)())g92;
                g101 = &g60;
                duss_log_gen_head();
                duss_log_print();
                int32_t fd = open("/dev/lmi6", 0x80002);
                g101 = fd;
                uint32_t v14; // 0xc84443
                uint32_t v15; // 0xc86c
                int32_t v16; // 0xc83e
                int32_t v17; // 0xc84e
                if (fd > -1) {
                    int32_t v18 = g100; // 0xc62c
                    g103 = v18 + (int32_t)&g34;
                    *(int32_t *)(v18 + (int32_t)&g34 + 60) = fd;
                    int32_t v19 = function_14548(-0x1ff80100, 256); // 0xc638
                    int32_t v20 = g100; // 0xc63c
                    g98 = v20 + 0x2580;
                    *(int32_t *)(v20 + 0x259c) = v19;
                    int32_t * fd2 = &g101;
                    if (v19 != 0) {
                        // 0xc650
                        g94 = 28;
                        g98 = 0;
                        function_14680(v19);
                        int32_t sock_fd = socket(AF_LOCAL, SOCK_DGRAM, IPPROTO_IP); // 0xc65e
                        g101 = sock_fd;
                        if (sock_fd > -1) {
                            // 0xc6a8
                            g102 = 1;
                            int32_t addr = 1;
                            int32_t str;
                            strncpy((char *)&str, "/sdr/sdrs_hdvt_socket", 107);
                            int32_t v21 = bind(g101, (struct sockaddr *)&addr, 110); // 0xc6c8
                            g95 = g102;
                            int32_t v22; // 0xc842
                            if (v21 > -1) {
                                // 0xc718
                                *(int32_t *)(g100 + (int32_t)&g36 + 4) = g101;
                                int32_t v23 = g100; // 0xc71e
                                g105 = v23 + 0x25c0;
                                int32_t v24 = *(int32_t *)(g103 + 60); // 0xc728
                                function_dd4c(v23 + 0x25c4, 86, v24, 0, (int32_t)(struct sockaddr *)"dji/duml/service/hdvt/hdvt_uav/src/hu_hdvt.c", (int32_t)"hu_hdvt_init", (int32_t)&g60, 0, 0, (int32_t)"sdr_op_event", buf);
                                g101 = -1003;
                                duss_log_gen_head();
                                duss_log_print();
                                int32_t v25 = g100; // 0xc762
                                g98 = v25 + (int32_t)&g34;
                                g100 = v25 + (int32_t)&g36;
                                close(*(int32_t *)(v25 + (int32_t)&g34 + 60));
                                close(*(int32_t *)(g100 + 4));
                                v22 = g101;
                                // branch -> 0xc83c
                            } else {
                                // 0xc6d2
                                duss_log_gen_head();
                                int32_t err_num = *__errno(); // 0xc6f6
                                strerror(err_num);
                                strerror(err_num);
                                g98 = v11;
                                duss_log_print();
                                int32_t v26 = g100; // 0xc70c
                                g100 = v26 + (int32_t)&g34;
                                close(*(int32_t *)(v26 + (int32_t)&g34 + 60));
                                // branch -> 0xc646
                                // 0xc646
                                close(g101);
                                // branch -> 0xc64a
                                // 0xc64a
                                g101 = -1001;
                                v22 = -1001;
                                // branch -> 0xc83c
                            }
                            // 0xc83c
                            g94 = v9;
                            v16 = *(int32_t *)g104;
                            g99 = v16;
                            g93 = v22;
                            v14 = -2 - v16 + v9;
                            g3 = ((v14 ^ v9) & (v14 ^ -v16)) < 0;
                            g2 = v9 - v16 < 0;
                            g4 = v9 == v16;
                            g1 = v14 <= v9;
                            if (v9 == v16) {
                                // 0xc8d8
                                g100 = v1;
                                g101 = v2;
                                g102 = v3;
                                g103 = v4;
                                g104 = v5;
                                g105 = v6;
                                g95 = v7;
                                v13();
                                return g93;
                            }
                            while (true) {
                                // 0xc848
                                __stack_chk_fail();
                                *(int16_t *)(g100 + 52) = (int16_t)g93;
                                v17 = g93;
                                g94 = v17;
                                g98 = v17;
                                v15 = g102;
                                int32_t v27;
                                int32_t v28; // 0xc872
                                if (v15 % 4 == 0) {
                                  lab_if_c86c_0_true_2:;
                                    int64_t v29 = v17; // 0xc86c
                                    *(int64_t *)v15 = 0x100000000 * v29 | v29;
                                    v27 = v17;
                                    v28 = v17;
                                    // branch -> after_if_c86c_0
                                } else {
                                  lab_if_c86c_0_false_2:
                                    // if_c86c_0_false
                                    *(int32_t *)v15 = v17;
                                    *(int32_t *)(v15 + 4) = v17;
                                    v27 = g94;
                                    v28 = g93;
                                    // branch -> after_if_c86c_0
                                }
                                // after_if_c86c_0
                                int32_t v30;
                                g102 = &v30;
                                g93 = v28;
                                int32_t v31 = g99;
                                uint32_t v32 = -2 - v31 + v27; // 0xc844
                                g3 = ((v32 ^ v27) & (v32 ^ -v31)) < 0;
                                g2 = v27 - v31 < 0;
                                g4 = v27 == v31;
                                g1 = v32 <= v27;
                                if (v27 == v31) {
                                    // break -> 0xc8d8
                                    break;
                                }
                                // continue -> 0xc848
                            }
                            // 0xc8d8
                            g100 = v1;
                            g101 = v2;
                            g102 = v3;
                            g103 = v4;
                            g104 = v5;
                            g105 = v6;
                            g95 = v7;
                            v13();
                            return g93;
                        }
                        // 0xc666
                        g101 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/src/hu_hdvt.c";
                        duss_log_gen_head();
                        int32_t err_num2 = *__errno(); // 0xc68a
                        strerror(err_num2);
                        strerror(err_num2);
                        g98 = v11;
                        duss_log_print();
                        int32_t v33 = g100; // 0xc6a0
                        g100 = v33 + (int32_t)&g34;
                        // branch -> 0xc646
                        // 0xc646
                        close(*(int32_t *)(v33 + (int32_t)&g34 + 60));
                        // branch -> 0xc64a
                        // 0xc64a
                        g101 = -1001;
                        // branch -> 0xc83c
                        // 0xc83c
                        g94 = v9;
                        v16 = *(int32_t *)g104;
                        g99 = v16;
                        g93 = -1001;
                        v14 = -2 - v16 + v9;
                        g3 = ((v14 ^ v9) & (v14 ^ -v16)) < 0;
                        g2 = v9 - v16 < 0;
                        g4 = v9 == v16;
                        g1 = v14 <= v9;
                        if (v9 == v16) {
                            // 0xc8d8
                            g100 = v1;
                            g101 = v2;
                            g102 = v3;
                            g103 = v4;
                            g104 = v5;
                            g105 = v6;
                            g95 = v7;
                            v13();
                            return g93;
                        }
                        while (true) {
                            // 0xc848
                            __stack_chk_fail();
                            *(int16_t *)(g100 + 52) = (int16_t)g93;
                            v17 = g93;
                            g94 = v17;
                            g98 = v17;
                            v15 = g102;
                            if (v15 % 4 == 0) {
                                goto lab_if_c86c_0_true_2;
                            }
                            goto lab_if_c86c_0_false_2;
                        }
                    }
                    // 0xc646
                    close(*fd2);
                    // branch -> 0xc64a
                } else {
                    // 0xc5fa
                    duss_log_gen_head();
                    g98 = v11;
                    duss_log_print();
                    // branch -> 0xc64a
                }
                // 0xc64a
                g101 = -1001;
                // branch -> 0xc83c
                // 0xc83c
                g94 = v9;
                v16 = *(int32_t *)g104;
                g99 = v16;
                g93 = -1001;
                v14 = -2 - v16 + v9;
                g3 = ((v14 ^ v9) & (v14 ^ -v16)) < 0;
                g2 = v9 - v16 < 0;
                g4 = v9 == v16;
                g1 = v14 <= v9;
                if (v9 == v16) {
                    // 0xc8d8
                    g100 = v1;
                    g101 = v2;
                    g102 = v3;
                    g103 = v4;
                    g104 = v5;
                    g105 = v6;
                    g95 = v7;
                    v13();
                    return g93;
                }
                while (true) {
                    // 0xc848
                    __stack_chk_fail();
                    *(int16_t *)(g100 + 52) = (int16_t)g93;
                    v17 = g93;
                    g94 = v17;
                    g98 = v17;
                    v15 = g102;
                    if (v15 % 4 == 0) {
                        goto lab_if_c86c_0_true_2;
                    }
                    goto lab_if_c86c_0_false_2;
                }
            }
        } else {
            // 0xc584
            duss_log_gen_head();
            duss_log_print();
            usleep((int32_t)"odem 2");
            // branch -> 0xc578
        }
        // 0xc578
        path = g101;
        // branch -> 0xc578
    }
}

// Address range: 0xc8e0 - 0xc977
int32_t function_c8e0(char * a1) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g101; // 0xc8e0
    g101 = (int32_t)"LR{D";
    int32_t v3 = v1; // R4
    int32_t v4 = *(int32_t *)g25; // 0xc8f2
    g101 = (int32_t)"/sys/class/gpio";
    *a1 = 0;
    int32_t v5 = g101; // 0xc8fe
    duss_hal_device_open(v5, v3, v1 + 4);
    if (v5 == 0) {
        int32_t v6 = 256; // R0
        int32_t v7 = 255; // R2
        char v8 = -1;
        // branch -> 0xc944
        while (true) {
            // 0xc944
            *(char *)(v3 + 8) = v8;
            *(char *)(v3 + 9) = (char)v7;
            int32_t v9 = v6; // 0xc94a
            int32_t result = v9 - 1; // 0xc94a
            v6 = result;
            if (v9 != 1) {
                // 0xc944
                v8 = v7;
                v3 += 2;
                // branch -> 0xc944
                continue;
            }
            // 0xc94e
            if (v4 != *(int32_t *)g25) {
                // 0xc956
                __stack_chk_fail();
                // branch -> 0xc95a
            }
            // 0xc95a
            g101 = v2;
            return result;
        }
    } else {
        // 0xc908
        duss_log_gen_head();
        duss_log_print();
        // branch -> 0xc94e
    }
    // 0xc94e
    if (v4 != *(int32_t *)g25) {
        // 0xc956
        __stack_chk_fail();
        // branch -> 0xc95a
    }
    // 0xc95a
    g101 = v2;
    return -1001;
}

// Address range: 0xc978 - 0xca41
int32_t function_c978(int32_t a1, int32_t a2, char a3) {
    int32_t v1 = g100; // 0xc978
    int32_t v2 = g101; // 0xc978
    g101 = a3;
    g99 = g25;
    uint32_t v3 = *(int32_t *)g25; // 0xc98e
    int32_t v4 = *(int32_t *)(a1 + 4); // 0xc99c
    duss_hal_gpio_set_direction(v4, 1);
    int32_t v5; // 0xca2e
    if (v4 != 0) {
        // 0xc9a6
        duss_log_gen_head();
        // branch -> 0xca1c
        // 0xca1c
        g99 = (int32_t)"duss_hal_gpio_set_direction() error: index = %d\n";
        duss_log_print();
        // branch -> 0xca2c
        // 0xca2c
        g98 = v3;
        v5 = *(int32_t *)g25;
        g94 = v5;
        g1 = -2 - v5 + v3 <= v3;
        if (v3 != v5) {
            // 0xca36
            __stack_chk_fail();
            // branch -> 0xca3a
        }
        // 0xca3a
        g100 = v1;
        g101 = v2;
        return -1001;
    }
    // 0xc9d2
    *(char *)(a1 + 2 * (a2 + 4)) = 1;
    int32_t v6 = 2 * (a2 + 4) + a1; // 0xc9da
    int32_t v7 = (int32_t)*(char *)(v6 + 1); // 0xc9de
    g97 = v7;
    int32_t v8 = g101; // 0xc9e2
    if (v7 + 1 + -1 - v8 == 0) {
        // 0xca2a
        // branch -> 0xca2c
        // 0xca2c
        g98 = v3;
        v5 = *(int32_t *)g25;
        g94 = v5;
        g1 = -2 - v5 + v3 <= v3;
        if (v3 != v5) {
            // 0xca36
            __stack_chk_fail();
            // branch -> 0xca3a
        }
        // 0xca3a
        g100 = v1;
        g101 = v2;
        return 0;
    }
    int32_t v9 = *(int32_t *)(a1 + 4); // 0xc9e6
    int32_t result = v9; // R0
    duss_hal_gpio_set_value(v9, a2, 0x1000000 * v8 / 0x1000000);
    if (result == 0) {
        // 0xca26
        *(char *)(v6 + 1) = (char)g101;
        // branch -> 0xca2c
    } else {
        // 0xc9f2
        duss_log_gen_head();
        // branch -> 0xca1c
        // 0xca1c
        g99 = (int32_t)"duss_hal_gpio_set_value() error: val = %d\n";
        duss_log_print();
        result = -1001;
        // branch -> 0xca2c
    }
    // 0xca2c
    g98 = v3;
    v5 = *(int32_t *)g25;
    g94 = v5;
    g1 = -2 - v5 + v3 <= v3;
    if (v3 != v5) {
        // 0xca36
        __stack_chk_fail();
        // branch -> 0xca3a
    }
    // 0xca3a
    g100 = v1;
    g101 = v2;
    return result;
}

// Address range: 0xca42 - 0xca5f
int32_t function_ca42(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0xca42
    return function_c30c(a1, a1, a3, a4, 0, 0, NULL, NULL, NULL, 0, 0, NULL, 0, 0);
}

// Address range: 0xca60 - 0xcad1
int32_t function_ca60(int32_t a1, int32_t a2) {
    int32_t v1 = g101; // 0xca60
    g99 = g25;
    uint32_t v2 = *(int32_t *)g25; // 0xca6c
    int32_t v3 = a2 + 4; // 0xca70
    unsigned char v4 = *(char *)(2 * v3 + a1); // 0xca74
    g93 = v4;
    g101 = a2;
    int32_t v5; // 0xcac2
    if (v4 == 0) {
        // 0xcac0
        v5 = *(int32_t *)g25;
        g1 = -2 - v5 + v2 <= v2;
        if (v2 != v5) {
            // 0xcac8
            __stack_chk_fail();
            // branch -> 0xcacc
        }
        // 0xcacc
        g101 = v1;
        return g93;
    }
    int32_t v6 = *(int32_t *)(a1 + 4); // 0xca7e
    g93 = v6;
    duss_hal_gpio_set_direction(v6, 0);
    if (g93 == 0) {
        // 0xcabc
        *(char *)(a1 + 2 * v3) = 0;
        // branch -> 0xcac0
    } else {
        // 0xca88
        g99 = 128;
        duss_log_gen_head();
        // 0xcaa6
        g99 = (int32_t)"duss_hal_gpio_set_direction() error: index = %d\n";
        duss_log_print();
        // branch -> 0xcab6
        // 0xcab6
        g93 = -1001;
        // branch -> 0xcac0
    }
    // 0xcac0
    v5 = *(int32_t *)g25;
    g1 = -2 - v5 + v2 <= v2;
    if (v2 != v5) {
        // 0xcac8
        __stack_chk_fail();
        // branch -> 0xcacc
    }
    // 0xcacc
    g101 = v1;
    return g93;
}

// Address range: 0xcad2 - 0xcae3
int32_t function_cad2(int32_t a1, int32_t a2) {
    // 0xcad2
    function_d218((char)a1);
    return 0;
}

// Address range: 0xcae4 - 0xcb79
int32_t function_cae4(int32_t a1, int32_t a2, int32_t a3) {
    // 0xcae4
    g94 = a2;
    int32_t v1 = g101; // 0xcae4
    g101 = -32;
    uint32_t v2 = *(int32_t *)g25; // 0xcaf0
    int32_t v3 = a2 + 4; // 0xcaf2
    g101 = v3;
    g101 = g25;
    int32_t result; // 0xcb76_2
    int32_t v4; // 0xcb6a
    if (*(char *)(2 * v3 + a1) != 0) {
        // 0xcb00
        duss_log_gen_head();
        g94 = 1;
        duss_log_print();
        // branch -> 0xcb64
        // 0xcb64
        g93 = -1001;
        // branch -> 0xcb68
        // 0xcb68
        g98 = v2;
        v4 = *(int32_t *)g101;
        g99 = v4;
        g1 = -2 - v4 + v2 <= v2;
        if (v2 != v4) {
            // 0xcb70
            __stack_chk_fail();
            result = g93;
            // branch -> 0xcb74
        } else {
            result = -1001;
        }
        // 0xcb74
        g101 = v1;
        return result;
    }
    int32_t v5 = *(int32_t *)(a1 + 4); // 0xcb30
    g93 = v5;
    duss_hal_gpio_get_value(v5);
    int32_t v6; // 0xcb76_22
    if (g93 != 0) {
        // 0xcb38
        duss_log_gen_head();
        g94 = 1;
        duss_log_print();
        // branch -> 0xcb64
        // 0xcb64
        g93 = -1001;
        v6 = -1001;
        // branch -> 0xcb68
    } else {
        v6 = 0;
    }
    // 0xcb68
    g98 = v2;
    v4 = *(int32_t *)g101;
    g99 = v4;
    g1 = -2 - v4 + v2 <= v2;
    if (v2 != v4) {
        // 0xcb70
        __stack_chk_fail();
        result = g93;
        // branch -> 0xcb74
    } else {
        result = v6;
    }
    // 0xcb74
    g101 = v1;
    return result;
}

// Address range: 0xcb7a - 0xcb97
int32_t function_cb7a(int32_t a1, int32_t a2, int32_t a3) {
    // 0xcb7a
    g94 = a1;
    unknown_cbb4(a1, a1, a3);
    function_d208();
    g93 = 1;
    return 1;
}

// Address range: 0xcb98 - 0xcbb9
int32_t function_cb98(int32_t a1) {
    int32_t v1 = g100; // 0xcb9c
    int32_t v2 = a1 + 0x267c; // 0xcb9e
    g100 = v2;
    function_c978(v2, 145, 1);
    function_c978(g100, 146, 0);
    g93 = 0;
    g100 = v1;
    return 0;
}

// Address range: 0xcbba - 0xcc99
int32_t function_cbba(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = a1 + 0x267c; // 0xcbc0
    g100 = v1;
    function_c978(v1, 145, 0);
    function_c978(g100, 146, 1);
    g93 = 0;
    return 0;
}

// Address range: 0xcc9a - 0xccad
int32_t function_cc9a(int32_t a1, int32_t a2, int32_t a3) {
    // 0xcc9a
    function_d180();
    g93 = 86;
    return 86;
}

// Address range: 0xccae - 0xccbb
int32_t function_ccae(int32_t a1, int32_t a2, int32_t a3) {
    // 0xccae
    g98 = a3;
    int32_t result = function_d0c8(a1); // 0xccb4
    g93 = result;
    return result;
}

// Address range: 0xccbc - 0xcd39
int32_t function_ccbc(int32_t a1, int32_t a2) {
    // 0xccbc
    int32_t v1;
    char * v2 = (char *)v1; // bp-172
    int32_t v3 = g101; // 0xccbc
    g101 = g25;
    uint32_t v4 = *(int32_t *)g25; // 0xccc8
    int32_t result = (int32_t)&v2;
    v2 = "app_test_timer";
    duss_osal_timer_create(result, a1 + 0x25e4);
    duss_log_gen_head();
    g99 = (int32_t)"duss_osal_timer_create() error: %d\n";
    duss_log_print();
    int32_t v5 = *(int32_t *)g101; // 0xcd28
    g93 = result;
    g1 = -2 - v5 + v4 <= v4;
    if (v4 != v5) {
        // 0xcd30
        __stack_chk_fail();
        // branch -> 0xcd34
    }
    // 0xcd34
    g101 = v3;
    return result;
}

// Address range: 0xcd3a - 0xd05d
int32_t function_cd3a(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15) {
    int32_t v1;
    int32_t (*v2)() = (int32_t (*)())v1;
    g98 = a3;
    g99 = a4;
    g94 = a1;
    uint32_t v3; // 0xd04a
    int32_t v4;
    int32_t v5;
    int32_t v6;
    int32_t v7;
    int32_t v8;
    int32_t v9;
    int32_t v10; // 0xd04a
    int32_t result; // 0xd046
    if (g102 == 0) {
        int32_t v11 = g25;
        int32_t v12 = *(int32_t *)v11; // 0xcd64
        int32_t v13;
        memset((char *)&v13, 0, (int32_t)(int16_t)&g65);
        int32_t v14 = g45 + 1; // 0xcd84
        int32_t v15 = v14 % 2; // 0xcd86
        g101 = v15;
        int32_t v16 = *(int32_t *)(a1 + 0x292c); // 0xcd8a
        g45 = v14;
        int32_t v17 = 6;
        g104 = v11;
        if (v15 != 0) {
            int32_t v18 = *(int32_t *)(v16 + 28); // 0xcd96
            g98 = v18;
            int32_t v19 = *(int32_t *)(v16 + 32); // 0xcd98
            g99 = v19;
            if ((v18 - v19 & *(int32_t *)(v16 + 24) - 1) <= 13) {
                // if_cda2_0_false
                if (g91 % 16 == 0) {
                    // 0xd042
                    g94 = v12;
                    v10 = v12;
                    // branch -> 0xd046
                    // 0xd046
                    result = *(int32_t *)g104;
                    g93 = result;
                    v3 = -2 - result + v10;
                    g3 = ((v3 ^ v10) & (v3 ^ -result)) < 0;
                    g2 = v10 - result < 0;
                    g4 = v10 == result;
                    g1 = v3 <= v10;
                    if (v10 != result) {
                        // 0xd04e
                        __stack_chk_fail();
                        // branch -> 0xd052
                    }
                    // 0xd052
                    g100 = v4;
                    g101 = v5;
                    g102 = v6;
                    g103 = v7;
                    g104 = v8;
                    g105 = v9;
                    v2();
                    return result;
                }
            }
            // after_if_cda2_0
            g101 = 0;
            // branch -> 0xcda8
        }
        // 0xcda8
        int32_t v20;
        int32_t v21 = &v20; // 0xcdae_0
        int32_t v22 = &v17; // 0xcdb4_0
        int32_t v23;
        int32_t v24 = &v23; // 0xce4e_0
        int32_t v25;
        int32_t v26 = 0x10000 * v25 / 0x10000; // 0xce64
        duss_osal_msgq_receive(v16, 0, v21, v22);
        int32_t v27 = v17; // 0xcdba42
        if (v16 == 0) {
            int32_t v28 = v27; // 0xcdba44
            int32_t v29; // 0xcdba
            while (true) {
                int32_t v30 = g101 + v28; // 0xcdc0
                g101 = v30;
                if (v30 > 5) {
                    int32_t v31 = v20 % 256; // 0xce34
                    g101 = v31;
                    if (v31 == 255) {
                        // 0xce86
                        memset((char *)&v13, 0, (int32_t)(int16_t)&g65);
                        uint32_t v32;
                        uint32_t v33 = v32 % 16; // 0xce96
                        int32_t v34; // 0xcecc
                        int32_t v35; // 0xcec8
                        int32_t v36; // 0xcf66
                        unsigned char v37; // 0xcf6a
                        unsigned char v38; // 0xcf72
                        int32_t v39; // 0xcfb8
                        int32_t v40; // 0xd008
                        if (v33 == 2) {
                            // 0xcea8
                            g101 = 130;
                            // branch -> 0xcec4
                        } else {
                            // 0xceb6
                            if (v33 != 1) {
                                // 0xceba
                                if (v33 != 4) {
                                    // 0xcec2
                                    g101 = 2;
                                    // branch -> 0xcec4
                                    // 0xcec4
                                    v35 = a1;
                                    g101 = v35 + 0x2900;
                                    v34 = (int32_t)*(int16_t *)(v35 + 0x293c);
                                    g92 = v34;
                                    g97 = v26;
                                    v13 = 0x4000a;
                                    g101 = 124;
                                    duss_log_gen_head();
                                    g101 = 0x10000 * (v34 + v26) / 0x10000;
                                    g99 = (int32_t)"glass imu yaw=%d, pitch=%d, mode=%d, send yaw=%d, pitch=%d, run_time_10ms=%u\n";
                                    duss_log_print();
                                    v36 = a1;
                                    g98 = v36 + 0x2900;
                                    v37 = *(char *)(v36 + 0x2934);
                                    g101 = v37;
                                    if (v37 == 0) {
                                        // 0xd004
                                        v40 = *(int32_t *)(v36 + 0x25c8);
                                        duss_event_send(v40);
                                        if (v40 != 0) {
                                            // 0xd014
                                            duss_log_gen_head();
                                            g98 = v24;
                                            g99 = (int32_t)"duss_event_send() for gimbal_ctrl error: %d\n";
                                            duss_log_print();
                                            // branch -> 0xd042
                                        }
                                    } else {
                                        // 0xcf72
                                        v38 = *(char *)(v36 + 0x2935);
                                        g98 = v38;
                                        if (v38 != 0) {
                                            // 0xcf7a
                                            g101 = (int32_t)"hu_imu_ctrl_sched_task";
                                            duss_log_gen_head();
                                            g98 = v24;
                                            duss_log_print();
                                            g101 = 0;
                                            v39 = *(int32_t *)(a1 + 0x25c8);
                                            duss_event_send(v39);
                                            if (v39 != 0) {
                                                // 0xcfca
                                                duss_log_gen_head();
                                                g98 = v24;
                                                duss_log_print();
                                                // branch -> 0xcff8
                                            }
                                            // 0xcff8
                                            g99 = 0;
                                            *(char *)(a1 + 0x2935) = 0;
                                            // branch -> 0xd042
                                        }
                                    }
                                    // 0xd042
                                    g94 = v12;
                                    v10 = v12;
                                    // branch -> 0xd046
                                    // 0xd046
                                    result = *(int32_t *)g104;
                                    g93 = result;
                                    v3 = -2 - result + v10;
                                    g3 = ((v3 ^ v10) & (v3 ^ -result)) < 0;
                                    g2 = v10 - result < 0;
                                    g4 = v10 == result;
                                    g1 = v3 <= v10;
                                    if (v10 != result) {
                                        // 0xd04e
                                        __stack_chk_fail();
                                        // branch -> 0xd052
                                    }
                                    // 0xd052
                                    g100 = v4;
                                    g101 = v5;
                                    g102 = v6;
                                    g103 = v7;
                                    g104 = v8;
                                    g105 = v9;
                                    v2();
                                    return result;
                                }
                            }
                            // 0xcebe
                            g101 = 146;
                            // branch -> 0xcec4
                        }
                        // 0xcec4
                        v35 = a1;
                        g101 = v35 + 0x2900;
                        v34 = (int32_t)*(int16_t *)(v35 + 0x293c);
                        g92 = v34;
                        g97 = v26;
                        v13 = 0x4000a;
                        g101 = 124;
                        duss_log_gen_head();
                        g101 = 0x10000 * (v34 + v26) / 0x10000;
                        g99 = (int32_t)"glass imu yaw=%d, pitch=%d, mode=%d, send yaw=%d, pitch=%d, run_time_10ms=%u\n";
                        duss_log_print();
                        v36 = a1;
                        g98 = v36 + 0x2900;
                        v37 = *(char *)(v36 + 0x2934);
                        g101 = v37;
                        if (v37 == 0) {
                            // 0xd004
                            v40 = *(int32_t *)(v36 + 0x25c8);
                            duss_event_send(v40);
                            if (v40 != 0) {
                                // 0xd014
                                duss_log_gen_head();
                                g98 = v24;
                                g99 = (int32_t)"duss_event_send() for gimbal_ctrl error: %d\n";
                                duss_log_print();
                                // branch -> 0xd042
                            }
                        } else {
                            // 0xcf72
                            v38 = *(char *)(v36 + 0x2935);
                            g98 = v38;
                            if (v38 != 0) {
                                // 0xcf7a
                                g101 = (int32_t)"hu_imu_ctrl_sched_task";
                                duss_log_gen_head();
                                g98 = v24;
                                duss_log_print();
                                g101 = 0;
                                v39 = *(int32_t *)(a1 + 0x25c8);
                                duss_event_send(v39);
                                if (v39 != 0) {
                                    // 0xcfca
                                    duss_log_gen_head();
                                    g98 = v24;
                                    duss_log_print();
                                    // branch -> 0xcff8
                                }
                                // 0xcff8
                                g99 = 0;
                                *(char *)(a1 + 0x2935) = 0;
                                // branch -> 0xd042
                            }
                        }
                        // 0xd042
                        g94 = v12;
                        v10 = v12;
                        // branch -> 0xd046
                        // 0xd046
                        result = *(int32_t *)g104;
                        g93 = result;
                        v3 = -2 - result + v10;
                        g3 = ((v3 ^ v10) & (v3 ^ -result)) < 0;
                        g2 = v10 - result < 0;
                        g4 = v10 == result;
                        g1 = v3 <= v10;
                        if (v10 != result) {
                            // 0xd04e
                            __stack_chk_fail();
                            // branch -> 0xd052
                        }
                        // 0xd052
                        g100 = v4;
                        g101 = v5;
                        g102 = v6;
                        g103 = v7;
                        g104 = v8;
                        g105 = v9;
                        v2();
                        return result;
                    }
                    // 0xce3c
                    g101 = 72;
                    duss_log_gen_head();
                    duss_log_print();
                    v17 = 6;
                    g101 = 0;
                    // branch -> 0xcdae
                  lab_0xcdae:
                    // 0xcdae
                    duss_osal_msgq_receive(v16, 0, v21, v22);
                    v29 = v17;
                    if (v16 != 0) {
                        // break -> 0xcdce
                        break;
                    }
                    v28 = v29;
                    // continue -> 0xcdc0
                    continue;
                } else {
                    // 0xcdc6
                    v17 = 6 - v30;
                    // branch -> 0xcdae
                    goto lab_0xcdae;
                }
            }
            // 0xcdce
            if (v29 == 6) {
                // 0xce04
                g98 = v24;
                g99 = 128;
                duss_log_gen_head();
                // branch -> 0xd042
            } else {
                // 0xcdd2
                g98 = v24;
                g99 = 128;
                duss_log_gen_head();
                // branch -> 0xd042
            }
            // 0xd042
            g94 = v12;
            v10 = v12;
            // branch -> 0xd046
            // 0xd046
            result = *(int32_t *)g104;
            g93 = result;
            v3 = -2 - result + v10;
            g3 = ((v3 ^ v10) & (v3 ^ -result)) < 0;
            g2 = v10 - result < 0;
            g4 = v10 == result;
            g1 = v3 <= v10;
            if (v10 != result) {
                // 0xd04e
                __stack_chk_fail();
                // branch -> 0xd052
            }
            // 0xd052
            g100 = v4;
            g101 = v5;
            g102 = v6;
            g103 = v7;
            g104 = v8;
            g105 = v9;
            v2();
            return result;
        }
        // 0xcdce
        if (v27 == 6) {
            // 0xce04
            g98 = v24;
            g99 = 128;
            duss_log_gen_head();
            // branch -> 0xd042
        } else {
            // 0xcdd2
            g98 = v24;
            g99 = 128;
            duss_log_gen_head();
            // branch -> 0xd042
        }
        // 0xd042
        g94 = v12;
        v10 = v12;
        // branch -> 0xd046
    } else {
        // 0xcd42
        v10 = a1;
        // branch -> 0xd046
    }
    // 0xd046
    result = *(int32_t *)g104;
    g93 = result;
    v3 = -2 - result + v10;
    g3 = ((v3 ^ v10) & (v3 ^ -result)) < 0;
    g2 = v10 - result < 0;
    g4 = v10 == result;
    g1 = v3 <= v10;
    if (v10 != result) {
        // 0xd04e
        __stack_chk_fail();
        // branch -> 0xd052
    }
    // 0xd052
    g100 = v4;
    g101 = v5;
    g102 = v6;
    g103 = v7;
    g104 = v8;
    g105 = v9;
    v2();
    return result;
}

// Address range: 0xd05e - 0xd0bf
int32_t function_d05e(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0xd05e
    g99 = a4;
    function_d222();
    return 86;
}

// Address range: 0xd0c0 - 0xd0c7
int32_t function_d0c0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0xd0c0
    return -32;
}

// Address range: 0xd0c8 - 0xd165
int32_t function_d0c8(int32_t a1) {
    // 0xd0c8
    int32_t v1;
    char * v2 = (char *)v1; // bp-188
    g101 = a1;
    int32_t result;
    int32_t v3; // 0xd144
    if (*(char *)(a1 + 0x2928) == 0 || *(int32_t *)(a1 + 0x292c) == 0) {
        // 0xd116
        duss_log_gen_head();
        duss_log_print();
        v3 = g101;
        g102 = v3 + 0x2900;
        v2 = "imu_ctrl_msgq";
        g98 = 64;
        result = (int32_t)&v2;
        g93 = result;
        duss_osal_msgq_create(result, v3 + 0x292c);
        g100 = result;
        g99 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/src/hu_imu_ctrl.c";
        g94 = (int32_t)"hu_imu_ctrl_sched_task_start";
        return result;
    }
    // 0xd0e2
    if (*(int32_t *)(a1 + 0x2930) != 0) {
        // 0xd0e6
        g100 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/src/hu_imu_ctrl.c";
        duss_log_gen_head();
        g93 = 86;
        g94 = 1;
        int32_t v4;
        g98 = &v4;
        g99 = (int32_t)"already started!\n";
        duss_log_print();
        return 86;
    }
    // 0xd116
    duss_log_gen_head();
    duss_log_print();
    v3 = g101;
    g102 = v3 + 0x2900;
    v2 = "imu_ctrl_msgq";
    g98 = 64;
    result = (int32_t)&v2;
    g93 = result;
    duss_osal_msgq_create(result, v3 + 0x292c);
    g100 = result;
    g99 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/src/hu_imu_ctrl.c";
    g94 = (int32_t)"hu_imu_ctrl_sched_task_start";
    return result;
}

// Address range: 0xd166 - 0xd17f
int32_t function_d166(int32_t a1, int32_t a2) {
    // 0xd166
    g93 = 86;
    duss_log_gen_head();
    g99 = 0x819a;
    return 86;
}

// Address range: 0xd180 - 0xd1a3
int32_t function_d180(void) {
    duss_log_print();
    g93 = 86;
    g94 = 0;
    int32_t v1;
    g98 = &v1;
    g99 = 128;
    return 86;
}

// Address range: 0xd1a4 - 0xd1c9
int32_t function_d1a4(int32_t result) {
    // 0xd1a4
    g93 = result;
    duss_log_gen_head();
    function_d21e();
    g99 = 0xad7b;
    return result;
}

// Address range: 0xd1ca - 0xd207
int32_t function_d1ca(int32_t a1, int32_t a2, int32_t a3) {
    duss_osal_timer_create(a1, a2);
    g93 = 86;
    g94 = 1;
    int32_t v1;
    int32_t v2 = &v1; // 0xd1ea_0
    g98 = v2;
    g99 = 128;
    duss_log_gen_head();
    int32_t result; // 0xd204_1
    if (g93 != 0) {
        // 0xd1f4
        g93 = 86;
        g94 = 1;
        g98 = v2;
        g99 = (int32_t)"duss_osal_timer_create() error: %d\n";
        duss_log_print();
        result = g93;
        // branch -> 0xd204
    } else {
        result = 0;
    }
    // 0xd204
    g102 = g101 + 0x2900;
    return result;
}

// Address range: 0xd208 - 0xd217
int32_t function_d208(void) {
    // 0xd208
    duss_osal_msgq_destroy(*(int32_t *)(g102 + 44));
    g98 = 0;
    *(int32_t *)(g102 + 44) = 0;
    g101 += 0x2900;
    g93 = 1;
    return 1;
}

// Address range: 0xd218 - 0xd21d
int32_t function_d218(char a1) {
    // 0xd218
    *(char *)(g101 + 40) = a1;
    function_d22e((int32_t)a1, g94);
    return 0;
}

// Address range: 0xd21e - 0xd221
int32_t function_d21e(void) {
    // 0xd21e
    g99 = 0xad7b;
    return 0xad7b;
}

// Address range: 0xd222 - 0xd22d
int32_t function_d222(void) {
    g93 = 86;
    g94 = 0;
    int32_t v1;
    g98 = &v1;
    g99 += 0xd22c;
    duss_log_print();
    return 86;
}

// Address range: 0xd22e - 0xd2cb
int32_t function_d22e(int32_t a1, int32_t a2) {
    // branch -> 0xd230
    int32_t v1; // R2
    int32_t v2; // 0xd270
    while (true) {
        // 0xd230
        duss_log_gen_head();
        int32_t v3;
        g98 = &v3;
        duss_log_print();
        uint32_t v4;
        g94 = v4;
        int32_t v5 = *(int32_t *)g103; // 0xd25e
        g99 = v5;
        g93 = g100;
        uint32_t v6 = -2 - v5 + v4; // 0xd262
        g3 = ((v6 ^ v4) & (v6 ^ -v5)) < 0;
        g2 = v4 - v5 < 0;
        g4 = v4 == v5;
        g1 = v6 <= v4;
        if (v4 != v5) {
            // 0xd266
            __stack_chk_fail();
            // branch -> 0xd26a
        }
        // 0xd26a
        int32_t v7;
        g100 = v7;
        int32_t v8;
        g101 = v8;
        int32_t v9;
        g102 = v9;
        int32_t v10;
        g103 = v10;
        int32_t v11;
        ((int32_t (*)())v11)();
        v2 = g100 / 0x100000;
        v1 = v2;
        int32_t v12;
        g101 = &v12;
        if (g93 >= 1) {
            // break -> 0xd27e
            break;
        }
        // continue -> 0xd230
    }
    // 0xd27e
    int32_t v13;
    g101 = &v13;
    int16_t v14 = v2;
    // branch -> 0xd288
    while (true) {
        // 0xd288
        *(int16_t *)(g99 + 12) = v14;
        int32_t v15;
        g101 = &v15;
        v14 = v1;
        // branch -> 0xd288
    }
}

// Address range: 0xd2cc - 0xd357
int32_t function_d2cc(int32_t a1, char a2) {
    int32_t v1 = a2;
    int32_t v2 = g101; // 0xd2cc
    g101 = a1;
    int32_t v3 = *(int32_t *)g25; // 0xd2e2
    if ((int32_t)*(char *)(a1 + 0x2934) != v1) {
        // 0xd2ee
        duss_log_gen_head();
        duss_log_print();
        int32_t v4 = g101; // 0xd322
        g101 = v4 + 0x2900;
        *(char *)(v4 + 0x2934) = (char)v1;
        *(char *)(g101 + 53) = 1;
        // branch -> 0xd330
    }
    // 0xd330
    g98 = v3;
    if (v3 != *(int32_t *)g25) {
        // 0xd33a
        __stack_chk_fail();
        // branch -> 0xd33e
    }
    // 0xd33e
    g101 = v2;
    return 0;
}

// Address range: 0xd358 - 0xd40b
char * function_d358(char * a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g101; // 0xd358
    int32_t v2 = 0; // R4
    int32_t v3 = (int32_t)a1; // R6
    memset(a1, 0, 12);
    int32_t fd = open("/dev/modem", O_RDWR);
    g101 = fd;
    if (fd <= 0) {
        // 0xd378
        puts("open modem failed");
        // branch -> 0xd3ee
        // 0xd3ee
        g101 = v1;
        return (char *)-1;
    }
    // 0xd386
    puts("open modem success");
    *(int32_t *)v3 = g101;
    int32_t v4 = ioctl(g101, (int32_t)&g71);
    if (v4 <= -1) {
        // 0xd3a0
        printf("nv ioctl [get_nvram_info] failed return %d\n", v4);
        close(g101);
        // branch -> 0xd3ee
        // 0xd3ee
        g101 = v1;
        return (char *)-2;
    }
    int32_t v5 = (int32_t)mmap((char *)v2, 0, 3, 1, g101, 0); // 0xd3c2_9
    *(int32_t *)(v3 + 4) = v5;
    char * result; // 0xd3f0_2
    if (v5 == -1) {
        // 0xd3cc
        puts("nv mmap failed");
        close(g101);
        result = (char *)-3;
        // branch -> 0xd3ee
    } else {
        // 0xd3e0
        *(int32_t *)(v3 + 8) = 0;
        puts("nvram init");
        result = (char *)v2;
        // branch -> 0xd3ee
    }
    // 0xd3ee
    g101 = v1;
    return result;
}

// Address range: 0xd40c - 0xd42f
int32_t function_d40c(int32_t * a1, int32_t a2) {
    int32_t fd = (int32_t)a1;
    munmap((char *)*(int32_t *)(fd + 4), *(int32_t *)(fd + 8));
    close(*(int32_t *)fd);
    g93 = (int32_t)"nvram_exit";
    return function_14724();
}

// Address range: 0xd430 - 0xd47f
int32_t function_d430(int32_t a1, int32_t * a2) {
    int32_t v1 = g101; // 0xd430
    int32_t v2; // bp-44
    int32_t v3 = &v2;
    g101 = &g21;
    v2 = 0x45000;
    int32_t v4 = 0; // 0xd464
    // branch -> 0xd44e
    while (true) {
        int32_t v5 = *(int32_t *)(v4 + v3); // 0xd44e
        int32_t v6 = v5 + *(int32_t *)(a1 + 4) + 0x80000; // 0xd454
        g101 = v6;
        int32_t v7 = *(int32_t *)v6; // 0xd458
        g101 = v7;
        if (v7 != -0x54325433) {
            // 0xd45e
            if (a2 != NULL) {
                // 0xd460
                *a2 = v5;
                // branch -> 0xd46e
            }
            // 0xd46e
            // branch -> 0xd472
            // 0xd472
            g101 = v1;
            return -1;
        }
        int32_t v8 = v4 + 4; // 0xd464
        if (v8 == 20) {
            // break -> 0xd46a
            break;
        }
        v4 = v8;
        // continue -> 0xd44e
    }
    // 0xd46a
    // branch -> 0xd472
    // 0xd472
    g101 = v1;
    return 0;
}

// Address range: 0xd480 - 0xd63b
char * function_d480(int32_t a1, int32_t stream) {
    int32_t v1 = g101; // 0xd480
    int32_t v2 = *(int32_t *)(a1 + 4); // 0xd48e
    int32_t v3 = *(int32_t *)g25; // 0xd492
    int32_t data;
    memcpy((char *)&data, (char *)(v2 + 0x1c0000), (int32_t)(int16_t)&g65);
    int32_t v4;
    int32_t v5 = v4 & (int32_t)&g90; // 0xd4b6
    duss_util_crc16_append((int32_t)&data, (int32_t)(int16_t)&g65, 0x3692);
    g101 = v5;
    duss_log_gen_head();
    if (stream != 0) {
        // 0xd4e0
        duss_log_print();
        // branch -> 0xd4f2
    }
    // 0xd4f2
    if (v5 != g101) {
        // 0xd4f6
        duss_log_gen_head();
        duss_log_print();
        // branch -> 0xd56e
        // 0xd56e
        g101 = -1;
        // branch -> 0xd5d2
        // 0xd5d2
        if (v3 != *(int32_t *)g25) {
            // 0xd5e0
            __stack_chk_fail();
            // branch -> 0xd5e4
        }
        // 0xd5e4
        g101 = v1;
        return (char *)-1;
    }
    // 0xd524
    g101 = (int32_t)"nvram_update";
    duss_log_gen_head();
    if (stream != 0) {
        // 0xd542
        duss_log_print();
        // branch -> 0xd556
    }
    struct _IO_FILE * file = fopen("/data/nvram/nvram_cp.bin", "wb"); // 0xd55e
    stream = (int32_t)file;
    if (file == NULL) {
        // 0xd566
        puts("open nvram file failed");
        // branch -> 0xd56e
        // 0xd56e
        g101 = -1;
        // branch -> 0xd5d2
        // 0xd5d2
        if (v3 != *(int32_t *)g25) {
            // 0xd5e0
            __stack_chk_fail();
            // branch -> 0xd5e4
        }
        // 0xd5e4
        g101 = v1;
        return (char *)-1;
    }
    int32_t items_written = fwrite((char *)&data, 1, (int32_t)(int16_t)&g65, file); // 0xd57e
    g101 = items_written;
    int32_t puts_rc; // 0xd59a
    if (items_written <= -1) {
        // 0xd59a
        puts_rc = puts((char *)(int32_t)"nvram fwrite failed");
        return (char *)unknown_d5d0(puts_rc);
    }
    int32_t fflush_rc = fflush((struct _IO_FILE *)stream); // 0xd58e
    g101 = fflush_rc;
    if (fflush_rc <= -1) {
        // 0xd596
        // branch -> 0xd59a
        // 0xd59a
        puts_rc = puts((char *)(int32_t)"nvram fflush failed");
        return (char *)unknown_d5d0(puts_rc);
    }
    int32_t v6 = *(int32_t *)g27; // 0xd5a4
    g101 = v6;
    int32_t fd; // 0xd5c6
    if (v6 == 0) {
        // 0xd5a8
        fd = (int32_t)*(int16_t *)(stream + 14);
        // branch -> 0xd5b4
    } else {
        // 0xd5ae
        fd = fileno((struct _IO_FILE *)stream);
        // branch -> 0xd5b4
    }
    // 0xd5b4
    if (fd < 0 ^ ((fd - 2 ^ fd) & 1 - fd) < 0) {
        // 0xd5b8
        g101 = -1;
        int32_t puts_rc2 = puts("nvram fileno failed"); // 0xd5c0
        return (char *)unknown_d5d0(puts_rc2);
    }
    // 0xd5c6
    g101 = fsync(fd);
    fclose((struct _IO_FILE *)stream);
    int32_t v7 = g101; // 0xd5da
    // branch -> 0xd5d2
    // 0xd5d2
    if (v3 != *(int32_t *)g25) {
        // 0xd5e0
        __stack_chk_fail();
        // branch -> 0xd5e4
    }
    // 0xd5e4
    g101 = v1;
    return (char *)v7;
}

// Address range: 0xd63c - 0xd67b
int32_t function_d63c(int32_t a1, int32_t a2) {
    // 0xd63c
    g93 = 0;
    int32_t result = 0; // 0xd674_2
    int32_t v1 = a1 - 1; // 0xd66c
    // branch -> 0xd66c
    while (true) {
        int32_t v2 = v1 + 1; // 0xd66c
        unsigned char v3 = *(char *)v2; // 0xd66c
        int32_t v4 = v3; // 0xd66c
        g99 = v4;
        g1 = v3 > 1;
        if (v3 == 0) {
            // 0xd674
            return result;
        }
        int32_t v5 = v4 - 48; // 0xd644
        int32_t v6; // 0xd668
        if (v5 % 256 > 9) {
            // 0xd652
            if (v4 > 70) {
                uint32_t v7 = v4 - 97; // 0xd65e
                g1 = v7 > 6;
                if (v7 > 5) {
                    // 0xd676
                    g93 = -1;
                    return -1;
                }
                // 0xd666
                v6 = v4 - 87;
                // branch -> 0xd668
            } else {
                // 0xd65a
                v6 = v4 - 55;
                // branch -> 0xd668
            }
          lab_0xd668:;
            int32_t v8 = v6 + 16 * result; // 0xd668
            g93 = v8;
            result = v8;
            v1 = v2;
            // branch -> 0xd66c
            continue;
        } else {
            // 0xd64e
            v6 = v5;
            // branch -> 0xd668
            goto lab_0xd668;
        }
    }
}

// Address range: 0xd67c - 0xd6ad
int32_t function_d67c(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g99; // bp-24
    int32_t v2 = g101; // 0xd67c
    int32_t v3 = g102; // 0xd67c
    g103 = a1;
    g102 = a2;
    g101 = a3;
    int32_t v4 = function_14548(-0x1ff80100, 256); // 0xd68a
    g100 = v4;
    if (v4 == 0) {
        // 0xd6a6
        g93 = -1001;
        g99 = v1;
        g101 = v2;
        g102 = v3;
        return -1001;
    }
    // 0xd692
    g98 = g102;
    g99 = g101;
    function_144c4(v4, g103);
    function_14664((int32_t *)g100, g103);
    g93 = 0;
    g99 = v1;
    g101 = v2;
    g102 = v3;
    return 0;
}

// Address range: 0xd6ae - 0xd6af
int32_t function_d6ae(void) {
    int32_t result = unknown_d6c0(); // 0xd6ae
    g93 = result;
    return result;
}

// Address range: 0xd6b0 - 0xd6e1
int32_t function_d6b0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g99; // bp-24
    int32_t v2 = g100; // 0xd6b0
    int32_t v3 = g101; // 0xd6b0
    int32_t v4 = g102; // 0xd6b0
    g103 = a1;
    g102 = a2;
    g101 = a3;
    int32_t v5 = function_14548(-0x1ff80100, 256); // 0xd6be
    if (v5 == 0) {
        // 0xd6da
        g93 = -1001;
        g99 = v1;
        g100 = v2;
        g101 = v3;
        g102 = v4;
        return -1001;
    }
    // 0xd6c6
    g94 = g103;
    g98 = g102;
    function_14440(v5);
    function_14664((int32_t *)g100, g103);
    g93 = 0;
    g99 = v1;
    g100 = v2;
    g101 = v3;
    g102 = v4;
    return 0;
}

// Address range: 0xd6e2 - 0xd6e3
int32_t function_d6e2(void) {
    int32_t result = unknown_d6f4(); // 0xd6e2
    g93 = result;
    return result;
}

// Address range: 0xd6e4 - 0xd8a1
int32_t function_d6e4(int32_t fd, int32_t a2) {
    int32_t v1 = g101; // 0xd6e4
    int32_t * v2 = (int32_t *)g25; // 0xd6f6_0
    uint32_t v3 = *v2; // 0xd6f6
    int32_t v4;
    int32_t v5 = v4 & (int32_t)&g90; // 0xd6f8
    g101 = v5;
    int32_t v6 = v5 + 7; // 0xd700
    int32_t nbyte = v6; // R6
    uint32_t v7;
    int32_t v8 = v7 % 256; // 0xd706
    int32_t result; // 0xd89c_2
    int32_t v9; // 0xd88c
    if (v6 > 1025) {
        // 0xd70e
        duss_log_gen_head();
        if (v8 != 0) {
            // 0xd7c8
            duss_log_print();
            // branch -> 0xd7cc
        }
        // 0xd7cc
        g93 = -1001;
        // branch -> 0xd886
        // 0xd886
        g94 = g25;
        g98 = v3;
        v9 = *v2;
        g99 = v9;
        g1 = -2 - v9 + v3 <= v3;
        if (v3 != v9) {
            // 0xd892
            __stack_chk_fail();
            result = g93;
            // branch -> 0xd896
        } else {
            result = -1001;
        }
        // 0xd896
        g101 = v1;
        return result;
    }
    int32_t buf = -50;
    int32_t v10 = g99; // 0xd76a
    if (v5 != 0 && v10 != 0) {
        // 0xd76e
        int32_t v11;
        __memcpy_chk((char *)&v11, (char *)v10, v5, (int32_t)&g64);
        // branch -> 0xd77e
    }
    // 0xd77e
    // branch -> 0xd77e
    while (true) {
        int32_t v12 = write(fd, (char *)&buf, nbyte); // 0xd784
        if (v12 == -1) {
            // 0xd78c
            if (*__errno() != 4) {
                // break -> 0xd796
                break;
            }
            // continue -> 0xd77e
            continue;
        } else {
            // 0xd7b8
            if (v12 > -1) {
                // 0xd7d2
                int32_t tp;
                gettimeofday((struct timeval *)&tp, NULL);
                g101 = &g53;
                duss_log_gen_head();
                if (v8 != 0) {
                    // 0xd7fa
                    duss_log_print();
                    // branch -> 0xd810
                }
                int32_t v13 = &buf; // R8
                int32_t v14;
                int32_t v15 = &v14; // R9
                // branch -> 0xd81e
              lab_0xd81e:
                while (true) {
                    // 0xd81e
                    memset((char *)&v14, 0, 64);
                    g91 = -76;
                    int32_t v16 = 16; // R7
                    g101 = 0;
                    int32_t v17 = 0; // 0xd840
                    // branch -> 0xd836
                    while (true) {
                        unsigned char v18 = *(char *)(v13 + v17); // 0xd83a
                        g101 = v17 + 1;
                        sprintf((char *)(3 * v17 + v15), (char *)(int32_t)"%02x ", (int32_t)v18);
                        int32_t v19 = g101; // 0xd846
                        if (v19 < v16) {
                            // 0xd836
                            v17 = v19;
                            // branch -> 0xd836
                            continue;
                        } else {
                            // 0xd84a
                            duss_log_gen_head();
                            if (v8 != 0) {
                                // 0xd86a
                                duss_log_print();
                                // branch -> 0xd87c
                            }
                            int32_t v20 = nbyte - v16; // 0xd87c
                            nbyte = v20;
                            v13 += v16;
                            if (v20 <= 0) {
                                // break (via goto) -> 0xd884
                                goto lab_0xd884;
                            }
                            // continue (via goto) -> 0xd81e
                            goto lab_0xd81e;
                        }
                    }
                  lab_0xd884:
                    // 0xd884
                    g93 = 0;
                    // branch -> 0xd886
                    // 0xd886
                    g94 = g25;
                    g98 = v3;
                    v9 = *v2;
                    g99 = v9;
                    g1 = -2 - v9 + v3 <= v3;
                    if (v3 != v9) {
                        // 0xd892
                        __stack_chk_fail();
                        result = g93;
                        // branch -> 0xd896
                    } else {
                        result = 0;
                    }
                    // 0xd896
                    g101 = v1;
                    return result;
                }
            }
        }
        // 0xd796
        duss_log_gen_head();
        if (v8 != 0) {
            // 0xd7c8
            duss_log_print();
            // branch -> 0xd7cc
        }
        // 0xd7cc
        g93 = -1001;
        // branch -> 0xd886
        // 0xd886
        g94 = g25;
        g98 = v3;
        v9 = *v2;
        g99 = v9;
        g1 = -2 - v9 + v3 <= v3;
        if (v3 != v9) {
            // 0xd892
            __stack_chk_fail();
            result = g93;
            // branch -> 0xd896
        } else {
            result = -1001;
        }
        // 0xd896
        g101 = v1;
        return result;
    }
    // 0xd7cc
    g93 = -1001;
    // branch -> 0xd886
    // 0xd886
    g94 = g25;
    g98 = v3;
    v9 = *v2;
    g99 = v9;
    g1 = -2 - v9 + v3 <= v3;
    if (v3 != v9) {
        // 0xd892
        __stack_chk_fail();
        result = g93;
        // branch -> 0xd896
    } else {
        result = -1001;
    }
    // 0xd896
    g101 = v1;
    return result;
}

// Address range: 0xd8a2 - 0xd8db
int32_t function_d8a2(int32_t a1, int32_t a2, int32_t a3) {
    int32_t result = function_dc66(a1); // 0xd8ac
    g93 = result;
    return result;
}

// Address range: 0xd8dc - 0xd99f
int32_t function_d8dc(int32_t result, char * a2, int32_t a3) {
    int32_t v1 = g101; // 0xd8dc
    g101 = g25;
    g48 = &g49;
    int32_t v2;
    __memcpy_chk((char *)&v2, a2, a3, (int32_t)&g63);
    if (result == 0) {
        // 0xd954
        g101 = (int32_t)"hdvt_push_msg_to_app";
        duss_log_gen_head();
        duss_log_dump_backtrace((int32_t)"DUSS:\t");
        exit(-1);
        // UNREACHABLE
    }
    // 0xd964
    duss_event_send(result);
    if (*(int32_t *)g25 != *(int32_t *)g101) {
        // 0xd976
        __stack_chk_fail();
        // branch -> 0xd97a
    }
    // 0xd97a
    g101 = v1;
    return result;
}

// Address range: 0xd9a0 - 0xdabb
int32_t function_d9a0(int32_t result, char * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7) {
    int32_t v1 = g101; // 0xd9a0
    uint32_t v2;
    g101 = v2 % 256;
    *(int16_t *)&g46 = (int16_t)&g47;
    int32_t v3;
    __memcpy_chk((char *)&v3, a2, a3, (int32_t)&g63);
    if (result == 0) {
        // 0xda02
        g101 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/../hdvt_common/protocol.c";
        duss_log_gen_head();
        // 0xda30
        duss_log_dump_backtrace((int32_t)"DUSS:\t");
        exit(-1);
        // UNREACHABLE
    }
    // 0xda40
    duss_event_send(result);
    duss_log_gen_head();
    if (g101 != 0) {
        // 0xda6c
        duss_log_print();
        // branch -> 0xda7c
    }
    // 0xda7c
    if (*(int32_t *)g25 != *(int32_t *)g25) {
        // 0xda88
        __stack_chk_fail();
        // branch -> 0xda8c
    }
    // 0xda8c
    g101 = v1;
    return result;
}

// Address range: 0xdabc - 0xdae5
int32_t function_dabc(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0xdabc
    g101 = g25;
    return &g50;
}

// Address range: 0xdae6 - 0xdb23
char * function_dae6(int32_t a1) {
    *(int16_t *)(2 * g99 + a1) = (int16_t)(g102 + 1);
    int32_t v1;
    __memcpy_chk((char *)&v1, (char *)g94, g98, (int32_t)&g63);
    g101 = (int32_t)"hdvt_push_msg_to_gnd";
    duss_log_gen_head();
    return (char *)g100;
}

// Address range: 0xdb24 - 0xdb43
int32_t function_db24(int32_t a1) {
    // 0xdb24
    if (a1 != 0) {
        // 0xdb26
        g94 = g100;
        g99 = (int32_t)"event_obj == NULL\n";
        duss_log_print();
        // branch -> 0xdb34
    }
    // 0xdb34
    duss_log_dump_backtrace((int32_t)"DUSS:\t");
    g93 = -1;
    exit(-1);
    // UNREACHABLE
}

// Address range: 0xdb44 - 0xdb61
void function_db44(int32_t a1, int32_t a2) {
    int32_t v1 = g100; // 0xdb44
    g93 = v1;
    int32_t v2;
    g94 = &v2;
    duss_event_send(v1);
    uint32_t v3;
    g98 = v3;
    int32_t v4 = *(int32_t *)g101; // 0xdb50
    g99 = v4;
    uint32_t v5 = -2 - v4 + v3; // 0xdb52
    g3 = ((v5 ^ v3) & (v5 ^ -v4)) < 0;
    g2 = v3 - v4 < 0;
    g4 = v3 == v4;
    g1 = v5 <= v3;
    if (v3 != v4) {
        // 0xdb56
        __stack_chk_fail();
        // branch -> 0xdb5a
    }
    // 0xdb5a
    int32_t v6;
    g100 = v6;
    int32_t v7;
    g101 = v7;
    int32_t v8;
    g102 = v8;
    int32_t v9;
    ((int32_t (*)())v9)();
}

// Address range: 0xdb62 - 0xdb7f
int32_t function_db62(int32_t a1) {
    // 0xdb62
    g100 *= 0x1000;
    int32_t result = g101 + a1; // 0xdb6c
    g94 = result;
    g93 = result;
    return result;
}

// Address range: 0xdb80 - 0xdc65
int32_t function_db80(int32_t a1, char * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9) {
    g101 = a3;
    if (a1 == 0 || a3 < 0 || a3 >= 1009) {
        // 0xdbc0
        duss_log_gen_head();
        uint32_t v1;
        return v1 % 256;
    }
    // 0xdbfe
    if (a2 == NULL || a3 == 0) {
        // 0xdc24
        g101 = 3;
        g101 = function_dcea();
        return &g80;
    }
    // 0xdc1a
    int32_t v2;
    char * v3 = __memcpy_chk((char *)&v2, a2, a3, (int32_t)&g63); // 0xdc20
    return (int32_t)v3;
}

// Address range: 0xdc66 - 0xdce9
int32_t function_dc66(int32_t a1) {
    g93 = g100;
    g94 = 0;
    int32_t v1;
    g98 = &v1;
    g99 = (int32_t)"hdvt:switch send event 0x%x failed, ret=%d, retry=%d";
    duss_log_print();
    g101 = function_dcea();
    return g100;
}

// Address range: 0xdcea - 0xdcef
int32_t function_dcea(void) {
    int32_t v1 = g101; // 0xdcea
    int32_t result = v1 - 1; // 0xdcea
    g3 = ((result ^ v1) & -v1) < 0;
    g1 = v1 != 0;
    g101 = result;
    return result;
}

// Address range: 0xdcf0 - 0xdcf3
int32_t function_dcf0(void) {
    // 0xdcf0
    g93 = -1001;
    return -1001;
}

// Address range: 0xdcf4 - 0xdd4b
int32_t function_dcf4(int32_t a1, int32_t a2, int32_t a3) {
    // 0xdcf4
    g93 = a1;
    uint32_t v1;
    g94 = v1;
    int32_t v2 = *(int32_t *)g105; // 0xdcf8
    g98 = v2;
    uint32_t v3 = -2 - v2 + v1; // 0xdcfc
    g3 = ((v3 ^ v1) & (v3 ^ -v2)) < 0;
    g2 = v1 - v2 < 0;
    g4 = v1 == v2;
    g1 = v3 <= v1;
    if (v1 != v2) {
        // 0xdd00
        __stack_chk_fail();
        // branch -> 0xdd04
    }
    // 0xdd04
    int32_t v4;
    g100 = v4;
    int32_t v5;
    g101 = v5;
    int32_t v6;
    g102 = v6;
    int32_t v7;
    g103 = v7;
    int32_t v8;
    g104 = v8;
    int32_t v9;
    g105 = v9;
    int32_t v10;
    g95 = v10;
    int32_t v11;
    g96 = v11;
    int32_t v12;
    ((int32_t (*)())v12)();
    int32_t v13 = -a1; // 0xdd10
    g94 = v13;
    g102 = &g88;
    g101 = 0xe13c;
    g1 = (g99 & 0x800000) != 0;
    int32_t result = unknown_ddd8(v13, v13);
    g101 = (int32_t)"`h\rI";
    g93 = result;
    return result;
}

// Address range: 0xdd4c - 0xdf5f
int32_t function_dd4c(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11) {
    int32_t v1 = g101; // 0xdd4c
    g101 = a3;
    calloc((int32_t)&g86, 1);
    if (*(int32_t *)g25 != *(int32_t *)g25) {
        // 0xdf06
        __stack_chk_fail();
        // branch -> 0xdf0a
    }
    // 0xdf0a
    g101 = v1;
    return -1003;
}

// Address range: 0xdf60 - 0xe1b7
int32_t function_df60(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    int32_t * v1 = (int32_t *)g25; // 0xdf70_0
    if (*v1 != *v1) {
        // 0xe15c
        __stack_chk_fail();
        // branch -> 0xe160
    }
    // 0xe160
    return -1003;
}

// Address range: 0xe1b8 - 0xe247
int32_t function_e1b8(int32_t * a1, int32_t * a2, int32_t a3) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = g100; // 0xe1b8
    int32_t v3 = g101; // 0xe1b8
    int32_t v4 = *(int32_t *)g25; // 0xe1c6
    int32_t result; // 0xe228
    if (a1 == NULL) {
        // 0xe222
        g101 = -1003;
        // branch -> 0xe224
        // 0xe224
        g98 = v4;
        result = g101;
        if (v4 != *(int32_t *)g25) {
            // 0xe22e
            __stack_chk_fail();
            // branch -> 0xe232
        }
        // 0xe232
        g100 = v2;
        g101 = v3;
        return result;
    }
    int32_t v5 = *a1; // 0xe1d8
    duss_osal_mutex_lock(v5, (int32_t)"duss_osal_timer_update_timeout");
    g101 = v5;
    if (v5 == 0) {
        // 0xe214
        *(int32_t *)(int32_t)a2 = *(int32_t *)(v1 + 80);
        duss_osal_mutex_unlock(*(int32_t *)v1);
        // branch -> 0xe224
    } else {
        // 0xe1e2
        duss_log_gen_head();
        if ((int32_t)*(char *)(v1 + 12) != 0) {
            // 0xe202
            duss_log_print();
            // branch -> 0xe224
        }
    }
    // 0xe224
    g98 = v4;
    result = g101;
    if (v4 != *(int32_t *)g25) {
        // 0xe22e
        __stack_chk_fail();
        // branch -> 0xe232
    }
    // 0xe232
    g100 = v2;
    g101 = v3;
    return result;
}

// Address range: 0xe248 - 0xe24f
void function_e248(int32_t a1) {
    // 0xe248
    g101 += 16;
}

// Address range: 0xe250 - 0xe323
int32_t function_e250(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g101; // 0xe250
    g101 = a2;
    int32_t v2 = *(int32_t *)g25; // 0xe25e
    g103 = g25;
    int32_t result; // 0xe2f0
    if (a1 == 0) {
        // 0xe2ea
        g101 = -1003;
        // branch -> 0xe2ec
        // 0xe2ec
        result = g101;
        if (v2 != *(int32_t *)g103) {
            // 0xe2f6
            __stack_chk_fail();
            // branch -> 0xe2fa
        }
        // 0xe2fa
        g101 = v1;
        return result;
    }
    unsigned char v3 = *(char *)(a1 + 12); // 0xe26a
    g100 = v3;
    g104 = *(int32_t *)(a1 + 56);
    int32_t v4 = 0x1000000 * a2 / 0x1000000;
    duss_log_gen_head();
    if (v3 != 0) {
        // 0xe294
        duss_log_print();
        // branch -> 0xe2a4
    }
    // 0xe2a4
    g102 = 1;
    g99 = &v4;
    int32_t v5 = function_d6e4(g104, 3); // 0xe2b2
    g101 = v5;
    if (v5 == 0) {
        // 0xe2ec
        result = g101;
        if (v2 != *(int32_t *)g103) {
            // 0xe2f6
            __stack_chk_fail();
            // branch -> 0xe2fa
        }
        // 0xe2fa
        g101 = v1;
        return result;
    }
    // 0xe2ba
    duss_log_gen_head();
    if (g100 != 0) {
        // 0xe2da
        duss_log_print();
        // branch -> 0xe2ec
    }
    // 0xe2ec
    result = g101;
    if (v2 != *(int32_t *)g103) {
        // 0xe2f6
        __stack_chk_fail();
        // branch -> 0xe2fa
    }
    // 0xe2fa
    g101 = v1;
    return result;
}

// Address range: 0xe324 - 0xe5cf
int32_t function_e324(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14) {
    int32_t * v1 = (int32_t *)g25; // 0xe334_0
    if (*v1 != *v1) {
        // 0xe552
        __stack_chk_fail();
        // branch -> 0xe556
    }
    // 0xe556
    return -1003;
}

// Address range: 0xe5d0 - 0xeb27
int32_t function_e5d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15, int32_t a16, int32_t a17, int32_t a18, int32_t a19, int32_t a20, int32_t a21, int32_t a22) {
    int32_t v1 = g101; // 0xe5d0
    g102 = a1;
    int32_t v2 = *(int32_t *)(a1 + 36); // 0xe5e4
    int32_t * v3 = (int32_t *)g25; // 0xe5e6_0
    int32_t v4 = *(int32_t *)(a1 + 40); // 0xe5ec
    g103 = v4;
    int32_t v5 = *v3; // bp-56
    g101 = *(int32_t *)(a1 + 32);
    unsigned char v6 = *(char *)(a1 + 12); // 0xe5f6
    g100 = v6;
    int32_t result; // 0xe86e
    if (v4 == 0) {
        char * v7 = "dji/duml/service/hdvt/hdvt_uav/../hdvt_common/protocol.c"; // bp-8668
        int32_t v8 = 128; // R3
        duss_log_gen_head();
        if (v6 != 0) {
            // 0xe61c
            v8 = (int32_t)"sdr_ctrl EEH start reboot/reverse\n";
            duss_log_print();
            // branch -> 0xe62a
        }
        // 0xe62a
        int32_t v9;
        int32_t v10;
        function_e324(g102, 2, 0, v8, (int32_t)v7, (int32_t)"hdvt_sdrs_eehandler", (int32_t)&g20, 0, 0, v10, v2, g25, 0, v9);
        // branch -> 0xe864
    } else {
        // 0xe63c
        system("sdrs_log_cmd log 5");
        duss_log_gen_head();
        if (*(int32_t *)(g102 + 36) == 0) {
            // 0xe648
            // branch -> 0xe864
            // 0xe864
            result = *v3;
            if (v5 != result) {
                // 0xe874
                __stack_chk_fail();
                // branch -> 0xe878
            }
            // 0xe878
            g101 = v1;
            return result;
        }
        // 0xe67c
        if (g100 != 0) {
            // 0xe69c
            duss_log_print();
            // branch -> 0xe6aa
        }
        // 0xe6aa
        g95 = 0;
        int32_t v11 = g101; // 0xe6b4
        // branch -> 0xe826
        while (true) {
            int32_t v12 = function_14548(*(int32_t *)(v11 + 32), *(int32_t *)(v11 + 36)); // 0xe6b8
            g104 = v12;
            int32_t v13; // 0xe824
            if (v12 == 0) {
                // 0xe6c0
                duss_log_gen_head();
                // branch -> 0xe820
            } else {
                // 0xe6f6
                int32_t str;
                snprintf((char *)&str, 256, "%s%s", "/data/dji/sdrs_dump/", (char *)g101);
                duss_log_gen_head();
                if (g100 != 0) {
                    // 0xe72a
                    duss_log_print();
                    // branch -> 0xe73c
                }
                // 0xe73c
                g94 = (int32_t)"wb+";
                struct _IO_FILE * file = fopen((char *)&str, "wb+"); // 0xe742
                g105 = (int32_t)file;
                if (file == NULL) {
                    // 0xe74c
                    g94 = 1;
                    duss_log_gen_head();
                    if (g100 != 0) {
                        // 0xe76e
                        g94 = 1;
                        duss_log_print();
                        // branch -> 0xe81a
                    }
                  lab_0xe81a:
                    // 0xe81a
                    function_14664((int32_t *)g104, g94);
                    // branch -> 0xe820
                } else {
                    // 0xe7fc
                    g102 = 0;
                    g97 = &g30;
                    int32_t v14 = 0; // 0xe78c
                    // branch -> 0xe802
                    while (true) {
                        int32_t v15 = g101; // 0xe802
                        uint32_t v16 = *(int32_t *)(v15 + 36); // 0xe802
                        g103 = v16;
                        int32_t v17 = v14; // 0xe80a
                        if (v14 < v16) {
                            // 0xe780
                            g103 = &g32;
                            g98 = &g32;
                            int32_t data;
                            g99 = &data;
                            function_144c4(g104, v14);
                            g94 = 1;
                            int32_t items_written = fwrite((char *)&data, 1, g103, (struct _IO_FILE *)g105); // 0xe7a2
                            g97 = &g30;
                            if (items_written > -1) {
                                int32_t v18 = g102 + g103; // 0xe7f8
                                g102 = v18;
                                v14 = v18;
                                // branch -> 0xe802
                                continue;
                            } else {
                                // 0xe7ae
                                duss_log_gen_head();
                                if (g100 != 0) {
                                    int32_t err_num = *__errno(); // 0xe7d2
                                    strerror(err_num);
                                    duss_log_print();
                                    // branch -> 0xe7ea
                                }
                                // 0xe7ea
                                fclose((struct _IO_FILE *)g105);
                                function_14664((int32_t *)g104, 1);
                                // branch -> 0xe808
                                // 0xe808
                                if (g102 == *(int32_t *)(g101 + 36)) {
                                  lab_0xe80e:
                                    // 0xe80e
                                    fflush((struct _IO_FILE *)g105);
                                    fclose((struct _IO_FILE *)g105);
                                    // branch -> 0xe81a
                                    goto lab_0xe81a;
                                }
                              lab_0xe820:
                                // 0xe820
                                g95++;
                                g101 += 40;
                                // branch -> 0xe826
                                break;
                            }
                        }
                        // 0xe808
                        if (v17 == *(int32_t *)(v15 + 36)) {
                            goto lab_0xe80e;
                        }
                        goto lab_0xe820;
                    }
                }
                // 0xe820
                g95++;
                v13 = g101 + 40;
                g101 = v13;
                v11 = v13;
                // branch -> 0xe826
                continue;
            }
            // 0xe820
            g95++;
            v13 = g101 + 40;
            g101 = v13;
            v11 = v13;
            // branch -> 0xe826
        }
    }
    // 0xe864
    result = *v3;
    if (v5 != result) {
        // 0xe874
        __stack_chk_fail();
        // branch -> 0xe878
    }
    // 0xe878
    g101 = v1;
    return result;
}

// Address range: 0xeb28 - 0xecef
int32_t function_eb28(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13) {
    int32_t v1 = g101; // 0xeb28
    int32_t * v2 = (int32_t *)g25; // 0xeb36_0
    g101 = -1003;
    if (*v2 != *v2) {
        // 0xeca4
        __stack_chk_fail();
        // branch -> 0xeca8
    }
    // 0xeca8
    g101 = v1;
    return -1003;
}

// Address range: 0xecf0 - 0xee05
int32_t function_ecf0(int32_t a1, int32_t * a2, int32_t a3, int32_t a4) {
    int32_t v1 = (int32_t)a2;
    int32_t v2 = g101; // 0xecf0
    g105 = a4;
    g102 = &g28;
    g104 = g25;
    g103 = a1;
    uint32_t v3;
    g101 = v3 % 256;
    int32_t v4 = *(int32_t *)g25; // 0xed0c
    g100 = v1;
    g99 = v1 + 16;
    if (function_d6e4(a3, 3) != 0) {
        // 0xed2a
        duss_log_gen_head();
        if (g101 != 0) {
            // 0xed92
            duss_log_print();
            // branch -> 0xeddc
        }
        // 0xeddc
        duss_event_resp_err();
        // branch -> 0xedea
        // 0xedea
        if (v4 != *(int32_t *)g104) {
            // 0xedf6
            __stack_chk_fail();
            // branch -> 0xedfa
        }
        // 0xedfa
        g101 = v2;
        return g103;
    }
    // 0xed58
    duss_osal_event_wait(g105);
    if (g105 == 0) {
        // 0xed98
        duss_event_send(g103);
        // branch -> 0xedea
    } else {
        // 0xed68
        duss_log_gen_head();
        if (g101 != 0) {
            // 0xed92
            duss_log_print();
            // branch -> 0xeddc
        }
        // 0xeddc
        duss_event_resp_err();
        // branch -> 0xedea
    }
    // 0xedea
    if (v4 != *(int32_t *)g104) {
        // 0xedf6
        __stack_chk_fail();
        // branch -> 0xedfa
    }
    // 0xedfa
    g101 = v2;
    return g103;
}

// Address range: 0xee06 - 0xee2b
int32_t function_ee06(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t result = (int32_t)a1;
    g101 = *(int32_t *)(result + 20);
    return result;
}

// Address range: 0xee2c - 0xeec3
int32_t function_ee2c(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g101; // 0xee2c
    g101 = a4;
    g100 = a2;
    g103 = g25;
    g102 = a1;
    g99 = a2 + 16;
    if (function_d6e4(a3, 3) == 0) {
        // 0xee96
        duss_event_resp_ok(g102, g100);
        // branch -> 0xee9e
    } else {
        // 0xee58
        duss_log_gen_head();
        if (g101 != 0) {
            // 0xee78
            duss_log_print();
            // branch -> 0xee86
        }
        // 0xee86
        duss_event_resp_err();
        // branch -> 0xee9e
    }
    // 0xee9e
    if (*(int32_t *)g25 != *(int32_t *)g103) {
        // 0xeea6
        __stack_chk_fail();
        // branch -> 0xeeaa
    }
    // 0xeeaa
    g101 = v1;
    return g102;
}

// Address range: 0xeec4 - 0xefa3
int32_t function_eec4(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    int32_t v1 = g101; // 0xeec4
    g101 = a4;
    g104 = a3;
    g103 = g25;
    g105 = (int32_t)*(char *)(a2 + 16);
    g102 = a1;
    g100 = a2;
    duss_log_gen_head();
    if (a4 != 0) {
        // 0xef02
        duss_log_print();
        // branch -> 0xef14
    }
    // 0xef14
    g99 = g100 + 16;
    if (function_d6e4(g104, 3) == 0) {
        // 0xef68
        duss_event_resp_ok(g102, g100);
        // branch -> 0xef70
    } else {
        // 0xef2a
        duss_log_gen_head();
        if (g101 != 0) {
            // 0xef4a
            duss_log_print();
            // branch -> 0xef58
        }
        // 0xef58
        duss_event_resp_err();
        // branch -> 0xef70
    }
    // 0xef70
    if (*(int32_t *)g25 != *(int32_t *)g103) {
        // 0xef78
        __stack_chk_fail();
        // branch -> 0xef7c
    }
    // 0xef7c
    g101 = v1;
    return g102;
}

// Address range: 0xefa4 - 0xf103
int32_t function_efa4(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10) {
    int32_t v1 = g101; // 0xefa4
    g102 = &g28;
    g96 = g25;
    g105 = (int32_t)*(char *)(a2 + 16);
    g104 = (int32_t)*(char *)(a2 + 17);
    g95 = *(int32_t *)(a2 + 18);
    g100 = a2;
    g103 = a1;
    uint32_t v2;
    int32_t v3 = v2 % 256; // 0xefcc
    g101 = v3;
    int32_t v4 = *(int32_t *)g25; // 0xefd0
    duss_log_gen_head();
    if (v3 != 0) {
        // 0xeff2
        duss_log_print();
        // branch -> 0xf00c
    }
    // 0xf00c
    *(int32_t *)(g100 + 16) = g95;
    *(char *)(g100 + 20) = (char)g105;
    *(char *)(g100 + 21) = (char)g104;
    g99 = g100 + 16;
    if (function_d6e4(a3, 3) != 0) {
        // 0xf02e
        duss_log_gen_head();
        if (g101 != 0) {
            // 0xf096
            duss_log_print();
            // branch -> 0xf0ac
        }
        // 0xf0ac
        duss_event_resp_err();
        // branch -> 0xf0ba
        // 0xf0ba
        if (v4 != *(int32_t *)g96) {
            // 0xf0c4
            __stack_chk_fail();
            // branch -> 0xf0c8
        }
        // 0xf0c8
        g101 = v1;
        return g103;
    }
    // 0xf05c
    duss_osal_event_wait(a4);
    if (a4 == 0) {
        // 0xf09c
        duss_event_resp_data(g103, g100, *(int32_t *)(g102 - 16), 4);
        // branch -> 0xf0ba
    } else {
        // 0xf06c
        duss_log_gen_head();
        if (g101 != 0) {
            // 0xf096
            duss_log_print();
            // branch -> 0xf0ac
        }
        // 0xf0ac
        duss_event_resp_err();
        // branch -> 0xf0ba
    }
    // 0xf0ba
    if (v4 != *(int32_t *)g96) {
        // 0xf0c4
        __stack_chk_fail();
        // branch -> 0xf0c8
    }
    // 0xf0c8
    g101 = v1;
    return g103;
}

// Address range: 0xf104 - 0xf207
int32_t function_f104(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7) {
    int32_t v1 = g101; // 0xf104
    g100 = a4;
    g95 = g25;
    g103 = (int32_t)*(char *)(a2 + 16);
    g102 = (int32_t)*(char *)(a2 + 17);
    g105 = *(int32_t *)(a2 + 18);
    g104 = *(int32_t *)(a2 + 22);
    g96 = a1;
    g101 = a2;
    duss_log_gen_head();
    if (a4 != 0) {
        // 0xf14e
        duss_log_print();
        // branch -> 0xf168
    }
    // 0xf168
    *(int32_t *)(g101 + 16) = g105;
    *(int32_t *)(g101 + 20) = g104;
    *(char *)(g101 + 24) = (char)g103;
    *(char *)(g101 + 25) = (char)g102;
    g99 = g101 + 16;
    if (function_d6e4(a3, 3) == 0) {
        // 0xf1c8
        duss_event_resp_ok(g96, g101);
        // branch -> 0xf1d0
    } else {
        // 0xf18a
        duss_log_gen_head();
        if (g100 != 0) {
            // 0xf1aa
            duss_log_print();
            // branch -> 0xf1b8
        }
        // 0xf1b8
        duss_event_resp_err();
        // branch -> 0xf1d0
    }
    // 0xf1d0
    if (*(int32_t *)g25 != *(int32_t *)g95) {
        // 0xf1da
        __stack_chk_fail();
        // branch -> 0xf1de
    }
    // 0xf1de
    g101 = v1;
    return g96;
}

// Address range: 0xf208 - 0xf2d3
int32_t function_f208(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14) {
    int32_t v1 = g25;
    uint32_t v2;
    int32_t result = v2 % 256; // 0xf22c
    int32_t v3;
    g101 = v3;
    g96 = v1;
    int32_t v4;
    if (v4 != 24) {
        // 0xf27c
        return *(int32_t *)v1;
    }
    char * v5 = "dji/duml/service/hdvt/hdvt_uav/../hdvt_common/protocol.c"; // bp-276
    int32_t v6;
    int32_t v7 = &v6; // 0xf25c_0
    duss_log_gen_head();
    if (result != 0) {
        // 0xf266
        duss_log_print();
        return result;
    }
    // 0xf278
    g102 = 0;
    int32_t v8;
    int32_t v9;
    function_f4be(0, 5, v7, 128, (int32_t)v5, (int32_t)"hdvt_compute_sdr_area", (int32_t (*)(int32_t, int32_t))&g73, 0, v9, 0, v8, 0, 0, 0);
    return 0;
}

// Address range: 0xf2d4 - 0xf343
float64_t function_f2d4(float64_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0xf2d4
    int32_t v1;
    uint64_t v2 = (int64_t)v1;
    int32_t v3; // 0xf342_3
    if (g102 == 0) {
        // 0xf2e0
        if (g103 == 0) {
            // 0xf2ec
            sin(a1);
            if (g106 % 4 == 0) {
                // if_f300_0_true
                // branch -> after_if_f300_0
            }
            float64_t v4 = sin((float64_t)v2); // 0xf304
            cos(cos(v4));
            // branch -> 0xf324
            // 0xf324
            if (g106 % 4 == 0) {
                // if_f324_0_true
                // branch -> after_if_f324_0
            }
            // after_if_f324_0
            v3 = (float32_t)cos((float64_t)v2);
            // branch -> 0xf330
        } else {
            v3 = a1;
        }
    } else {
        // 0xf324
        if (g106 % 4 == 0) {
            // if_f324_0_true
            // branch -> after_if_f324_0
        }
        // after_if_f324_0
        v3 = (float32_t)cos((float64_t)v2);
        // branch -> 0xf330
    }
    // 0xf330
    g101 = *(int32_t *)(v3 + 52);
    return (int64_t)v3;
}

// Address range: 0xf344 - 0xf347
int32_t function_f344(int32_t a1) {
    // 0xf344
    g93 = a1;
    int32_t result = *(int32_t *)(g100 + 48); // 0xf346
    g99 = result;
    return result;
}

// Address range: 0xf348 - 0xf4bd
float64_t function_f348(float64_t a1) {
    int32_t v1 = g98 / 0x1000; // R6
    acos(a1);
    int32_t v2 = v1 / 0x1000; // 0xf358
    g100 = v2;
    g101 = *(int32_t *)(v2 + 56);
    int32_t v3;
    int32_t v4 = &v3; // 0xf37e_0
    int32_t v5 = v1 - 24; // R8
    int32_t v6; // 0xf412
    if (g103 != 0) {
        // 0xf3f4
        duss_log_print();
        v6 = g101;
        if (v6 != 0) {
            // 0xf414
            *(int32_t *)v6 = *(int32_t *)(v5 + 4);
            // branch -> 0xf434
            // 0xf434
            duss_log_gen_head();
            return (int64_t)g100;
        }
        // 0xf45e
        if (g95 == 0) {
            // 0xf486
            // branch -> 0xf488
        }
        // 0xf488
        duss_log_gen_head();
        duss_log_print();
        return (int64_t)g100;
    }
    // 0xf38a
    duss_log_gen_head();
    if (v2 != 0) {
        // 0xf3ea
        // branch -> 0xf3f4
        // 0xf3f4
        duss_log_print();
        v6 = g101;
        if (v6 != 0) {
            // 0xf414
            *(int32_t *)v6 = *(int32_t *)(v5 + 4);
            // branch -> 0xf434
            // 0xf434
            duss_log_gen_head();
            return (int64_t)g100;
        }
        // 0xf45e
        if (g95 == 0) {
            // 0xf486
            // branch -> 0xf488
        }
        // 0xf488
        duss_log_gen_head();
        duss_log_print();
        return (int64_t)g100;
    }
    uint16_t v7 = *(int16_t *)24; // 0xf3b4
    if (v7 == 0) {
        // 0xf44c
        g103++;
        g102 = v1 + 32;
        return function_f2d4(0.0, 3, v4, 128, (int32_t)"dji/duml/service/hdvt/hdvt_uav/../hdvt_common/protocol.c");
        // 0xf3c0
        duss_log_gen_head();
        return (int64_t)g100;
    }
    // 0xf434
    duss_log_gen_head();
    return (int64_t)(int32_t)v7;
}

// Address range: 0xf4be - 0xf547
int32_t function_f4be(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t (*a7)(int32_t, int32_t), int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14) {
    // 0xf4be
    g98 = a3;
    uint32_t v1;
    g94 = v1;
    int32_t v2 = *(int32_t *)g96; // 0xf4c0
    g99 = v2;
    uint32_t v3 = -2 - v2 + v1; // 0xf4c6
    g3 = ((v3 ^ v1) & (v3 ^ -v2)) < 0;
    g2 = v1 - v2 < 0;
    g4 = v1 == v2;
    g1 = v3 <= v1;
    if (v1 != v2) {
        // 0xf4ca
        __stack_chk_fail();
        // branch -> 0xf4ce
    }
    // 0xf4ce
    int32_t v4;
    int32_t v5 = v4 & (int32_t)&g90; // 0xf4d2
    g93 = v5;
    int32_t v6;
    g100 = 0x1000000 * v6 / 0x1000000;
    int32_t v7;
    g101 = v7;
    int32_t v8;
    g102 = v8;
    int32_t v9;
    g103 = v9;
    uint32_t v10;
    g104 = v10;
    int32_t v11;
    g105 = v11;
    int32_t v12;
    g95 = v12;
    int32_t v13;
    g96 = v13;
    int32_t v14;
    ((int32_t (*)(int32_t))v14)(v5);
    int32_t v15 = g93; // 0xf4d8
    *(int16_t *)v15 = (int16_t)v15;
    int32_t v16 = g101; // 0xf4e0
    g3 = ((v16 - 26 ^ v16) & v16 + 0x7fffffe6) < 0;
    *(char *)(g93 + g94) = (char)g100;
    int32_t v17 = g101; // 0xf4ee
    int32_t v18 = v17 / 512; // 0xf4ee
    g102 = v18;
    int32_t v19 = g99 & -1 - (0x4000 * v10 | v10 / 0x40000); // 0xf4f0
    int32_t v20 = g100; // 0xf4f4
    int32_t v21 = (int32_t)*(int16_t *)(v20 + 56); // 0xf4fc
    g103 = v21;
    g2 = v19 - v20 < 0;
    g4 = v19 == v20;
    g1 = (v17 & 256) != 0;
    g93 = a5;
    g94 = a6;
    a7(a5, a6);
    *(int32_t *)v18 = g93;
    *(int32_t *)(v18 + 4) = 106;
    *(int32_t *)(v18 + 8) = g101;
    *(int32_t *)(v18 + 12) = v21;
    int32_t result = (int32_t)*(int16_t *)(g93 + 48); // 0xf514
    g101 += 44;
    int32_t v22;
    unknown_f57c(v22, result, (int32_t)*(int16_t *)(g99 + 42));
    return result;
}

// Address range: 0xf548 - 0xf5b3
int32_t function_f548(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    g100 = a1;
    g104 = g25;
    g101 = a2;
    if (a2 != 0) {
        // 0xf592
        g102 = (int32_t)"hdvt_load_country_code";
        g103 = &g75;
        duss_log_gen_head();
        g99 = 0x97d9;
        return 0x97fd;
    }
    char * v1 = "dji/duml/service/hdvt/hdvt_uav/../hdvt_common/protocol.c"; // bp-188
    int32_t v2;
    int32_t v3 = &v2; // 0xf574_0
    int32_t v4 = 128; // R3
    duss_log_gen_head();
    if (a1 != 0) {
        // 0xf580
        v4 = (int32_t)"invalid param";
        duss_log_print();
        // branch -> 0xf58e
    }
    // 0xf58e
    function_f6de(-1003, 1, v3, v4, (int32_t)v1, (int32_t)"hdvt_load_country_code", (int32_t)&g74, 0, 0, v2, 0, 0);
    return (int32_t)"hdvt_load_country_code";
}

// Address range: 0xf5b4 - 0xf6dd
int32_t function_f5b4(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1;
    int32_t v2 = &v1; // 0xf5bc_0
    duss_log_print();
    struct _IO_FILE * file = fopen("/data/dji/wireless_country_code", "r"); // 0xf5ce
    int32_t file2 = (int32_t)file; // R7
    if (file == NULL) {
        // 0xf5d6
        duss_log_gen_head();
        if (g100 != 0) {
            // 0xf5f6
            return (int32_t)__errno();
        }
        // 0xf612
        function_f6de(-1007, 1, v2, 128, (int32_t)"dji/duml/service/hdvt/hdvt_uav/../hdvt_common/protocol.c", (int32_t)"hdvt_load_country_code", (int32_t)&g76, 0, 0, v1, 0, 0);
        return (int32_t)"hdvt_load_country_code";
    }
    // 0xf616
    int32_t v3; // R3
    int32_t v4;
    char * v5;
    char * v6;
    if (fscanf(file, "%s\n", (char **)g101) > -1) {
        // 0xf668
        fclose((struct _IO_FILE *)file2);
        duss_log_gen_head();
        if (g100 != 0) {
            // 0xf68e
            duss_log_print();
            // branch -> 0xf69e
        }
        // 0xf69e
        if (strlen((char *)g101) == 2) {
            // 0xf6dc
            return 0;
        }
        // 0xf6a8
        v3 = 128;
        duss_log_gen_head();
        if (g100 != 0) {
            // 0xf6c8
            duss_log_print();
            return g100;
        }
        v6 = "hdvt_load_country_code";
        v5 = "dji/duml/service/hdvt/hdvt_uav/../hdvt_common/protocol.c";
        v4 = &g78;
    } else {
        // 0xf624
        v3 = 128;
        duss_log_gen_head();
        char * err_str; // 0xf64a
        char * v7;
        if (g100 != 0) {
            int32_t err_num = *__errno(); // 0xf648
            err_str = strerror(err_num);
            v3 = (int32_t)"can not read file %s, errno is %s\n";
            duss_log_print();
            v7 = (char *)(int32_t)"/data/dji/wireless_country_code";
            // branch -> 0xf660
        } else {
            err_str = "hdvt_load_country_code";
            v7 = "dji/duml/service/hdvt/hdvt_uav/../hdvt_common/protocol.c";
        }
        // 0xf660
        fclose((struct _IO_FILE *)file2);
        v6 = err_str;
        v5 = v7;
        v4 = &g77;
        // branch -> 0xf6d6
    }
    int32_t result = (int32_t)v6;
    function_f6de(-1001, 1, v2, v3, (int32_t)v5, result, v4, 0, 0, v1, 0, 0);
    return result;
}

// Address range: 0xf6de - 0xf75b
int32_t function_f6de(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t result, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12) {
    // 0xf6de
    g93 = a1;
    g94 = a2;
    uint32_t v1;
    g98 = v1;
    int32_t v2 = *(int32_t *)g104; // 0xf6e0
    g99 = v2;
    uint32_t v3 = -2 - v2 + v1; // 0xf6e4
    g3 = ((v3 ^ v1) & (v3 ^ -v2)) < 0;
    g2 = v1 - v2 < 0;
    g4 = v1 == v2;
    g1 = v3 <= v1;
    if (v1 != v2) {
        // 0xf6e8
        __stack_chk_fail();
        // branch -> 0xf6ec
    }
    // 0xf6ec
    int32_t v4;
    g100 = v4;
    int32_t v5;
    g101 = v5;
    int32_t v6;
    g102 = v6;
    int32_t v7;
    g103 = v7;
    int32_t v8;
    g104 = v8;
    int32_t v9;
    ((int32_t (*)())v9)();
    int32_t v10 = llvm_bswap_i32(v1); // 0xf714
    int32_t v11 = (int32_t)*(char *)(g100 + 13); // 0xf724
    g99 = v11;
    g101 = (int32_t)*(int16_t *)(v11 + 28);
    g103 = (int32_t)*(int16_t *)(v10 + 26);
    uint16_t v12 = *(int16_t *)(result + 24); // 0xf744
    g101 = v12;
    if (v12 == 0) {
        // 0xf74a
        g99 = (int32_t)*(int16_t *)(v10 + 22);
        // branch -> 0xf758
    }
    // 0xf758
    return result;
}

// Address range: 0xf75c - 0xf8ef
int32_t function_f75c(int32_t a1, char * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10) {
    int32_t v1 = g101; // 0xf75c
    int32_t v2 = *(int32_t *)g25; // 0xf76a
    if (a2 == NULL) {
        // 0xf776
        duss_log_gen_head();
        if (a1 != 0) {
            // 0xf794
            duss_log_print();
            // branch -> 0xf7a2
        }
        // 0xf7a2
        // branch -> 0xf88a
        // 0xf88a
        if (v2 != *(int32_t *)g25) {
            // 0xf894
            __stack_chk_fail();
            // branch -> 0xf898
        }
        // 0xf898
        g101 = v1;
        return -1003;
    }
    // 0xf7a6
    g101 = (int32_t)"hdvt_save_country_code";
    duss_log_gen_head();
    if (a1 != 0) {
        // 0xf7c4
        duss_log_print();
        // branch -> 0xf7da
    }
    // 0xf7da
    g101 = (int32_t)"/data/dji/wireless_country_code";
    struct _IO_FILE * file = fopen("/data/dji/wireless_country_code", "w"); // 0xf7e4
    int32_t file2 = (int32_t)file; // R7
    if (file == NULL) {
        // 0xf7ec
        duss_log_gen_head();
        if (a1 != 0) {
            int32_t err_num = *__errno(); // 0xf810
            strerror(err_num);
            duss_log_print();
            // branch -> 0xf828
        }
        // 0xf828
        // branch -> 0xf88a
        // 0xf88a
        if (v2 != *(int32_t *)g25) {
            // 0xf894
            __stack_chk_fail();
            // branch -> 0xf898
        }
        // 0xf898
        g101 = v1;
        return -1007;
    }
    // 0xf82c
    int32_t v3; // R0
    int32_t v4; // 0xf89a_22
    if (fprintf(file, "%s\n", (char *)(int32_t)a2) > -1) {
        // 0xf882
        fclose((struct _IO_FILE *)file2);
        v3 = 0;
        v4 = 0;
        // branch -> 0xf88a
    } else {
        // 0xf83a
        duss_log_gen_head();
        if (a1 != 0) {
            int32_t err_num2 = *__errno(); // 0xf85e
            strerror(err_num2);
            duss_log_print();
            // branch -> 0xf876
        }
        // 0xf876
        fclose((struct _IO_FILE *)file2);
        v3 = -1001;
        v4 = -1001;
        // branch -> 0xf88a
    }
    // 0xf88a
    int32_t result; // 0xf89a_2
    if (v2 != *(int32_t *)g25) {
        // 0xf894
        __stack_chk_fail();
        result = v3;
        // branch -> 0xf898
    } else {
        result = v4;
    }
    // 0xf898
    g101 = v1;
    return result;
}

// Address range: 0xf8f0 - 0xf977
int32_t function_f8f0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g100; // 0xf8f0
    int32_t v2 = g101; // 0xf8f0
    g98 = -32;
    g101 = 0x94b3;
    uint32_t v3 = *(int32_t *)g25; // 0xf8fc
    g101 = (int32_t)"/data/dji/wireless_country_code";
    int32_t v4; // 0xf94e
    if (unlink("/data/dji/wireless_country_code") > 0xffffffff) {
        // 0xf94c
        g94 = v3;
        v4 = *(int32_t *)g25;
        g99 = v4;
        g93 = 0;
        g1 = -2 - v4 + v3 <= v3;
        if (v3 != v4) {
            // 0xf956
            __stack_chk_fail();
            // branch -> 0xf95a
        }
        // 0xf95a
        g100 = v1;
        g101 = v2;
        return 0;
    }
    // 0xf910
    int32_t v5;
    int32_t v6 = &v5; // 0xf926_0
    g98 = v6;
    duss_log_gen_head();
    if (a1 != 0) {
        int32_t err_num = *__errno(); // 0xf934
        strerror(err_num);
        g98 = v6;
        duss_log_print();
        // branch -> 0xf94c
    }
    // 0xf94c
    g94 = v3;
    v4 = *(int32_t *)g25;
    g99 = v4;
    g93 = 0;
    g1 = -2 - v4 + v3 <= v3;
    if (v3 != v4) {
        // 0xf956
        __stack_chk_fail();
        // branch -> 0xf95a
    }
    // 0xf95a
    g100 = v1;
    g101 = v2;
    return 0;
}

// Address range: 0xf978 - 0xfa9f
int32_t function_f978(int32_t a1, char * a2, int32_t a3, int32_t a4, int32_t a5) {
    int32_t v1 = g101; // 0xf978
    int32_t * v2 = (int32_t *)g25; // 0xf986_0
    int32_t v3 = *v2; // 0xf986
    g101 = a1;
    int32_t v4 = (int32_t)a2; // R6
    int32_t result; // 0xfa5e
    if (a2 == NULL) {
        // 0xf992
        duss_log_gen_head();
        if (a1 != 0) {
            // 0xf9b0
            duss_log_print();
            // branch -> 0xf9be
        }
        // 0xf9be
        result = 2;
        // branch -> 0xfa58
    } else {
        // 0xf9c2
        duss_log_gen_head();
        if (a1 != 0) {
            // 0xf9e0
            duss_log_print();
            // branch -> 0xf9f0
        }
        int32_t v5 = (int32_t)&g22; // R4
        int32_t v6 = 2; // R7
        int32_t v7 = 0; // R8
        int32_t v8 = (int32_t)&g22; // 0xfa26
        // branch -> 0xfa0e
        while (true) {
            int32_t v9 = (int32_t)*(char *)(v8 - 1); // 0xfa0e
            g97 = v9;
            if (v9 + 1 + -1 - (int32_t)*(char *)v4 == 0) {
                int32_t v10 = (int32_t)*(char *)(v4 + 1); // 0xfa1a
                g92 = v10;
                if ((int32_t)*(char *)v8 + 1 + -1 - v10 == 0) {
                    // 0xfa22
                    v6 = (int32_t)*(char *)(v8 + 3);
                    duss_log_gen_head();
                    if (g101 != 0) {
                        // 0xfa3c
                        duss_log_print();
                        // branch -> 0xfa4c
                    }
                }
            }
            int32_t v11 = v7; // 0xfa4c
            v7 = v11 + 1;
            int32_t v12 = v5 + 8; // 0xfa50
            v5 = v12;
            if (v11 == 255) {
                // break -> 0xfa58
                break;
            }
            v8 = v12;
            // continue -> 0xfa0e
        }
        // 0xfa58
        result = v6;
        // branch -> 0xfa58
    }
    // 0xfa58
    g98 = v3;
    if (v3 != *v2) {
        // 0xfa64
        __stack_chk_fail();
        // branch -> 0xfa68
    }
    // 0xfa68
    g101 = v1;
    return result;
}

// Address range: 0xfaa0 - 0xfcab
int32_t function_faa0(char * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int16_t a6, int32_t (*a7)(int32_t), int32_t (*a8)(int32_t, int32_t, int32_t), int32_t a9, int16_t a10, int16_t a11, int16_t a12, int32_t a13, int32_t a14, int32_t a15, int32_t a16, int32_t a17) {
    int32_t v1 = g101; // 0xfaa0
    int32_t v2 = *(int32_t *)g25; // 0xfaac
    g101 = (int32_t)a1;
    if (a1 == NULL) {
        // 0xfab6
        duss_log_gen_head();
        // branch -> 0xfbde
        // 0xfbde
        // branch -> 0xfc4c
        // 0xfc4c
        if (v2 != *(int32_t *)g25) {
            // 0xfc54
            __stack_chk_fail();
            // branch -> 0xfc58
        }
        // 0xfc58
        g101 = v1;
        return -1001;
    }
    // 0xfaea
    duss_log_gen_head();
    if (a2 != 0) {
        // 0xfb0a
        duss_log_print();
        // branch -> 0xfb18
    }
    // 0xfb18
    int32_t v3;
    int32_t v4 = &v3; // 0xfb1c_0
    memset((char *)&v3, 0, 28);
    int32_t v5;
    int32_t v6 = &v5; // 0xfb26_0
    memset((char *)&v5, 0, 28);
    dji_sdr_secret_code_read(v4, 28);
    if (&v3 <= NULL) {
        // 0xfb38
        duss_log_gen_head();
        if (a2 != 0) {
            // 0xfb58
            duss_log_print();
            // branch -> 0xfb74
        }
        // 0xfb74
        dji_sdr_secret_code_generate(v4, 28);
        duss_log_gen_head();
        if (a2 != 0) {
            // 0xfbda
            duss_log_print();
            // branch -> 0xfbde
        }
        // 0xfbde
        // branch -> 0xfc4c
        // 0xfc4c
        if (v2 != *(int32_t *)g25) {
            // 0xfc54
            __stack_chk_fail();
            // branch -> 0xfc58
        }
        // 0xfc58
        g101 = v1;
        return -1001;
    }
    // 0xfba2
    dji_sdr_secret_code_generate(v6, 28);
    int32_t v7; // R0
    int32_t v8; // bp+210
    if (&v5 > (int32_t *)-1) {
        int32_t v9 = g101; // 0xfbe6
        *(int32_t *)(v9 + 4) = *(int32_t *)(v6 + 4);
        *(int32_t *)v9 = *(int32_t *)v6;
        int32_t v10 = v9 + 8; // 0xfbf6
        int32_t v11 = v6 + 8; // 0xfbf8
        // branch -> 0xfbec
        int32_t v12;
        while (v11 != (int32_t)&v12) {
            // 0xfbec
            v9 = v10;
            v6 = v11;
            *(int32_t *)(v9 + 4) = *(int32_t *)(v6 + 4);
            *(int32_t *)v9 = *(int32_t *)v6;
            v10 = v9 + 8;
            v11 = v6 + 8;
            // continue -> 0xfbec
        }
        // 0xfbfe
        *(int32_t *)v10 = *(int32_t *)v11;
        int32_t v13 = g101 + 28; // 0xfc04
        g101 = v13;
        int32_t v14;
        int32_t v15 = &v14; // R7
        int32_t v16 = v4; // 0xfc08
        *(int32_t *)v13 = *(int32_t *)v16;
        *(int32_t *)(g101 + 4) = *(int32_t *)(v16 + 4);
        int32_t v17 = g101 + 8; // 0xfc10
        g101 = v17;
        int32_t v18 = v16 + 8; // 0xfc12
        // branch -> 0xfc08
        while (v18 != v15) {
            // 0xfc08
            v16 = v18;
            *(int32_t *)v17 = *(int32_t *)v16;
            *(int32_t *)(g101 + 4) = *(int32_t *)(v16 + 4);
            v17 = g101 + 8;
            g101 = v17;
            v18 = v16 + 8;
            // continue -> 0xfc08
        }
        // 0xfc18
        *(int32_t *)v17 = *(int32_t *)v15;
        duss_log_gen_head();
        if (a2 != 0) {
            // 0xfc3c
            duss_log_print();
            // branch -> 0xfc4a
        }
        // 0xfc4a
        v7 = 0;
        v8 = 0;
        // branch -> 0xfc4c
    } else {
        // 0xfbae
        duss_log_gen_head();
        if (a2 != 0) {
            // 0xfbda
            duss_log_print();
            // branch -> 0xfbde
        }
        // 0xfbde
        v7 = -1001;
        v8 = -1001;
        // branch -> 0xfc4c
    }
    // 0xfc4c
    int32_t result; // 0xfc5a_2
    if (v2 != *(int32_t *)g25) {
        // 0xfc54
        __stack_chk_fail();
        result = v7;
        // branch -> 0xfc58
    } else {
        result = v8;
    }
    // 0xfc58
    g101 = v1;
    return result;
}

// Address range: 0xfcac - 0xff4d
char * function_fcac(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int64_t a11) {
    int32_t * v1 = (int32_t *)g25; // 0xfcbe_0
    if (*v1 != *v1) {
        // 0xff42
        __stack_chk_fail();
        // branch -> 0xff46
    }
    // 0xff46
    return "\x15\xfc\xff\xff\x32\xe1";
}

// Address range: 0xff4e - 0xffbb
int32_t function_ff4e(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15) {
    // 0xff4e
    return unknown_101bc(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

// Address range: 0xffbc - 0x100b7
int32_t function_ffbc(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g101; // 0xffbc
    int32_t v2 = *(int32_t *)g25; // 0xffca
    g101 = a2;
    if (a2 != 28) {
        // 0xffd8
        duss_log_gen_head();
        if (a3 != 0) {
            // 0xfff8
            duss_log_print();
            // branch -> 0x10044
        }
        // 0x10044
        // branch -> 0x1007a
        // 0x1007a
        if (v2 != *(int32_t *)g25) {
            // 0x10082
            __stack_chk_fail();
            // branch -> 0x10086
        }
        // 0x10086
        g101 = v1;
        return -1001;
    }
    // 0x1000c
    dji_sdr_secret_code_save();
    g101 = a1;
    int32_t v3; // R0
    int32_t v4; // 0x10088_22
    if (a1 == 0) {
        // 0x1004a
        duss_log_gen_head();
        if (a3 != 0) {
            // 0x1006a
            duss_log_print();
            // branch -> 0x10078
        }
        // 0x10078
        v3 = 0;
        v4 = 0;
        // branch -> 0x1007a
    } else {
        // 0x10014
        duss_log_gen_head();
        if (a3 != 0) {
            // 0x10034
            duss_log_print();
            // branch -> 0x10044
        }
        // 0x10044
        v3 = -1001;
        v4 = -1001;
        // branch -> 0x1007a
    }
    // 0x1007a
    int32_t result; // 0x10088_2
    if (v2 != *(int32_t *)g25) {
        // 0x10082
        __stack_chk_fail();
        result = v3;
        // branch -> 0x10086
    } else {
        result = v4;
    }
    // 0x10086
    g101 = v1;
    return result;
}

// Address range: 0x100b8 - 0x10253
int32_t function_100b8(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10) {
    int32_t * v1 = (int32_t *)g25; // 0x100c8_0
    if (*v1 != *v1) {
        // 0x1020c
        __stack_chk_fail();
        // branch -> 0x10210
    }
    // 0x10210
    return -1003;
}

// Address range: 0x10254 - 0x102e3
int32_t function_10254(int32_t * a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    g101 = a2;
    int32_t v1 = (int32_t)a1; // R6
    g104 = g25;
    if (a1 == NULL || a2 == 0) {
        // 0x10278
        int32_t v2;
        g98 = &v2;
        duss_log_gen_head();
        return function_103ae(a3, 0);
    }
    // 0x102d2
    int32_t v3;
    memset((char *)&v3, 0, 32);
    int32_t v4;
    memset((char *)&v4, 0, 32);
    int32_t v5 = g101; // 0x102c0
    *(int32_t *)v1 = *(int32_t *)(v5 + 84);
    int32_t v6 = v1 + 4; // 0x102d818
    int32_t v7 = v5 + 88;
    int32_t v8 = v7 + 4; // 0x102d2
    int32_t result = v8; // R0
    *(int32_t *)v6 = *(int32_t *)v7;
    // branch -> 0x102d2
    while (v8 != v5 + 100) {
        // 0x102d2
        v6 += 4;
        v7 = result;
        v8 = v7 + 4;
        result = v8;
        *(int32_t *)v6 = *(int32_t *)v7;
        // continue -> 0x102d2
    }
    // 0x102de
    return result;
}

// Address range: 0x102e4 - 0x103a9
int32_t function_102e4(int32_t a1, int32_t * a2, int32_t a3, int32_t a4) {
    // 0x102e4
    g101 += 132;
    abort();
    // UNREACHABLE
}

// Address range: 0x103aa - 0x103ad
void function_103aa(void) {
    // 0x103aa
    duss_log_print();
}

// Address range: 0x103ae - 0x10453
int32_t function_103ae(int32_t a1, int32_t a2) {
    int32_t result = function_1045a(-1001, a2); // 0x103b2
    g93 = result;
    return result;
}

// Address range: 0x10454 - 0x10457
void function_10454(void) {
    // 0x10454
    duss_log_print();
}

// Address range: 0x10458 - 0x10459
int32_t function_10458(void) {
    // 0x10458
    g93 = 0;
    return 0;
}

// Address range: 0x1045a - 0x104bf
int32_t function_1045a(int32_t a1, int32_t a2) {
    // 0x1045a
    g93 = a1;
    uint32_t v1;
    g94 = v1;
    int32_t v2 = *(int32_t *)g104; // 0x1045c
    g99 = v2;
    uint32_t v3 = -2 - v2 + v1; // 0x10460
    g3 = ((v3 ^ v1) & (v3 ^ -v2)) < 0;
    g2 = v1 - v2 < 0;
    g4 = v1 == v2;
    g1 = v3 <= v1;
    if (v1 != v2) {
        // 0x10464
        __stack_chk_fail();
        // branch -> 0x10468
    }
    // 0x10468
    int32_t v4;
    g100 = v4;
    int32_t v5;
    g101 = v5;
    int32_t v6;
    g102 = v6;
    int32_t v7;
    g103 = v7;
    int32_t v8;
    g104 = v8;
    int32_t v9;
    ((int32_t (*)())v9)();
    uint16_t v10 = *(int16_t *)((int32_t)*(int16_t *)(g103 + 54) + 54); // 0x10498
    g99 = (int32_t)*(int16_t *)((int32_t)v10 + 52);
    int32_t result = (int32_t)*(int16_t *)(g100 + 50); // 0x104bc
    g93 = result;
    return result;
}

// Address range: 0x104c0 - 0x105bf
int32_t function_104c0(int32_t a1, int32_t a2) {
    int32_t v1 = g101; // 0x104c0
    uint32_t v2 = *(int32_t *)g25; // 0x104cc
    g101 = a1;
    int32_t result; // 0x10590_2
    int32_t v3; // 0x10584
    if (a1 == 0) {
        // 0x104d8
        duss_log_gen_head();
        if (a2 != 0) {
            // 0x104f8
            duss_log_print();
            // branch -> 0x10582
        }
        // 0x10582
        g93 = -1001;
        v3 = *(int32_t *)g25;
        g99 = v3;
        g1 = -2 - v3 + v2 <= v2;
        if (v2 != v3) {
            // 0x1058a
            __stack_chk_fail();
            result = g93;
            // branch -> 0x1058e
        } else {
            result = -1001;
        }
        // 0x1058e
        g101 = v1;
        return result;
    }
    int32_t v4 = a1 + 16; // 0x1050c
    dji_sdr_session_key_decrypt(v4, 32, a1, 32);
    g101 = v4;
    duss_log_gen_head();
    if (a2 != 0) {
        // 0x1053c
        duss_log_print();
        // branch -> 0x10582
    }
    // 0x10582
    g93 = -1001;
    v3 = *(int32_t *)g25;
    g99 = v3;
    g1 = -2 - v3 + v2 <= v2;
    if (v2 != v3) {
        // 0x1058a
        __stack_chk_fail();
        result = g93;
        // branch -> 0x1058e
    } else {
        result = -1001;
    }
    // 0x1058e
    g101 = v1;
    return result;
}

// Address range: 0x105c0 - 0x106b3
int32_t function_105c0(char * a1, char * a2, int32_t a3) {
    int32_t v1 = g100; // 0x105c0
    int32_t v2 = g101; // 0x105c0
    g101 = (int32_t)a1;
    int32_t v3 = *(int32_t *)g25; // 0x105d0
    int32_t size = &g84; // R8
    int32_t str = (int32_t)a2; // R4
    if (a2 == NULL || a1 == NULL) {
        // 0x10682
        // branch -> 0x10686
        // 0x10686
        if (v3 != *(int32_t *)g25) {
            // 0x1068e
            __stack_chk_fail();
            // branch -> 0x10692
        }
        // 0x10692
        g100 = v1;
        g101 = v2;
        return -1;
    }
    // 0x105ec
    memset(a2, 0, a3);
    fflush((struct _IO_FILE *)(g26 + 84));
    struct _IO_FILE * stream = popen((char *)g101, "r"); // 0x10604
    int32_t stream2 = (int32_t)stream; // 0x10604_5
    int32_t v4; // R0
    int32_t v5; // bp+214
    if (stream == NULL) {
        // 0x10610
        duss_log_gen_head();
        if (g99 != 0) {
            // 0x10630
            __errno();
            int32_t err_num = *__errno(); // 0x1063a
            strerror(err_num);
            duss_log_print();
            // branch -> 0x10682
        }
        // 0x10682
        v4 = -1;
        v5 = -1;
        // branch -> 0x10686
    } else {
        // 0x1060c
        if (size != 0 && !((size < 0 ^ ((size - 2 ^ size) & 1 - size) < 0))) {
            // 0x10656
            if (fgets((char *)str, size, stream) != NULL) {
                while (true) {
                    int32_t str2 = str + strlen((char *)str); // 0x10670
                    str = str2;
                    int32_t len = strlen((char *)str2); // 0x10674
                    int32_t size2 = size - len; // 0x10678
                    if (size != len && !((size2 < 0 ^ ((size2 - 2 ^ size2) & 1 - size2) < 0))) {
                        // 0x1066a
                        if (fgets((char *)str, size2, (struct _IO_FILE *)stream2) == NULL) {
                            // break -> 0x10660
                            break;
                        }
                        // continue -> 0x1066a
                        continue;
                    }
                }
                // 0x10660
                // branch -> 0x10660
                // 0x10660
                pclose((struct _IO_FILE *)stream2);
                // branch -> 0x10686
                // 0x10686
                if (v3 != *(int32_t *)g25) {
                    // 0x1068e
                    __stack_chk_fail();
                    // branch -> 0x10692
                }
                // 0x10692
                g100 = v1;
                g101 = v2;
                return 0;
            }
            // 0x10660
            // branch -> 0x10660
        }
        // 0x10660
        pclose((struct _IO_FILE *)stream2);
        v4 = 0;
        v5 = 0;
        // branch -> 0x10686
    }
    // 0x10686
    int32_t result; // 0x10694_2
    if (v3 != *(int32_t *)g25) {
        // 0x1068e
        __stack_chk_fail();
        result = v4;
        // branch -> 0x10692
    } else {
        result = v5;
    }
    // 0x10692
    g100 = v1;
    g101 = v2;
    return result;
}

// Address range: 0x106b4 - 0x1090b
int32_t function_106b4(char * a1, int32_t a2, char * a3, uint32_t a4) {
    int32_t v1 = g100; // 0x106b4
    int32_t v2 = g101; // 0x106b4
    int32_t v3 = g104; // 0x106b4
    int32_t v4 = g105; // 0x106b4
    g101 = a4;
    g105 = (int32_t)a1;
    int32_t v5 = *(int32_t *)g25; // 0x106c6
    uint32_t v6;
    int32_t v7 = v6 % 256; // 0x106cc
    g100 = v7;
    g104 = (int32_t)a3;
    if (a3 == NULL || a4 > 31 || a1 == NULL || a2 == 0) {
        // 0x106ea
        duss_log_gen_head();
        // branch -> 0x10830
        // 0x10830
        // branch -> 0x108ba
        // 0x108ba
        if (v5 != *(int32_t *)g25) {
            // 0x108c6
            __stack_chk_fail();
            // branch -> 0x108ca
        }
        // 0x108ca
        g100 = v1;
        g101 = v2;
        g104 = v3;
        g105 = v4;
        return -1001;
    }
    // 0x1071a
    g99 = v7;
    int32_t str;
    int32_t v8 = function_105c0("cat /proc/cmdline", (char *)&str, (int32_t)(int16_t)&g84); // 0x10726
    if (v8 <= -1) {
        // 0x1072e
        duss_log_gen_head();
        if (g100 != 0) {
            // 0x10750
            duss_log_print();
            // branch -> 0x10830
        }
        // 0x10830
        // branch -> 0x108ba
        // 0x108ba
        if (v5 != *(int32_t *)g25) {
            // 0x108c6
            __stack_chk_fail();
            // branch -> 0x108ca
        }
        // 0x108ca
        g100 = v1;
        g101 = v2;
        g104 = v3;
        g105 = v4;
        return -1001;
    }
    // 0x10760
    int32_t str2;
    memset((char *)&str2, 0, 32);
    __memcpy_chk((char *)&str2, (char *)g104, g101, 32);
    duss_log_gen_head();
    if (g100 != 0) {
        // 0x10798
        duss_log_print();
        // branch -> 0x107a8
    }
    char * substr_pos = strstr((char *)&str, (char *)&str2); // 0x107ac
    if (substr_pos == NULL) {
        // 0x107b2
        duss_log_gen_head();
        if (g100 != 0) {
            // 0x107d4
            // branch -> 0x1082c
            // 0x1082c
            duss_log_print();
            // branch -> 0x10830
        }
        // 0x10830
        // branch -> 0x108ba
        // 0x108ba
        if (v5 != *(int32_t *)g25) {
            // 0x108c6
            __stack_chk_fail();
            // branch -> 0x108ca
        }
        // 0x108ca
        g100 = v1;
        g101 = v2;
        g104 = v3;
        g105 = v4;
        return -1001;
    }
    int32_t v9 = g101 + (int32_t)substr_pos; // 0x107e2
    int32_t v10 = v9; // 0x107f4
    // branch -> 0x107e6
    char * v11; // 0x107ea_0
    int32_t v12; // R0
    int32_t result; // 0x108d0_2
    int32_t v13; // 0x108d0_25
    int32_t v14; // 0x10872
    int32_t v15; // 0x10876
    int32_t v16; // 0x10836
    int32_t v17; // 0x10836
    int32_t v18; // 0x107f6
    while (true) {
        // 0x107e6
        g101 = v10 - v9;
        v11 = (char *)v10;
        char v19 = *v11; // 0x107ea
        if (v19 != 32) {
            // 0x107fa
            if (v19 == 10) {
                // break -> 0x107f2
                break;
            }
            v10++;
            // continue -> 0x107e6
            continue;
        }
        // 0x107f2
        *v11 = 0;
        v18 = g101;
        if (v18 == 0) {
            // 0x10800
            duss_log_gen_head();
            if (g100 != 0) {
                // 0x10820
                // branch -> 0x1082c
                // 0x1082c
                duss_log_print();
                // branch -> 0x10830
            }
            // 0x10830
            v12 = -1001;
            v13 = -1001;
            // branch -> 0x108ba
        } else {
            // 0x10836
            v16 = a2;
            v17 = v16 - 1;
            v15 = v18;
            if (v18 != v17 && -1 - v16 + v18 <= v18) {
                // 0x1083e
                g101 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/../hdvt_common/protocol.c";
                duss_log_gen_head();
                if (g100 != 0) {
                    // 0x1085e
                    duss_log_print();
                    // branch -> 0x10872
                }
                // 0x10872
                v14 = v17;
                g101 = v14;
                v15 = v14;
                // branch -> 0x10874
            }
            // 0x10874
            memcpy((char *)g105, (char *)v9, v15);
            *(char *)(g105 + g101) = 0;
            duss_log_gen_head();
            if (g100 != 0) {
                // 0x108a4
                duss_log_print();
                // branch -> 0x108b8
            }
            // 0x108b8
            v12 = 0;
            v13 = 0;
            // branch -> 0x108ba
        }
        // 0x108ba
        if (v5 != *(int32_t *)g25) {
            // 0x108c6
            __stack_chk_fail();
            result = v12;
            // branch -> 0x108ca
        } else {
            result = v13;
        }
        // 0x108ca
        g100 = v1;
        g101 = v2;
        g104 = v3;
        g105 = v4;
        return result;
    }
    // 0x107f2
    *v11 = 0;
    v18 = g101;
    if (v18 == 0) {
        // 0x10800
        duss_log_gen_head();
        if (g100 != 0) {
            // 0x10820
            // branch -> 0x1082c
            // 0x1082c
            duss_log_print();
            // branch -> 0x10830
        }
        // 0x10830
        v12 = -1001;
        v13 = -1001;
        // branch -> 0x108ba
    } else {
        // 0x10836
        v16 = a2;
        v17 = v16 - 1;
        v15 = v18;
        if (v18 != v17 && -1 - v16 + v18 <= v18) {
            // 0x1083e
            g101 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/../hdvt_common/protocol.c";
            duss_log_gen_head();
            if (g100 != 0) {
                // 0x1085e
                duss_log_print();
                // branch -> 0x10872
            }
            // 0x10872
            v14 = v17;
            g101 = v14;
            v15 = v14;
            // branch -> 0x10874
        }
        // 0x10874
        memcpy((char *)g105, (char *)v9, v15);
        *(char *)(g105 + g101) = 0;
        duss_log_gen_head();
        if (g100 != 0) {
            // 0x108a4
            duss_log_print();
            // branch -> 0x108b8
        }
        // 0x108b8
        v12 = 0;
        v13 = 0;
        // branch -> 0x108ba
    }
    // 0x108ba
    if (v5 != *(int32_t *)g25) {
        // 0x108c6
        __stack_chk_fail();
        result = v12;
        // branch -> 0x108ca
    } else {
        result = v13;
    }
    // 0x108ca
    g100 = v1;
    g101 = v2;
    g104 = v3;
    g105 = v4;
    return result;
}

// Address range: 0x1090c - 0x10933
void function_1090c(int32_t a1, int32_t a2, int32_t a3) {
    // 0x1090c
    g101 = (int32_t)*(int16_t *)(g102 + 26);
}

// Address range: 0x10934 - 0x10b0b
int32_t function_10934(int32_t * a1, char * a2, uint32_t a3) {
    int32_t v1 = g100; // 0x10934
    int32_t v2 = g101; // 0x10934
    int32_t v3 = g102; // 0x10934
    int32_t v4 = g103; // 0x10934
    int32_t v5 = g104; // 0x10934
    int32_t v6 = g105; // 0x10934
    g103 = a3;
    g102 = (int32_t)a1;
    int32_t v7 = *(int32_t *)g25; // 0x10948
    int32_t v8 = g99; // 0x1094a
    g100 = v8;
    g104 = (int32_t)a2;
    g105 = g25;
    if (a2 == NULL || a1 == NULL || a3 > 31) {
        // 0x1095c
        duss_log_gen_head();
        if (v8 != 0) {
            // 0x109c8
            duss_log_print();
            // branch -> 0x10a50
        }
        // 0x10a50
        // branch -> 0x10aaa
        // 0x10aaa
        if (v7 != *(int32_t *)g105) {
            // 0x10ab6
            __stack_chk_fail();
            // branch -> 0x10aba
        }
        // 0x10aba
        g100 = v1;
        g101 = v2;
        g102 = v3;
        g103 = v4;
        g104 = v5;
        g105 = v6;
        return -1001;
    }
    // 0x1098a
    int32_t str;
    int32_t v9 = function_105c0("cat /proc/cmdline", (char *)&str, (int32_t)(int16_t)&g84); // 0x10994
    if (v9 <= -1) {
        // 0x1099c
        duss_log_gen_head();
        if (g100 != 0) {
            // 0x109c8
            duss_log_print();
            // branch -> 0x10a50
        }
        // 0x10a50
        // branch -> 0x10aaa
        // 0x10aaa
        if (v7 != *(int32_t *)g105) {
            // 0x10ab6
            __stack_chk_fail();
            // branch -> 0x10aba
        }
        // 0x10aba
        g100 = v1;
        g101 = v2;
        g102 = v3;
        g103 = v4;
        g104 = v5;
        g105 = v6;
        return -1001;
    }
    // 0x109ce
    int32_t str2;
    g101 = &str2;
    memset((char *)&str2, 0, 32);
    __memcpy_chk((char *)&str2, (char *)g104, g103, 32);
    duss_log_gen_head();
    if (g100 != 0) {
        // 0x10a06
        duss_log_print();
        // branch -> 0x10a16
    }
    char * substr_pos = strstr((char *)&str, (char *)&str2); // 0x10a1a
    int32_t v10; // R0
    int32_t v11; // 0x10ac0_26
    if (substr_pos == NULL) {
        // 0x10a20
        duss_log_gen_head();
        if (g100 != 0) {
            // 0x10a40
            duss_log_print();
            // branch -> 0x10a50
        }
        // 0x10a50
        v10 = -1001;
        v11 = -1001;
        // branch -> 0x10aaa
    } else {
        int32_t v12 = g103 + (int32_t)substr_pos; // 0x10a56
        int32_t v13 = v12; // 0x10a5a
        // branch -> 0x10a5a
        char * v14;
        while (true) {
            // 0x10a5a
            v14 = (char *)v13;
            char v15 = *v14; // 0x10a5c
            if (v15 != 32) {
                // 0x10a90
                if (v15 == 10) {
                    // break -> 0x10a64
                    break;
                }
                v13++;
                // continue -> 0x10a5a
                continue;
            }
            // 0x10a64
            *v14 = 0;
            *(int32_t *)g102 = function_d63c(v12, v13);
            duss_log_gen_head();
            if (g100 != 0) {
                // 0x10a96
                duss_log_print();
                // branch -> 0x10aa8
            }
            // 0x10aa8
            // branch -> 0x10aaa
        }
        // 0x10a64
        *v14 = 0;
        *(int32_t *)g102 = function_d63c(v12, v13);
        duss_log_gen_head();
        if (g100 != 0) {
            // 0x10a96
            duss_log_print();
            // branch -> 0x10aa8
        }
        // 0x10aa8
        v10 = 0;
        v11 = 0;
        // branch -> 0x10aaa
    }
    // 0x10aaa
    int32_t result; // 0x10ac0_2
    if (v7 != *(int32_t *)g105) {
        // 0x10ab6
        __stack_chk_fail();
        result = v10;
        // branch -> 0x10aba
    } else {
        result = v11;
    }
    // 0x10aba
    g100 = v1;
    g101 = v2;
    g102 = v3;
    g103 = v4;
    g104 = v5;
    g105 = v6;
    return result;
}

// Address range: 0x10b0c - 0x10c43
int32_t function_10b0c(int32_t * a1, int32_t a2, int32_t a3) {
    int32_t v1 = g101; // 0x10b0c
    int32_t v2 = g102; // 0x10b0c
    int32_t v3 = g103; // 0x10b0c
    g102 = g25;
    g103 = (int32_t)a1;
    int32_t v4 = *(int32_t *)g25; // 0x10b1e
    g100 = a2;
    int32_t str;
    g101 = &str;
    g99 = a2;
    int32_t v5 = function_105c0("cat /proc/cmdline", (char *)&str, (int32_t)(int16_t)&g84); // 0x10b32
    int32_t v6 = g100; // 0x10b7a
    if (v5 <= -1) {
        // 0x10b3a
        duss_log_gen_head();
        if (v6 != 0) {
            // 0x10bce
            duss_log_print();
            // branch -> 0x10bfa
        }
        // 0x10bfa
        if (v4 != *(int32_t *)g102) {
            // 0x10c04
            __stack_chk_fail();
            // branch -> 0x10c08
        }
        // 0x10c08
        g101 = v1;
        g102 = v2;
        g103 = v3;
        return -1001;
    }
    // 0x10b68
    duss_log_gen_head();
    if (v6 != 0) {
        // 0x10b88
        duss_log_print();
        // branch -> 0x10b98
    }
    char * substr_pos = strstr((char *)&str, "board_id=0x"); // 0x10b9e
    int32_t result;
    if (substr_pos == NULL) {
        // 0x10ba4
        duss_log_gen_head();
        if (g100 != 0) {
            // 0x10bce
            duss_log_print();
            result = -1001;
            // branch -> 0x10bfa
        } else {
            result = -1001;
        }
    } else {
        int32_t v7 = (int32_t)substr_pos + 11; // 0x10bd8
        int32_t v8 = v7; // 0x10be8
        // branch -> 0x10bdc
        char * v9; // 0x10bde_0
        int32_t v10; // 0x10bde
        while (true) {
            // 0x10bdc
            v9 = (char *)v8;
            unsigned char v11 = *v9; // 0x10bde
            v10 = v11;
            if (v11 != 32) {
                // 0x10bf4
                if (v11 == 10) {
                    // break -> 0x10be6
                    break;
                }
                v8++;
                // continue -> 0x10bdc
                continue;
            }
            // 0x10be6
            g100 = 0;
            *v9 = 0;
            *(int32_t *)g103 = function_d63c(v7, v10);
            // branch -> 0x10bfa
        }
        // 0x10be6
        g100 = 0;
        *v9 = 0;
        *(int32_t *)g103 = function_d63c(v7, v10);
        result = g100;
        // branch -> 0x10bfa
    }
    // 0x10bfa
    if (v4 != *(int32_t *)g102) {
        // 0x10c04
        __stack_chk_fail();
        // branch -> 0x10c08
    }
    // 0x10c08
    g101 = v1;
    g102 = v2;
    g103 = v3;
    return result;
}

// Address range: 0x10c44 - 0x10ed3
int32_t function_10c44(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = g100; // 0x10c44
    int32_t v2 = g101; // 0x10c44
    int32_t v3 = *(int32_t *)g25; // 0x10c54
    struct _IO_FILE * file = fopen("/amt/nvram_amt_data.bin", "rb"); // 0x10c62
    g101 = (int32_t)file;
    if (file == NULL) {
        // 0x10c6a
        duss_log_gen_head();
        if (a1 != 0) {
            int32_t err_num = *__errno(); // 0x10c90
            strerror(err_num);
            duss_log_print();
            // branch -> 0x10cf8
        }
        // 0x10cf8
        if (v3 != *(int32_t *)g25) {
            // 0x10e7a
            __stack_chk_fail();
            // branch -> 0x10e7e
        }
        // 0x10e7e
        g100 = v1;
        g101 = v2;
        return -1001;
    }
    // 0x10caa
    if (fseek(file, (int32_t)"i/duml/service/hdvt/hdvt_uav/../hdvt_common/nvram.c", SEEK_SET) > -1) {
        // 0x10cfe
        int32_t data;
        if (fread((char *)&data, 1, 8, (struct _IO_FILE *)g101) > 7) {
            // 0x10d4a
            fclose((struct _IO_FILE *)g101);
            duss_log_gen_head();
            if (a1 != 0) {
                // 0x10d70
                duss_log_print();
                // branch -> 0x10dae
            }
            // 0x10dae
            duss_log_gen_head();
            if (a1 != 0) {
                // 0x10dd0
                duss_log_print();
                // branch -> 0x10e38
            }
            if ((data & 48) != 48) {
                // 0x10e44
                if ((data & 12) != 12) {
                    // 0x10cf8
                    if (v3 != *(int32_t *)g25) {
                        // 0x10e7a
                        __stack_chk_fail();
                        // branch -> 0x10e7e
                    }
                    // 0x10e7e
                    g100 = v1;
                    g101 = v2;
                    return -1001;
                }
            }
            // 0x10e4e
            // branch -> 0x10cf8
        } else {
            // 0x10d0e
            duss_log_gen_head();
            if (a1 != 0) {
                int32_t err_num2 = *__errno(); // 0x10d34
                strerror(err_num2);
                // branch -> 0x10cee
                // 0x10cee
                duss_log_print();
                // branch -> 0x10cf2
            }
            // 0x10cf2
            fclose((struct _IO_FILE *)g101);
            // branch -> 0x10cf8
        }
        // 0x10cf8
        if (v3 != *(int32_t *)g25) {
            // 0x10e7a
            __stack_chk_fail();
            // branch -> 0x10e7e
        }
        // 0x10e7e
        g100 = v1;
        g101 = v2;
        return -1001;
    }
    // 0x10cb6
    duss_log_gen_head();
    if (a1 != 0) {
        int32_t err_num3 = *__errno(); // 0x10cda
        strerror(err_num3);
        // branch -> 0x10cee
        // 0x10cee
        duss_log_print();
        // branch -> 0x10cf2
    }
    // 0x10cf2
    fclose((struct _IO_FILE *)g101);
    // branch -> 0x10cf8
    // 0x10cf8
    if (v3 != *(int32_t *)g25) {
        // 0x10e7a
        __stack_chk_fail();
        // branch -> 0x10e7e
    }
    // 0x10e7e
    g100 = v1;
    g101 = v2;
    return -1001;
}

// Address range: 0x10ed4 - 0x10fd7
int32_t function_10ed4(char * a1, uint32_t a2, int32_t a3) {
    int32_t v1 = g101; // 0x10ed4
    int32_t v2 = *(int32_t *)g25; // 0x10ee4
    if (a1 == NULL || a2 < 1) {
        // 0x10f9c
        // branch -> 0x10fa0
        // 0x10fa0
        if (v2 != *(int32_t *)g25) {
            // 0x10fac
            __stack_chk_fail();
            // branch -> 0x10fb0
        }
        // 0x10fb0
        g101 = v1;
        return -1001;
    }
    // 0x10efa
    int32_t t;
    time(&t);
    struct tm * time_info = localtime(&t); // 0x10f02
    int32_t v3 = (int32_t)time_info; // 0x10f02_3
    int32_t v4 = *(int32_t *)(v3 + 16); // 0x10f06
    int32_t v5 = *(int32_t *)(v3 + 20); // 0x10f08
    int32_t v6 = *(int32_t *)(v3 + 12); // 0x10f0c
    int32_t str;
    g101 = &str;
    int32_t v7 = *(int32_t *)(v3 + 8); // 0x10f12
    int32_t v8 = *(int32_t *)(v3 + 4); // 0x10f1a
    int32_t v9 = time_info->e0; // 0x10f22
    uint32_t chars_printed = snprintf((char *)&str, (int32_t)&g31, "[%04d/%02d/%02d %d:%d:%d] ", v5 + (int32_t)&g82, v4, v6, v7, v8, v9);
    int32_t v10 = chars_printed & chars_printed / 0x80000000 - 1; // 0x10f30
    int32_t v11 = (int32_t)&g29 - v10 + 1; // 0x10f40
    memcpy((char *)(g101 + v10), (char *)(int32_t)a1, v11);
    *(char *)(g101 + v11 + v10) = 0;
    duss_log_gen_head();
    if (a3 != 0) {
        // 0x10f72
        duss_log_print();
        // branch -> 0x10f82
    }
    // 0x10f82
    int32_t str2;
    snprintf((char *)&str2, (int32_t)&g55, "echo %s >> /data/dji/log/cp_assert.log", &str);
    system((char *)&str2);
    // branch -> 0x10fa0
    // 0x10fa0
    if (v2 != *(int32_t *)g25) {
        // 0x10fac
        __stack_chk_fail();
        // branch -> 0x10fb0
    }
    // 0x10fb0
    g101 = v1;
    return 0;
}

// Address range: 0x10fd8 - 0x110af
int32_t function_10fd8(int32_t a1, int32_t * a2, int32_t a3, int32_t a4) {
    int32_t v1 = g101; // 0x10fd8
    g101 = a3;
    g103 = a1;
    int32_t v2 = *(int32_t *)g25; // 0x10fe6
    g100 = (int32_t)a2;
    g102 = g25;
    if (a2 == NULL) {
        // 0x11078
        // branch -> 0x1107c
        // 0x1107c
        if (v2 != *(int32_t *)g102) {
            // 0x11086
            __stack_chk_fail();
            // branch -> 0x1108a
        }
        // 0x1108a
        g101 = v1;
        return -1001;
    }
    // 0x10ff4
    duss_log_gen_head();
    if (a3 != 0) {
        // 0x11014
        duss_log_print();
        // branch -> 0x11032
    }
    // 0x11032
    g99 = g100;
    int32_t result = function_d6e4(g103, 3); // 0x11040
    if (result == 0) {
        // 0x1107c
        if (v2 != *(int32_t *)g102) {
            // 0x11086
            __stack_chk_fail();
            // branch -> 0x1108a
        }
        // 0x1108a
        g101 = v1;
        return result;
    }
    // 0x11048
    duss_log_gen_head();
    if (g101 != 0) {
        // 0x11068
        duss_log_print();
        // branch -> 0x1107c
    }
    // 0x1107c
    if (v2 != *(int32_t *)g102) {
        // 0x11086
        __stack_chk_fail();
        // branch -> 0x1108a
    }
    // 0x1108a
    g101 = v1;
    return result;
}

// Address range: 0x110b0 - 0x11223
int32_t function_110b0(char * file_path, int32_t offset, char * a3, int32_t a4) {
    int32_t v1 = g100; // 0x110b0
    int32_t v2 = g101; // 0x110b0
    g101 = a4;
    int32_t v3 = *(int32_t *)g25; // 0x110c6
    uint32_t v4;
    int32_t v5 = v4 % 256; // 0x110ca
    if (file_path == NULL || a3 == NULL || a4 == 0) {
        // 0x110de
        duss_log_gen_head();
        if (v5 != 0) {
            // 0x110fc
            duss_log_print();
            // branch -> 0x111dc
        }
        // 0x111dc
        if (v3 != *(int32_t *)g25) {
            // 0x111e6
            __stack_chk_fail();
            // branch -> 0x111ea
        }
        // 0x111ea
        g100 = v1;
        g101 = v2;
        return -1001;
    }
    struct _IO_FILE * file = fopen(file_path, "r+"); // 0x1111c
    int32_t stream = (int32_t)file; // R6
    if (file == NULL) {
        // 0x11124
        duss_log_gen_head();
        if (v5 != 0) {
            // 0x11142
            duss_log_print();
            // branch -> 0x111dc
        }
    } else {
        // 0x1115a
        fseek(file, offset, SEEK_SET);
        int32_t data = (int32_t)a3; // 0x11166
        int32_t nmemb = g101; // 0x11168
        fwrite((char *)data, 1, nmemb, (struct _IO_FILE *)stream);
        fwrite((char *)data, 1, nmemb, (struct _IO_FILE *)stream);
        fflush((struct _IO_FILE *)stream);
        int32_t fd;
        if (*(int32_t *)g27 == 0) {
            // 0x11180
            fd = (int32_t)*(int16_t *)(stream + 14);
            // branch -> 0x1118c
        } else {
            // 0x11186
            fd = fileno((struct _IO_FILE *)stream);
            // branch -> 0x1118c
        }
        // 0x1118c
        fsync(fd);
        fclose((struct _IO_FILE *)stream);
        duss_log_gen_head();
        if (v5 != 0) {
            // 0x111b8
            duss_log_print();
            // branch -> 0x111d2
        }
        // 0x111d2
        // branch -> 0x111dc
    }
    // 0x111dc
    if (v3 != *(int32_t *)g25) {
        // 0x111e6
        __stack_chk_fail();
        // branch -> 0x111ea
    }
    // 0x111ea
    g100 = v1;
    g101 = v2;
    return -1001;
}

// Address range: 0x11224 - 0x114d7
int32_t function_11224(int32_t result, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7) {
    int32_t v1 = g100; // 0x11224
    int32_t v2 = g101; // 0x11224
    int32_t path;
    int32_t v3 = &path; // R0
    path = *(int32_t *)g25;
    duss_sketch_get_config_file_name();
    int32_t buf;
    int32_t v4 = &buf; // 0x11248_0
    g101 = v4;
    int32_t fd = -1;
    if (v3 != 0) {
        // 0x1124e
        duss_log_gen_head();
        if (result != 0) {
            // 0x1126e
            duss_log_print();
            // branch -> 0x1127e
        }
        // 0x1127e
        fd = open((char *)&path, O_RDONLY);
        // branch -> 0x1128e
    }
    // 0x1128e
    if (read(fd, (char *)&buf, (int32_t)" %u\n") <= 0) {
        // 0x112a0
        duss_log_gen_head();
        // branch -> 0x113fe
        // 0x113fe
        // branch -> 0x11440
        // 0x11440
        close(fd);
        if (path != *(int32_t *)g25) {
            // 0x11456
            __stack_chk_fail();
            // branch -> 0x1145a
        }
        // 0x1145a
        g100 = v1;
        g101 = v2;
        return -1001;
    }
    // 0x112d4
    cJSON_Parse(v4);
    cJSON_GetObjectItem((int32_t)"platform");
    g101 = v4;
    cJSON_GetObjectItem((int32_t)"sdr_amt_gpio1");
    int32_t v5;
    if (v5 != 3) {
        // 0x1135a
        duss_log_gen_head();
        if (result != 0) {
            // 0x113fa
            duss_log_print();
            // branch -> 0x113fe
        }
        // 0x113fe
        // branch -> 0x11440
        // 0x11440
        close(fd);
        if (path != *(int32_t *)g25) {
            // 0x11456
            __stack_chk_fail();
            // branch -> 0x1145a
        }
        // 0x1145a
        g100 = v1;
        g101 = v2;
        return -1001;
    }
    // 0x11388
    int32_t v6;
    int32_t v7 = 0x10000 * v6 / 0x10000;
    duss_log_gen_head();
    if (result != 0) {
        // 0x113ac
        duss_log_print();
        // branch -> 0x113be
    }
    // 0x113be
    cJSON_GetObjectItem((int32_t)"sdr_amt_gpio2");
    if (v4 == 0) {
        // 0x113d0
        duss_log_gen_head();
        if (result != 0) {
            // 0x113fa
            duss_log_print();
            // branch -> 0x113fe
        }
        // 0x113fe
        result = -1001;
        // branch -> 0x11440
    } else {
        // 0x11404
        g101 = v7;
        duss_log_gen_head();
        if (result != 0) {
            // 0x11426
            duss_log_print();
            // branch -> 0x11436
        }
        // 0x11436
        *(int16_t *)(a2 + 52) = (int16_t)v7;
        *(int16_t *)(a2 + 54) = (int16_t)g101;
        result = 0;
        // branch -> 0x11440
    }
    // 0x11440
    close(fd);
    if (path != *(int32_t *)g25) {
        // 0x11456
        __stack_chk_fail();
        // branch -> 0x1145a
    }
    // 0x1145a
    g100 = v1;
    g101 = v2;
    return result;
}

// Address range: 0x114d8 - 0x115d7
char * function_114d8(char * a1, char * a2) {
    int32_t v1 = g101; // 0x114d8
    g101 = g25;
    int32_t v2 = *(int32_t *)g25; // 0x114e8
    int32_t v3 = (int32_t)a1; // R4
    int32_t v4 = (int32_t)a2; // R6
    int32_t str2;
    memset((char *)&str2, 0, 256);
    struct _IO_FILE * stream = popen("ps | grep wpa_supplicant | busybox awk '{print $2}'", "r"); // 0x11504
    char * str = fgets((char *)&str2, 256, stream); // 0x11512
    int32_t v5 = g101; // 0x11516
    int32_t str_as_i = (int32_t)str; // 0x11550
    if (str != NULL) {
        // 0x1151a
        g101 = &g72;
        duss_log_gen_head();
        if (*(char *)v3 != 0) {
            // 0x1153a
            duss_log_print();
            // branch -> 0x1154a
        }
        // 0x1154a
        str_as_i = atoi((char *)&str2);
        // branch -> 0x11550
    }
    // 0x11550
    g101 = str_as_i;
    pclose((struct _IO_FILE *)(int32_t)stream);
    int32_t v6 = g101; // 0x11558
    if (v6 < 1) {
        // 0x11564
        // branch -> 0x11568
        // 0x11568
        duss_log_gen_head();
        if (*(char *)v3 != 0) {
            // 0x11588
            duss_log_print();
            // branch -> 0x11598
        }
        // 0x11598
        if (v2 != *(int32_t *)v5) {
            // 0x115a4
            __stack_chk_fail();
            // branch -> 0x115a8
        }
        // 0x115a8
        g101 = v1;
        return (char *)-1001;
    }
    int32_t v7 = v4; // 0x1155c
    if (v7 != 0) {
        // 0x1155e
        *(int32_t *)v7 = v6;
        v4 = 0;
        // branch -> 0x11568
    }
    // 0x11568
    duss_log_gen_head();
    if (*(char *)v3 != 0) {
        // 0x11588
        duss_log_print();
        // branch -> 0x11598
    }
    // 0x11598
    if (v2 != *(int32_t *)v5) {
        // 0x115a4
        __stack_chk_fail();
        // branch -> 0x115a8
    }
    // 0x115a8
    g101 = v1;
    return (char *)v4;
}

// Address range: 0x115d8 - 0x11abb
void function_115d8(void) {
    int16_t * v1 = (int16_t *)g100; // bp-36
    int32_t v2 = g101; // 0x115d8
    int32_t v3 = g102; // 0x115d8
    int32_t v4 = g103; // 0x115d8
    int32_t v5 = g104; // 0x115d8
    int32_t (*v6)() = (int32_t (*)())g92;
    int32_t v7 = g93; // 0x115e2
    int32_t v8 = g25;
    int32_t v9 = *(int32_t *)v8; // bp-40
    g101 = v8;
    int32_t v10;
    int32_t v11 = v10 & 0xf000; // 0x11672
    int32_t v12;
    int32_t v13 = &v12; // 0x11688_0
    uint32_t v14; // 0x11738
    uint32_t v15; // 0x11a30
    int32_t v16; // 0x117cc_2
    int32_t v17; // 0x11a4c
    int32_t v18; // R1
    int32_t v19; // R2
    int32_t v20; // R7
    int32_t v21;
    int32_t v22;
    int16_t * v23;
    int32_t v24;
    int32_t v25;
    int32_t v26; // 0x11a04
    int32_t v27; // 0x11774
    int32_t v28; // 0x117fe
    int32_t v29; // 0x11734
    uint32_t v30; // 0x117ac
    int32_t v31; // 0x11a2c
    int32_t v32; // 0x1174a
    int32_t v33; // 0x1176e
    int32_t v34; // 0x1179c
    if (*(int32_t *)v7 < 0) {
        while (true) {
            // 0x11634
            int32_t buf;
            int32_t v35;
            if (stat((char *)(int32_t)"/dev/lmi5", (struct stat *)&buf) > -1) {
                // 0x11670
                g97 = v11;
                if (v11 == 0x2000) {
                    // 0x1167c
                    duss_log_gen_head();
                    if (*(char *)(v7 + 6) != 0) {
                        // 0x11692
                        duss_log_print();
                        // branch -> 0x116a0
                    }
                    int32_t fd = open("/dev/lmi5", 0x80002);
                    *(int32_t *)v7 = fd;
                    int32_t v36; // 0x116c0
                    if (fd < 0) {
                        // 0x116d2
                        duss_log_gen_head();
                        if (*(char *)(v7 + 6) != 0) {
                            // 0x116f0
                            duss_log_print();
                            // branch -> 0x11702
                        }
                      lab_0x11702_2:
                        // 0x11702
                        usleep(0x7a120);
                        v35 = v7;
                        if (*(int32_t *)v35 < 0) {
                          lab_0x11702_3:
                            // 0x11702
                            // branch -> 0x11634
                            continue;
                        } else {
                            v36 = v35;
                        }
                    } else {
                        // 0x116a0
                        v36 = v7;
                        // branch -> 0x116b0
                    }
                    // 0x116b0
                    g98 = v13;
                    duss_log_gen_head();
                    if (*(char *)(v36 + 6) != 0) {
                        // 0x11720
                        g98 = v13;
                        duss_log_print();
                        // branch -> 0x11732
                    }
                    // 0x11732
                    v22 = v9;
                    g94 = v22;
                    v29 = *(int32_t *)g101;
                    g99 = v29;
                    g93 = 0;
                    v14 = -2 - v29 + v22;
                    g3 = ((v14 ^ v22) & (v14 ^ -v29)) < 0;
                    g2 = v22 - v29 < 0;
                    g4 = v22 == v29;
                    g1 = v14 <= v22;
                    if (v22 != v29) {
                        // 0x1173c
                        __stack_chk_fail();
                        // branch -> 0x11740
                    }
                    // 0x11740
                    v23 = v1;
                    g100 = (int32_t)v23;
                    g101 = v2;
                    g102 = v3;
                    g103 = v4;
                    g104 = v5;
                    v6();
                    v19 = g93;
                    v32 = g94;
                    v18 = 0x117d0;
                    v20 = v32;
                    *v23 = (int16_t)g102;
                    *(int16_t *)(g102 + 10) = (int16_t)v18;
                    g101 = 0x11874;
                    v24 = (0x10000 * v32 + 0x40000) / 0x10000;
                    *(int16_t *)(v24 + 10) = 0x1874;
                    v33 = v24;
                    *(int16_t *)&g13 = (int16_t)v33;
                    v27 = v20;
                    *(int16_t *)(v27 + 6) = (int16_t)v27;
                    *(int16_t *)(v19 + 6) = (int16_t)v20;
                    *(int16_t *)(v19 + 4) = (int16_t)v18;
                    g102 = 34;
                    *(int16_t *)&g9 = 34;
                    v34 = g101;
                    v25 = g25;
                    g101 = v25;
                    v30 = *(int32_t *)v25;
                    g100 = v33;
                    v16 = &v21;
                    duss_log_gen_head();
                    g103 = g101;
                    if (*(char *)(v33 + 6) != 0) {
                        // 0x117d8
                        duss_log_print();
                        // branch -> 0x117ee
                    }
                    // 0x117ee
                    prctl(PR_SET_NAME, (int32_t)"hdvt_amt_rx_task", 0, 0, 0);
                    v28 = g100;
                    v26 = v28;
                    if (*(int32_t *)v28 <= 0xffffffff) {
                        // 0x11804
                        g93 = v28;
                        function_115d8();
                        v26 = g100;
                        // branch -> 0x1180a
                    }
                    // 0x1180a
                    g98 = v16;
                    duss_log_gen_head();
                    if (*(char *)(v26 + 6) != 0) {
                        // 0x11a14
                        g98 = v16;
                        duss_log_print();
                        // branch -> 0x11a28
                    }
                    // 0x11a28
                    g94 = v30;
                    v31 = *(int32_t *)g103;
                    g99 = v31;
                    g93 = 0;
                    v15 = -2 - v31 + v30;
                    g3 = ((v15 ^ v30) & (v15 ^ -v31)) < 0;
                    g2 = v30 - v31 < 0;
                    g4 = v30 == v31;
                    g1 = v15 <= v30;
                    if (v30 != v31) {
                        // 0x11a34
                        __stack_chk_fail();
                        // branch -> 0x11a38
                    }
                    // 0x11a38
                    g100 = 0x11960;
                    g101 = (int32_t)(int16_t *)v34;
                    g102 = 34;
                    g103 = v20;
                    g104 = v5;
                    ((int32_t (*)())g92)();
                    *(int16_t *)&g14 = (int16_t)g93;
                    v17 = g102;
                    *(int32_t *)v17 = g98;
                    g10 = g102;
                    *(int16_t *)&g15 = (int16_t)g103;
                    *(int16_t *)&g11 = (int16_t)(v17 + 8);
                    *(int16_t *)&g12 = (int16_t)g101;
                    g103 = 35;
                    g100 = 124;
                    return;
                }
            } else {
                // 0x11640
                duss_log_gen_head();
                if (*(char *)(v7 + 6) == 0) {
                    goto lab_0x11702_2;
                }
                // 0x11660
                duss_log_print();
                // branch -> 0x11702
                goto lab_0x11702_2;
            }
            // 0x11702
            usleep(0x7a120);
            v35 = v7;
            if (*(int32_t *)v35 < 0) {
                goto lab_0x11702_3;
            }
            // 0x116b0
            g98 = v13;
            duss_log_gen_head();
            if (*(char *)(v35 + 6) != 0) {
                // 0x11720
                g98 = v13;
                duss_log_print();
                // branch -> 0x11732
            }
            // 0x11732
            v22 = v9;
            g94 = v22;
            v29 = *(int32_t *)g101;
            g99 = v29;
            g93 = 0;
            v14 = -2 - v29 + v22;
            g3 = ((v14 ^ v22) & (v14 ^ -v29)) < 0;
            g2 = v22 - v29 < 0;
            g4 = v22 == v29;
            g1 = v14 <= v22;
            if (v22 != v29) {
                // 0x1173c
                __stack_chk_fail();
                // branch -> 0x11740
            }
            // 0x11740
            v23 = v1;
            g100 = (int32_t)v23;
            g101 = v2;
            g102 = v3;
            g103 = v4;
            g104 = v5;
            v6();
            v19 = g93;
            v32 = g94;
            v18 = 0x117d0;
            v20 = v32;
            *v23 = (int16_t)g102;
            *(int16_t *)(g102 + 10) = (int16_t)v18;
            g101 = 0x11874;
            v24 = (0x10000 * v32 + 0x40000) / 0x10000;
            *(int16_t *)(v24 + 10) = 0x1874;
            v33 = v24;
            *(int16_t *)&g13 = (int16_t)v33;
            v27 = v20;
            *(int16_t *)(v27 + 6) = (int16_t)v27;
            *(int16_t *)(v19 + 6) = (int16_t)v20;
            *(int16_t *)(v19 + 4) = (int16_t)v18;
            g102 = 34;
            *(int16_t *)&g9 = 34;
            v34 = g101;
            v25 = g25;
            g101 = v25;
            v30 = *(int32_t *)v25;
            g100 = v33;
            v16 = &v21;
            duss_log_gen_head();
            g103 = g101;
            if (*(char *)(v33 + 6) != 0) {
                // 0x117d8
                duss_log_print();
                // branch -> 0x117ee
            }
            // 0x117ee
            prctl(PR_SET_NAME, (int32_t)"hdvt_amt_rx_task", 0, 0, 0);
            v28 = g100;
            v26 = v28;
            if (*(int32_t *)v28 <= 0xffffffff) {
                // 0x11804
                g93 = v28;
                function_115d8();
                v26 = g100;
                // branch -> 0x1180a
            }
            // 0x1180a
            g98 = v16;
            duss_log_gen_head();
            if (*(char *)(v26 + 6) != 0) {
                // 0x11a14
                g98 = v16;
                duss_log_print();
                // branch -> 0x11a28
            }
            // 0x11a28
            g94 = v30;
            v31 = *(int32_t *)g103;
            g99 = v31;
            g93 = 0;
            v15 = -2 - v31 + v30;
            g3 = ((v15 ^ v30) & (v15 ^ -v31)) < 0;
            g2 = v30 - v31 < 0;
            g4 = v30 == v31;
            g1 = v15 <= v30;
            if (v30 != v31) {
                // 0x11a34
                __stack_chk_fail();
                // branch -> 0x11a38
            }
            // 0x11a38
            g100 = 0x11960;
            g101 = (int32_t)(int16_t *)v34;
            g102 = 34;
            g103 = v20;
            g104 = v5;
            ((int32_t (*)())g92)();
            *(int16_t *)&g14 = (int16_t)g93;
            v17 = g102;
            *(int32_t *)v17 = g98;
            g10 = g102;
            *(int16_t *)&g15 = (int16_t)g103;
            *(int16_t *)&g11 = (int16_t)(v17 + 8);
            *(int16_t *)&g12 = (int16_t)g101;
            g103 = 35;
            g100 = 124;
            return;
        }
    }
    // 0x116b0
    g98 = v13;
    duss_log_gen_head();
    if (*(char *)(v7 + 6) != 0) {
        // 0x11720
        g98 = v13;
        duss_log_print();
        // branch -> 0x11732
    }
    // 0x11732
    v22 = v9;
    g94 = v22;
    v29 = *(int32_t *)g101;
    g99 = v29;
    g93 = 0;
    v14 = -2 - v29 + v22;
    g3 = ((v14 ^ v22) & (v14 ^ -v29)) < 0;
    g2 = v22 - v29 < 0;
    g4 = v22 == v29;
    g1 = v14 <= v22;
    if (v22 != v29) {
        // 0x1173c
        __stack_chk_fail();
        // branch -> 0x11740
    }
    // 0x11740
    v23 = v1;
    g100 = (int32_t)v23;
    g101 = v2;
    g102 = v3;
    g103 = v4;
    g104 = v5;
    v6();
    v19 = g93;
    v32 = g94;
    v18 = 0x117d0;
    v20 = v32;
    *v23 = (int16_t)g102;
    *(int16_t *)(g102 + 10) = (int16_t)v18;
    g101 = 0x11874;
    v24 = (0x10000 * v32 + 0x40000) / 0x10000;
    *(int16_t *)(v24 + 10) = 0x1874;
    v33 = v24;
    *(int16_t *)&g13 = (int16_t)v33;
    v27 = v20;
    *(int16_t *)(v27 + 6) = (int16_t)v27;
    *(int16_t *)(v19 + 6) = (int16_t)v20;
    *(int16_t *)(v19 + 4) = (int16_t)v18;
    g102 = 34;
    *(int16_t *)&g9 = 34;
    v34 = g101;
    v25 = g25;
    g101 = v25;
    v30 = *(int32_t *)v25;
    g100 = v33;
    v16 = &v21;
    duss_log_gen_head();
    g103 = g101;
    if (*(char *)(v33 + 6) != 0) {
        // 0x117d8
        duss_log_print();
        // branch -> 0x117ee
    }
    // 0x117ee
    prctl(PR_SET_NAME, (int32_t)"hdvt_amt_rx_task", 0, 0, 0);
    v28 = g100;
    v26 = v28;
    if (*(int32_t *)v28 <= 0xffffffff) {
        // 0x11804
        g93 = v28;
        function_115d8();
        v26 = g100;
        // branch -> 0x1180a
    }
    // 0x1180a
    g98 = v16;
    duss_log_gen_head();
    if (*(char *)(v26 + 6) != 0) {
        // 0x11a14
        g98 = v16;
        duss_log_print();
        // branch -> 0x11a28
    }
    // 0x11a28
    g94 = v30;
    v31 = *(int32_t *)g103;
    g99 = v31;
    g93 = 0;
    v15 = -2 - v31 + v30;
    g3 = ((v15 ^ v30) & (v15 ^ -v31)) < 0;
    g2 = v30 - v31 < 0;
    g4 = v30 == v31;
    g1 = v15 <= v30;
    if (v30 != v31) {
        // 0x11a34
        __stack_chk_fail();
        // branch -> 0x11a38
    }
    // 0x11a38
    g100 = 0x11960;
    g101 = (int32_t)(int16_t *)v34;
    g102 = 34;
    g103 = v20;
    g104 = v5;
    ((int32_t (*)())g92)();
    *(int16_t *)&g14 = (int16_t)g93;
    v17 = g102;
    *(int32_t *)v17 = g98;
    g10 = g102;
    *(int16_t *)&g15 = (int16_t)g103;
    *(int16_t *)&g11 = (int16_t)(v17 + 8);
    *(int16_t *)&g12 = (int16_t)g101;
    g103 = 35;
    g100 = 124;
}

// Address range: 0x11abc - 0x11be9
int32_t function_11abc(int32_t a1, int32_t a2, char * a3) {
    int32_t v1 = (int32_t)a3;
    int32_t v2 = g101; // 0x11abc
    g101 = v1;
    int32_t v3 = *(int32_t *)g25; // 0x11ad4
    int32_t v4 = *(int32_t *)(v1 + 4); // 0x11aec
    g91 = 40;
    int32_t v5 = 64; // R6
    int32_t v6;
    __memcpy_chk((char *)&v6, a3, v4 + 8, (int32_t)&g63);
    int32_t v7;
    int32_t v8 = &v7; // R7
    int32_t v9 = v5; // 0x11b843
    if (v9 != 0 && !((v9 < 0 ^ ((v9 - 2 ^ v9) & 1 - v9) < 0))) {
        // 0x11b16
        // branch -> 0x11b16
        while (true) {
            // 0x11b16
            memset((char *)&v7, 0, 64);
            g91 = -76;
            int32_t v10 = 16; // R8
            int32_t v11 = 0; // 0x11b3c
            unsigned char v12 = *(char *)(g101 + v11); // 0x11b36
            sprintf((char *)(3 * v11 + v8), (char *)(int32_t)"%02x ", (int32_t)v12);
            int32_t v13 = v11 + 1; // 0x11b48
            // branch -> 0x11b32
            while (v13 + 1 + -1 - v10 < 0) {
                // 0x11b32
                g97 = 3;
                v11 = v13;
                v12 = *(char *)(g101 + v11);
                sprintf((char *)(3 * v11 + v8), (char *)(int32_t)"%02x ", (int32_t)v12);
                v13 = v11 + 1;
                // continue -> 0x11b32
            }
            // 0x11b50
            duss_log_gen_head();
            if ((int32_t)*(char *)(a1 + 6) != 0) {
                // 0x11b6e
                duss_log_print();
                // branch -> 0x11b7e
            }
            g101 += v10;
            int32_t v14 = v5; // 0x11b80
            int32_t v15 = v14 - v10; // 0x11b80
            v5 = v15;
            if (v14 == v10 || v15 < 0 ^ ((v15 - 2 ^ v15) & 1 - v15) < 0) {
                // break -> 0x11b84
                break;
            }
            // continue -> 0x11b16
        }
        // 0x11b84
        // branch -> 0x11b88
    }
    int32_t v16 = *(int32_t *)(a1 + 56); // 0x11b88
    duss_event_send_with_retry(v16, 0x2710);
    g101 = v16;
    int32_t result; // 0x11bd4
    int32_t v17; // 0x11bd2
    if (v16 == 0) {
        // 0x11bcc
        g98 = v3;
        v17 = *(int32_t *)g25;
        g94 = v17;
        result = g101;
        if (v3 != v17) {
            // 0x11bda
            __stack_chk_fail();
            // branch -> 0x11bde
        }
        // 0x11bde
        g101 = v2;
        return result;
    }
    // 0x11b9a
    duss_log_gen_head();
    if (*(char *)(a1 + 6) != 0) {
        // 0x11bb8
        duss_log_print();
        // branch -> 0x11bcc
    }
    // 0x11bcc
    g98 = v3;
    v17 = *(int32_t *)g25;
    g94 = v17;
    result = g101;
    if (v3 != v17) {
        // 0x11bda
        __stack_chk_fail();
        // branch -> 0x11bde
    }
    // 0x11bde
    g101 = v2;
    return result;
}

// Address range: 0x11bea - 0x122f3
int32_t function_11bea(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15, int32_t a16, int32_t a17, int32_t a18, int32_t a19, int32_t a20, int32_t a21, int32_t a22, int32_t a23, int32_t a24, int32_t a25, int32_t a26) {
    int32_t v1 = (int32_t)a4;
    *a4 = a2;
    *(int32_t *)(v1 + 4) = g101;
    *(int32_t *)(v1 + 112) = (int32_t)&g16;
    g103 = a14;
    int32_t v2 = g101; // 0x11c10
    g101 = g25;
    int32_t v3 = *(int32_t *)g25; // 0x11c20
    g100 = a1;
    duss_log_gen_head();
    int32_t v4 = g101; // 0x11c4a
    if (*(char *)(a1 + 6) != 0) {
        // 0x11c4e
        duss_log_print();
        // branch -> 0x11c5e
    }
    // 0x11c5e
    g101 = 0x4d54;
    g102 = 1;
    int32_t v5 = *(int32_t *)(g100 + 64); // 0x11c88
    int32_t v6 = 0x4d54;
    duss_osal_mutex_lock(v5, 0x7a120);
    g101 = v5;
    if ((int16_t)v5 != 0) {
        // 0x11ca2
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x11cc2
            duss_log_print();
            // branch -> 0x11cd2
        }
        // 0x11cd2
        function_11abc(g100, (int32_t)*(int16_t *)(g100 + 22), (char *)&v6);
        // branch -> 0x1229c
        // 0x1229c
        if (v3 != *(int32_t *)v4) {
            // 0x122d0
            __stack_chk_fail();
            // branch -> 0x122d4
        }
        // 0x122d4
        g101 = v2;
        return 0;
    }
    // 0x11cde
    int32_t file_path;
    struct _IO_FILE * file; // 0x11d4e
    int32_t v7; // 0x11df8
    int32_t v8; // 0x11d98
    uint32_t v9; // 0x11df2
    unsigned char v10; // 0x11d38
    int32_t v11; // 0x11d98
    uint16_t v12; // 0x11dfa
    if ((int32_t)*(int16_t *)(g100 + 18) < *(int32_t *)(g100 + 24) + 38) {
        // 0x11d38
        v10 = *(char *)(g100 + 16);
        g101 = v10;
        file_path = v10 == 0 ? (int32_t)"/amt/nvram_amt_data.bin" : (int32_t)"/amt/nvram_sysconfig_ma.bin";
        file = fopen((char *)file_path, "r");
        g101 = (int32_t)file;
        if (file == NULL) {
            // 0x11d56
            duss_log_gen_head();
            if (*(char *)(g100 + 6) != 0) {
                // 0x11d78
                if (*(char *)(g100 + 16) == 0) {
                    // 0x11d7e
                    // branch -> 0x11d88
                }
                // 0x11d88
                // branch -> 0x11d92
                // 0x11d92
                duss_log_print();
                // branch -> 0x11df8
            }
        } else {
            // 0x11d98
            v8 = g100;
            v11 = *(int32_t *)(v8 + 40);
            fseek(file, *(int32_t *)(v8 + 32), SEEK_SET);
            g102 = fread((char *)(v11 + 38), 1, *(int32_t *)(g100 + 24), (struct _IO_FILE *)g101);
            fclose((struct _IO_FILE *)g101);
            duss_log_gen_head();
            if (*(char *)(g100 + 6) != 0) {
                // 0x11dda
                duss_log_print();
                // branch -> 0x11df2
            }
            // 0x11df2
            v9 = g100;
            if (g102 < *(int32_t *)(v9 + 24)) {
                // 0x11e0a
                g101 = 1;
                *(char *)(v9 + 10) = (char)(v9 / 256);
                *(char *)(g100 + 11) = (char)g101;
                duss_osal_mutex_unlock(*(int32_t *)(g100 + 64));
                duss_log_gen_head();
                if (*(char *)(g100 + 6) != 0) {
                    // 0x121dc
                    duss_log_print();
                    // branch -> 0x1226a
                }
                // 0x1226a
                duss_log_gen_head();
                if (*(char *)(g100 + 6) != 0) {
                    // 0x1228a
                    duss_log_print();
                    // branch -> 0x1229c
                }
                // 0x1229c
                if (v3 != *(int32_t *)v4) {
                    // 0x122d0
                    __stack_chk_fail();
                    // branch -> 0x122d4
                }
                // 0x122d4
                g101 = v2;
                return 0;
            }
        }
        // 0x11df8
        v7 = g100;
        v12 = *(int16_t *)(v7 + 22);
        function_11abc(v7, (int32_t)v12, (char *)&v6);
        duss_osal_mutex_unlock(*(int32_t *)(g100 + 64));
        // branch -> 0x1226a
        // 0x1226a
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x1228a
            duss_log_print();
            // branch -> 0x1229c
        }
        // 0x1229c
        if (v3 != *(int32_t *)v4) {
            // 0x122d0
            __stack_chk_fail();
            // branch -> 0x122d4
        }
        // 0x122d4
        g101 = v2;
        return 0;
    }
    int32_t v13 = *(int32_t *)(g100 + 40); // 0x11ce8
    if (v13 != 0) {
        // 0x11cec
        free((char *)v13);
        *(int16_t *)(g100 + 18) = (int16_t)g101;
        // branch -> 0x11cf2
    }
    int32_t nmemb = *(int32_t *)(g100 + 24) + 38; // 0x11cf6
    g101 = nmemb;
    char * mem = calloc(nmemb, 1); // 0x11cfa
    *(int32_t *)(g100 + 40) = (int32_t)mem;
    if (mem == NULL) {
        // 0x11d02
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x11d24
            // branch -> 0x11d92
            // 0x11d92
            duss_log_print();
            // branch -> 0x11df8
        }
        // 0x11df8
        v7 = g100;
        v12 = *(int16_t *)(v7 + 22);
        function_11abc(v7, (int32_t)v12, (char *)&v6);
        duss_osal_mutex_unlock(*(int32_t *)(g100 + 64));
        // branch -> 0x1226a
        // 0x1226a
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x1228a
            duss_log_print();
            // branch -> 0x1229c
        }
        // 0x1229c
        if (v3 != *(int32_t *)v4) {
            // 0x122d0
            __stack_chk_fail();
            // branch -> 0x122d4
        }
        // 0x122d4
        g101 = v2;
        return 0;
    }
    // 0x11d36
    *(int16_t *)(g100 + 18) = (int16_t)g101;
    // branch -> 0x11d38
    // 0x11d38
    v10 = *(char *)(g100 + 16);
    g101 = v10;
    file_path = v10 == 0 ? (int32_t)"/amt/nvram_amt_data.bin" : (int32_t)"/amt/nvram_sysconfig_ma.bin";
    file = fopen((char *)file_path, "r");
    g101 = (int32_t)file;
    if (file == NULL) {
        // 0x11d56
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x11d78
            if (*(char *)(g100 + 16) == 0) {
                // 0x11d7e
                // branch -> 0x11d88
            }
            // 0x11d88
            // branch -> 0x11d92
            // 0x11d92
            duss_log_print();
            // branch -> 0x11df8
        }
    } else {
        // 0x11d98
        v8 = g100;
        v11 = *(int32_t *)(v8 + 40);
        fseek(file, *(int32_t *)(v8 + 32), SEEK_SET);
        g102 = fread((char *)(v11 + 38), 1, *(int32_t *)(g100 + 24), (struct _IO_FILE *)g101);
        fclose((struct _IO_FILE *)g101);
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x11dda
            duss_log_print();
            // branch -> 0x11df2
        }
        // 0x11df2
        v9 = g100;
        if (g102 < *(int32_t *)(v9 + 24)) {
            // 0x11e0a
            g101 = 1;
            *(char *)(v9 + 10) = (char)(v9 / 256);
            *(char *)(g100 + 11) = (char)g101;
            duss_osal_mutex_unlock(*(int32_t *)(g100 + 64));
            duss_log_gen_head();
            if (*(char *)(g100 + 6) != 0) {
                // 0x121dc
                duss_log_print();
                // branch -> 0x1226a
            }
            // 0x1226a
            duss_log_gen_head();
            if (*(char *)(g100 + 6) != 0) {
                // 0x1228a
                duss_log_print();
                // branch -> 0x1229c
            }
            // 0x1229c
            if (v3 != *(int32_t *)v4) {
                // 0x122d0
                __stack_chk_fail();
                // branch -> 0x122d4
            }
            // 0x122d4
            g101 = v2;
            return 0;
        }
    }
    // 0x11df8
    v7 = g100;
    v12 = *(int16_t *)(v7 + 22);
    function_11abc(v7, (int32_t)v12, (char *)&v6);
    duss_osal_mutex_unlock(*(int32_t *)(g100 + 64));
    // branch -> 0x1226a
    // 0x1226a
    duss_log_gen_head();
    if (*(char *)(g100 + 6) != 0) {
        // 0x1228a
        duss_log_print();
        // branch -> 0x1229c
    }
    // 0x1229c
    if (v3 != *(int32_t *)v4) {
        // 0x122d0
        __stack_chk_fail();
        // branch -> 0x122d4
    }
    // 0x122d4
    g101 = v2;
    return 0;
}

// Address range: 0x122f4 - 0x1259b
int32_t function_122f4(char a1, int32_t a2, char a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, char a10) {
    // 0x122f4
    int32_t v1;
    char * v2 = (char *)v1; // bp-212
    int32_t v3 = g101; // 0x122f4
    g104 = a3;
    g101 = a1;
    int32_t v4 = *(int32_t *)g25; // 0x1230a
    v2 = "amt_process_mutex";
    g102 = a2;
    char * mem = calloc(80, 1); // 0x12316
    int32_t v5 = (int32_t)mem; // 0x12316_5
    g105 = g25;
    g100 = v5;
    int32_t result; // 0x12516
    if (mem == NULL) {
        // 0x12320
        duss_log_gen_head();
        result = g100;
        // branch -> 0x12510
    } else {
        // 0x12354
        g103 = 155;
        *(int32_t *)mem = -1;
        *(int16_t *)(v5 + 14) = (int16_t)-1;
        *(char *)(v5 + 7) = (char)g104;
        *(char *)(v5 + 8) = (char)g104;
        *(int16_t *)(v5 + 52) = 155;
        *(int16_t *)(v5 + 54) = 156;
        int32_t v6;
        int32_t v7;
        int32_t v8;
        if (function_11224(0x1000000 * g101 / 0x1000000, g100, 156, v4, (int32_t)(char *)v8, v7, v6) == 0) {
            // 0x12354
            // branch -> 0x123ac
        } else {
            // 0x12376
            duss_log_gen_head();
            if ((char)g101 != 0) {
                // 0x12396
                duss_log_print();
                // branch -> 0x123ac
            }
        }
        // 0x123ac
        duss_osal_mutex_create((int32_t)&v2, g100 + 64);
        duss_log_gen_head();
        if ((char)g101 != 0) {
            // 0x123da
            duss_log_print();
            // branch -> 0x123ea
        }
        // 0x123ea
        free((char *)g100);
        result = 0;
        // branch -> 0x12510
    }
    // 0x12510
    if (v4 != *(int32_t *)g105) {
        // 0x1251c
        __stack_chk_fail();
        // branch -> 0x12520
    }
    // 0x12520
    g101 = v3;
    return result;
}

// Address range: 0x1259c - 0x127ff
int32_t function_1259c(int32_t * a1, int32_t a2, char * a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10) {
    int32_t fd = (int32_t)a1;
    int32_t v1 = g101; // 0x1259c
    g101 = (int32_t)a3;
    int32_t v2 = *(int32_t *)g25; // 0x125ae
    *(int16_t *)(fd + 14) = *(int16_t *)(a2 + 4);
    duss_log_gen_head();
    int32_t nbyte = *(int32_t *)(g101 + 4) + 8; // R7
    if (*(char *)(fd + 6) != 0) {
        // 0x125dc
        duss_log_print();
        // branch -> 0x125f4
    }
    int32_t v3 = 6; // R6
    // branch -> 0x1264a
    while (true) {
        // 0x1264a
        int32_t v4; // 0x12686
        int32_t v5; // R8
        if (*(int32_t *)fd < 0) {
            int32_t v6 = v3; // 0x125f8
            v3 = v6 - 1;
            if (v6 == 1) {
                // 0x125fc
                duss_log_gen_head();
                if (*(char *)(fd + 6) != 0) {
                    // 0x1261a
                    // branch -> 0x12628
                    // 0x12628
                    duss_log_print();
                    // branch -> 0x1262c
                }
                // 0x1262c
                v5 = 6;
                // branch -> 0x12680
                while (true) {
                    // 0x12680
                    v4 = write(*(int32_t *)fd, (char *)g101, nbyte);
                    int32_t v7; // R0
                    int32_t v8; // 0x12796_22
                    if (v4 == nbyte) {
                        // 0x12690
                        duss_log_gen_head();
                        if (*(char *)(fd + 6) != 0) {
                            // 0x126b0
                            duss_log_print();
                            // branch -> 0x126be
                        }
                        // 0x126be
                        v7 = 0;
                        v8 = 0;
                        // branch -> 0x12786
                    } else {
                      lab_0x126c2_2:;
                        // 0x126c2
                        int32_t err_num; // 0x12768
                        if (v4 <= 0xffffffff) {
                            // 0x126c6
                            if (*__errno() != 11) {
                                // 0x126da
                                if (*__errno() != 4) {
                                    // 0x12740
                                    duss_log_gen_head();
                                    if (*(char *)(fd + 6) != 0) {
                                        // 0x12760
                                        g101 = (int32_t)*(char *)(fd + 6);
                                        err_num = *__errno();
                                        strerror(err_num);
                                        duss_log_print();
                                        // branch -> 0x12782
                                    }
                                    // 0x12782
                                    // branch -> 0x12786
                                    // 0x12786
                                    if (v2 != *(int32_t *)g25) {
                                        // 0x12790
                                        __stack_chk_fail();
                                        // branch -> 0x12794
                                    }
                                    // 0x12794
                                    g101 = v1;
                                    return -1;
                                }
                            }
                            int32_t v9 = v5 - 1; // 0x126d0
                            v5 = v9;
                            v7 = (int32_t)*(char *)(fd + 6);
                            if (v9 == 0) {
                                // 0x12710
                                duss_log_gen_head();
                                if (v7 != 0) {
                                    // 0x1272e
                                    duss_log_print();
                                    // branch -> 0x12740
                                }
                                // 0x12740
                                duss_log_gen_head();
                                if (*(char *)(fd + 6) != 0) {
                                    // 0x12760
                                    g101 = (int32_t)*(char *)(fd + 6);
                                    err_num = *__errno();
                                    strerror(err_num);
                                    duss_log_print();
                                    // branch -> 0x12782
                                }
                                // 0x12782
                                // branch -> 0x12786
                                // 0x12786
                                if (v2 != *(int32_t *)g25) {
                                    // 0x12790
                                    __stack_chk_fail();
                                    // branch -> 0x12794
                                }
                                // 0x12794
                                g101 = v1;
                                return -1;
                            }
                            // 0x126e6
                            duss_log_gen_head();
                            if (v7 != 0) {
                                // 0x126fc
                                duss_log_print();
                                // branch -> 0x12708
                            }
                            // 0x12708
                            usleep((int32_t)"odem 2");
                            // branch -> 0x12680
                            continue;
                        }
                        // 0x12740
                        duss_log_gen_head();
                        if (*(char *)(fd + 6) != 0) {
                            // 0x12760
                            g101 = (int32_t)*(char *)(fd + 6);
                            err_num = *__errno();
                            strerror(err_num);
                            duss_log_print();
                            // branch -> 0x12782
                        }
                        // 0x12782
                        v7 = -1;
                        v8 = -1;
                        // branch -> 0x12786
                    }
                    // 0x12786
                    int32_t result; // 0x12796_2
                    if (v2 != *(int32_t *)g25) {
                        // 0x12790
                        __stack_chk_fail();
                        result = v7;
                        // branch -> 0x12794
                    } else {
                        result = v8;
                    }
                    // 0x12794
                    g101 = v1;
                    return result;
                }
            } else {
                // 0x12644
                usleep(0x7a120);
                // branch -> 0x1264a
                continue;
            }
        } else {
            // 0x12650
            duss_log_gen_head();
            if (*(char *)(fd + 6) != 0) {
                // 0x12670
                // branch -> 0x12628
                // 0x12628
                duss_log_print();
                // branch -> 0x1262c
            }
            // 0x1262c
            v5 = 6;
            // branch -> 0x12680
            while (true) {
                // 0x12680
                v4 = write(*(int32_t *)fd, (char *)g101, nbyte);
                if (v4 != nbyte) {
                    goto lab_0x126c2_2;
                }
                // 0x12690
                duss_log_gen_head();
                if (*(char *)(fd + 6) != 0) {
                    // 0x126b0
                    duss_log_print();
                    // branch -> 0x126be
                }
                // 0x126be
                // branch -> 0x12786
                // 0x12786
                if (v2 != *(int32_t *)g25) {
                    // 0x12790
                    __stack_chk_fail();
                    // branch -> 0x12794
                }
                // 0x12794
                g101 = v1;
                return 0;
            }
        }
    }
}

// Address range: 0x12800 - 0x12a23
int32_t function_12800(int32_t a1, int32_t a2, int32_t a3, char * a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    int32_t v1 = g100; // 0x12800
    int32_t v2 = g101; // 0x12800
    int32_t v3 = g102; // 0x12800
    g105 = (int32_t)a4;
    g104 = a3;
    g100 = a1;
    uint16_t v4 = *(int16_t *)(a3 + 4); // 0x12814
    g101 = v4;
    int32_t v5 = *(int32_t *)g25; // 0x12818
    int32_t v6;
    g102 = v6;
    g103 = a2;
    int32_t v7 = 6;
    *(int16_t *)(a1 + 14) = v4;
    g95 = g25;
    int32_t v8; // 0x1294e4
    int32_t v9; // R3
    int32_t v10;
    if (g102 == 0) {
        // 0x1282a
        g101 = (int32_t)"hdvt_amt_reboot_cp";
        duss_log_gen_head();
        v9 = (int32_t)"[sys]AMT reboot cp start...";
        duss_log_print();
        v8 = &g58;
        v10 = 1;
        // branch -> 0x12890
    } else {
        // 0x1285e
        duss_log_gen_head();
        v9 = (int32_t)"[sys]AMT reverse cp start...";
        duss_log_print();
        v8 = &g59;
        v10 = 2;
        // branch -> 0x12890
    }
    // 0x12890
    int32_t v11;
    int32_t v12;
    int32_t v13;
    int32_t v14;
    int32_t v15;
    function_e324(g103, v10, 0x6acfc0, v9, (int32_t)(int16_t *)"dji/duml/service/hdvt/hdvt_uav/../hdvt_common/amt_cmd.c", (int32_t)"hdvt_amt_reboot_cp", v8, v15, 0, v7, v14, v13, v12, v11);
    g96 = 0x6acfc0;
    g101 = 0;
    // branch -> 0x1289c
    int32_t v16; // 0x129b4
    int32_t v17; // R0
    int32_t result; // 0x129d6_2
    int32_t v18; // 0x129d6_28
    int32_t v19;
    int32_t v20; // 0x12988
    unsigned char v21; // 0x12988
    unsigned char v22; // 0x1298c
    uint16_t v23; // 0x129ae
    while (true) {
        // 0x1289c
        function_e1b8((int32_t *)g103, &v7, 0x6acfc0);
        if (v7 == 1) {
            // 0x128aa
            duss_log_gen_head();
            if (*(char *)(g100 + 6) != 0) {
                // 0x128ca
                duss_log_print();
                // branch -> 0x128da
            }
            char v24 = *(char *)(g100 + 7); // 0x128de
            if (g102 == 0) {
                // 0x1291e
                *(char *)(g100 + 8) = v24;
                // branch -> 0x1292e
            } else {
                // 0x12922
                char v25;
                if (v24 == 1) {
                    // 0x12926
                    v25 = 0;
                    // branch -> 0x1292c
                } else {
                    // 0x1292a
                    if (v24 != 0) {
                        // 0x1292e
                        duss_log_gen_head();
                        duss_log_print();
                        // branch -> 0x12984
                        // 0x12984
                        if (v19 == 0) {
                            // 0x129ba
                            v17 = 0;
                            v18 = 0;
                            // branch -> 0x129c6
                        } else {
                            // 0x12988
                            v20 = g105;
                            v21 = *(char *)v20;
                            v22 = *(char *)(v20 + 1);
                            v14 = 0x10000 * (256 * (int32_t)v22 | (int32_t)v21) / 0x10000;
                            v23 = *(int16_t *)(g104 + 8);
                            v16 = function_11abc(g100, (int32_t)v23, (char *)&v14);
                            v17 = v16;
                            v18 = v16;
                            // branch -> 0x129c6
                        }
                        // 0x129c6
                        if (v5 != *(int32_t *)g95) {
                            // 0x129d0
                            __stack_chk_fail();
                            result = v17;
                            // branch -> 0x129d4
                        } else {
                            result = v18;
                        }
                        // 0x129d4
                        g100 = v1;
                        g101 = v2;
                        g102 = v3;
                        return result;
                    }
                    v25 = 1;
                }
                // 0x1292c
                *(char *)(g100 + 8) = v25;
                // branch -> 0x1292e
            }
            // 0x1292e
            duss_log_gen_head();
            duss_log_print();
            // branch -> 0x12984
        } else {
            // 0x128e4
            g101 += 0x2710;
            duss_osal_task_sleep(0x2710);
            if (g101 + 1 + -1 - g96 == 0) {
                // break -> 0x128f6
                break;
            }
            // continue -> 0x1289c
            continue;
        }
        // 0x12984
        if (v19 == 0) {
            // 0x129ba
            v17 = 0;
            v18 = 0;
            // branch -> 0x129c6
        } else {
            // 0x12988
            v20 = g105;
            v21 = *(char *)v20;
            v22 = *(char *)(v20 + 1);
            v14 = 0x10000 * (256 * (int32_t)v22 | (int32_t)v21) / 0x10000;
            v23 = *(int16_t *)(g104 + 8);
            v16 = function_11abc(g100, (int32_t)v23, (char *)&v14);
            v17 = v16;
            v18 = v16;
            // branch -> 0x129c6
        }
        // 0x129c6
        if (v5 != *(int32_t *)g95) {
            // 0x129d0
            __stack_chk_fail();
            result = v17;
            // branch -> 0x129d4
        } else {
            result = v18;
        }
        // 0x129d4
        g100 = v1;
        g101 = v2;
        g102 = v3;
        return result;
    }
    // 0x128f6
    duss_log_gen_head();
    duss_log_print();
    // branch -> 0x12984
    // 0x12984
    if (v19 == 0) {
        // 0x129ba
        v17 = 0;
        v18 = 0;
        // branch -> 0x129c6
    } else {
        // 0x12988
        v20 = g105;
        v21 = *(char *)v20;
        v22 = *(char *)(v20 + 1);
        v14 = 0x10000 * (256 * (int32_t)v22 | (int32_t)v21) / 0x10000;
        v23 = *(int16_t *)(g104 + 8);
        v16 = function_11abc(g100, (int32_t)v23, (char *)&v14);
        v17 = v16;
        v18 = v16;
        // branch -> 0x129c6
    }
    // 0x129c6
    if (v5 != *(int32_t *)g95) {
        // 0x129d0
        __stack_chk_fail();
        result = v17;
        // branch -> 0x129d4
    } else {
        result = v18;
    }
    // 0x129d4
    g100 = v1;
    g101 = v2;
    g102 = v3;
    return result;
}

// Address range: 0x12a24 - 0x12a9b
int32_t function_12a24(int32_t a1, int32_t a2) {
    int32_t v1 = g100; // 0x12a24
    int32_t v2 = g101; // 0x12a24
    g101 = g25;
    uint32_t result = *(int32_t *)g25; // 0x12a30
    g99 = result;
    g100 = a1;
    function_146f0();
    g99 = 128;
    duss_log_gen_head();
    if (*(char *)(g100 + 6) != 0) {
        // 0x12a64
        g99 = (int32_t)"AMT test cur role %d";
        duss_log_print();
        // branch -> 0x12a74
    }
    int32_t v3 = *(int32_t *)g101; // 0x12a76
    g93 = 1;
    g1 = -2 - v3 + result <= result;
    if (result != v3) {
        // 0x12a7e
        __stack_chk_fail();
        // branch -> 0x12a82
    }
    // 0x12a82
    g100 = v1;
    g101 = v2;
    return result;
}

// Address range: 0x12a9c - 0x12aeb
int32_t function_12a9c(int32_t a1, int32_t a2, char * a3) {
    int32_t v1 = (int32_t)a3;
    int32_t v2 = g101; // 0x12a9c
    g100 = v1;
    *(int16_t *)(a1 + 14) = *(int16_t *)(a2 + 4);
    g102 = a2;
    g101 = a1;
    g103 = 1;
    int32_t v3 = a1; // 0x12ad4
    if (*(int16_t *)(v1 + 8) == 0) {
        // 0x12ab6
        function_12a24(a1, 1);
        a2 = g102;
        v3 = g101;
        // branch -> 0x12abe
    }
    unsigned char v4 = *(char *)g100; // 0x12abe
    unsigned char v5 = *(char *)(g100 + 1); // 0x12ac0
    int32_t v6 = 0x10000 * (256 * (int32_t)v5 | (int32_t)v4) / 0x10000;
    uint16_t v7 = *(int16_t *)(a2 + 8); // 0x12ad6
    int32_t result = function_11abc(v3, (int32_t)v7, (char *)&v6); // 0x12ae2
    g101 = v2;
    return result;
}

// Address range: 0x12aec - 0x12ba3
int32_t function_12aec(int32_t a1, int32_t a2, char * a3, int32_t a4) {
    int32_t v1 = g101; // 0x12aec
    g103 = (int32_t)a3;
    g102 = g25;
    g100 = a1;
    g101 = a2;
    int32_t v2 = 0;
    *(int16_t *)(a1 + 14) = *(int16_t *)(a2 + 4);
    g99 = (int32_t)*(char *)(g100 + 6);
    function_10934(&v2, "chip_sn=", 8);
    unsigned char v3 = *(char *)g103; // 0x12b1a
    unsigned char v4 = *(char *)(g103 + 1); // 0x12b1c
    int32_t v5 = 0x10000 * (256 * (int32_t)v4 | (int32_t)v3) / 0x10000;
    duss_log_gen_head();
    if (*(char *)(g100 + 6) != 0) {
        // 0x12b56
        duss_log_print();
        // branch -> 0x12b72
    }
    uint16_t v6 = *(int16_t *)(g101 + 8); // 0x12b72
    int32_t result = function_11abc(g100, (int32_t)v6, (char *)&v5); // 0x12b78
    if (*(int32_t *)g25 != *(int32_t *)g102) {
        // 0x12b84
        __stack_chk_fail();
        // branch -> 0x12b88
    }
    // 0x12b88
    g101 = v1;
    return result;
}

// Address range: 0x12ba4 - 0x12f5b
int32_t function_12ba4(int32_t a1, int32_t a2, char * a3, int32_t a4) {
    int32_t v1 = g101; // 0x12ba4
    g101 = (int32_t)a3;
    g100 = a1;
    g105 = g25;
    *(int16_t *)(a1 + 14) = *(int16_t *)(a2 + 4);
    int32_t v2 = g101; // 0x12bba
    unsigned char v3 = *(char *)(v2 + 1); // 0x12bba
    g103 = a2;
    unsigned char v4 = *(char *)v2; // 0x12bbe
    int32_t v5 = *(int32_t *)g105; // 0x12bc0
    g104 = 1;
    int32_t v6 = *(int32_t *)(g100 + 64); // 0x12be4
    int32_t v7 = 0x10000 * ((int32_t)v4 | 256 * (int32_t)v3) / 0x10000;
    duss_osal_mutex_lock(v6, 0x7a120);
    g102 = v6;
    int32_t v8 = (int32_t)*(char *)(g100 + 6); // R0
    if (v6 == 0) {
        // 0x12c44
        duss_log_gen_head();
        if (v8 != 0) {
            // 0x12c62
            duss_log_print();
            // branch -> 0x12c88
        }
        int32_t v9 = g101; // 0x12c88
        uint16_t v10 = *(int16_t *)(v9 + 10); // 0x12c88
        int32_t v11; // 0x12e14
        if (v10 == 1) {
            // 0x12c8e
            *(char *)(g100 + 12) = (char)*(int16_t *)(v9 + 12);
            *(int32_t *)(g100 + 28) = 0;
            *(char *)(g100 + 17) = *(char *)(g101 + 8);
            *(int32_t *)(g100 + 36) = *(int32_t *)(g101 + 14);
            duss_log_gen_head();
            if (*(char *)(g100 + 6) != 0) {
                // 0x12cc0
                duss_log_print();
                // branch -> 0x12cd2
            }
            uint16_t v12 = *(int16_t *)(g101 + 12); // 0x12cd2
            int32_t v13 = g100; // 0x12cda
            uint16_t v14 = *(int16_t *)(v13 + 20); // 0x12cda
            int32_t v15; // 0x12efe
            int32_t v16; // 0x12f12
            int32_t v17; // 0x12f30
            int32_t v18; // 0x12ddc
            int32_t v19; // 0x12df8
            int32_t v20; // 0x12e7c
            int32_t v21; // 0x12f04
            int32_t v22; // 0x12dd8
            int32_t v23; // 0x12df6
            int32_t v24; // 0x12f24
            int32_t v25; // 0x12ddc
            int32_t v26; // 0x12dee
            int32_t v27; // 0x12e24
            int32_t v28; // 0x12dd8
            int32_t v29; // 0x12de0
            uint16_t v30; // 0x12df6
            int32_t v31; // 0x12e28
            int32_t v32; // 0x12ef6
            int32_t v33; // 0x12efa
            int32_t v34; // 0x12efc
            int32_t v35; // 0x12f0c
            int32_t v36; // 0x12f0e
            int32_t v37; // 0x12f10
            int32_t v38; // 0x12f20
            int32_t v39; // 0x12f22
            int32_t v40; // 0x12f24
            if ((int32_t)v14 < (int32_t)v12 * (int32_t)&g62) {
                int32_t v41 = *(int32_t *)(v13 + 44); // 0x12ce0
                if (v41 != 0) {
                    // 0x12ce4
                    free((char *)v41);
                    *(int16_t *)(g100 + 20) = 0;
                    // branch -> 0x12cec
                }
                uint16_t v42 = *(int16_t *)(g101 + 12); // 0x12cec
                g104 = (int32_t)&g62;
                char * mem = calloc((int32_t)v42 * (int32_t)&g62, 1); // 0x12cf8
                *(int32_t *)(g100 + 44) = (int32_t)mem;
                int32_t v43 = g100; // 0x12d00
                v8 = (int32_t)*(char *)(v43 + 6);
                if (mem == NULL) {
                    // 0x12d04
                    duss_log_gen_head();
                    if (v8 != 0) {
                        // 0x12d24
                        duss_log_print();
                        // branch -> 0x12dc8
                    }
                    // 0x12dc8
                    v11 = g100;
                    // branch -> 0x12e14
                } else {
                    int32_t v44 = (int32_t)*(int16_t *)(g101 + 12) * g104; // 0x12d40
                    g104 = v44;
                    *(int16_t *)(v43 + 20) = (int16_t)v44;
                    duss_log_gen_head();
                    if (v8 != 0) {
                        // 0x12d66
                        duss_log_print();
                        // branch -> 0x12dd6
                    }
                    // 0x12dd6
                    v22 = g100;
                    v28 = *(int32_t *)(v22 + 36);
                    *(char *)(v22 + 13) = (char)*(int16_t *)(g101 + 10);
                    v18 = g101;
                    v25 = *(int32_t *)(v18 + 14);
                    v29 = *(int32_t *)(g100 + 44);
                    v26 = *(int32_t *)(v18 + 18);
                    memcpy((char *)(v29 + v25 - v28), (char *)(v18 + 22), v26);
                    v23 = g101;
                    v30 = *(int16_t *)(v23 + 10);
                    v19 = g100;
                    if ((int32_t)v30 == (int32_t)*(char *)(v19 + 12)) {
                        // 0x12e20
                        v27 = *(int32_t *)(v23 + 18);
                        v31 = *(int32_t *)(v19 + 36);
                        *(int32_t *)(v19 + 28) = v27 + *(int32_t *)(v23 + 14) - v31;
                        duss_log_gen_head();
                        if (*(char *)(g100 + 6) != 0) {
                            // 0x12e52
                            duss_log_print();
                            // branch -> 0x12e74
                        }
                        // 0x12e74
                        system("mount -o remount,rw /amt");
                        v20 = g100;
                        if (*(char *)(v20 + 17) == 0) {
                            // 0x12e84
                            v24 = v20;
                            // branch -> 0x12f20
                            // 0x12f20
                            v38 = *(int32_t *)(v24 + 36);
                            v39 = *(int32_t *)(v24 + 44);
                            v40 = *(int32_t *)(v24 + 28);
                            function_110b0((char *)(int32_t)"/amt/nvram_amt_data.bin", v38, (char *)v39, v40);
                            // branch -> 0x12dfe
                            // 0x12dfe
                            // branch -> 0x12e14
                            // 0x12e14
                            function_11abc(g100, (int32_t)*(int16_t *)(g103 + 8), (char *)&v7);
                            // branch -> 0x12f32
                        } else {
                            // 0x12ef4
                            v32 = *(int32_t *)(v20 + 36);
                            v33 = *(int32_t *)(v20 + 44);
                            v34 = *(int32_t *)(v20 + 28);
                            v15 = function_110b0("/amt/nvram_sysconfig_ma.bin", v32, (char *)v33, v34);
                            v17 = v15;
                            if (v15 == 0) {
                                // 0x12f04
                                v21 = g100;
                                v35 = *(int32_t *)(v21 + 36);
                                v36 = *(int32_t *)(v21 + 44);
                                v37 = *(int32_t *)(v21 + 28);
                                v16 = function_110b0("/amt/nvram_sysconfig_ba.bin", v35, (char *)v36, v37);
                                if (v16 == 0) {
                                    // 0x12f18
                                    v24 = g100;
                                    // branch -> 0x12f20
                                    // 0x12f20
                                    v38 = *(int32_t *)(v24 + 36);
                                    v39 = *(int32_t *)(v24 + 44);
                                    v40 = *(int32_t *)(v24 + 28);
                                    function_110b0((char *)(int32_t)"/amt/nvram_sysconfig_da.bin", v38, (char *)v39, v40);
                                    // branch -> 0x12dfe
                                    // 0x12dfe
                                    // branch -> 0x12e14
                                    // 0x12e14
                                    function_11abc(g100, (int32_t)*(int16_t *)(g103 + 8), (char *)&v7);
                                    // branch -> 0x12f32
                                    // 0x12f32
                                    duss_osal_mutex_unlock(*(int32_t *)(g100 + 64));
                                    // branch -> 0x12f38
                                    // 0x12f38
                                    if (v5 != *(int32_t *)g105) {
                                        // 0x12f44
                                        __stack_chk_fail();
                                        // branch -> 0x12f48
                                    }
                                    // 0x12f48
                                    g101 = v1;
                                    return g102;
                                }
                                v17 = v16;
                            }
                            // 0x12f30
                            g102 = v17;
                            // branch -> 0x12f32
                        }
                        // 0x12f32
                        duss_osal_mutex_unlock(*(int32_t *)(g100 + 64));
                        // branch -> 0x12f38
                        // 0x12f38
                        if (v5 != *(int32_t *)g105) {
                            // 0x12f44
                            __stack_chk_fail();
                            // branch -> 0x12f48
                        }
                        // 0x12f48
                        g101 = v1;
                        return g102;
                    }
                    // 0x12dfe
                    v11 = v19;
                    // branch -> 0x12e14
                }
                // 0x12e14
                function_11abc(v11, (int32_t)*(int16_t *)(g103 + 8), (char *)&v7);
                // branch -> 0x12f32
                // 0x12f32
                duss_osal_mutex_unlock(*(int32_t *)(g100 + 64));
                // branch -> 0x12f38
                // 0x12f38
                if (v5 != *(int32_t *)g105) {
                    // 0x12f44
                    __stack_chk_fail();
                    // branch -> 0x12f48
                }
                // 0x12f48
                g101 = v1;
                return g102;
            }
            // 0x12dd6
            v22 = g100;
            v28 = *(int32_t *)(v22 + 36);
            *(char *)(v22 + 13) = (char)*(int16_t *)(g101 + 10);
            v18 = g101;
            v25 = *(int32_t *)(v18 + 14);
            v29 = *(int32_t *)(g100 + 44);
            v26 = *(int32_t *)(v18 + 18);
            memcpy((char *)(v29 + v25 - v28), (char *)(v18 + 22), v26);
            v23 = g101;
            v30 = *(int16_t *)(v23 + 10);
            v19 = g100;
            if ((int32_t)v30 == (int32_t)*(char *)(v19 + 12)) {
                // 0x12e20
                v27 = *(int32_t *)(v23 + 18);
                v31 = *(int32_t *)(v19 + 36);
                *(int32_t *)(v19 + 28) = v27 + *(int32_t *)(v23 + 14) - v31;
                duss_log_gen_head();
                if (*(char *)(g100 + 6) != 0) {
                    // 0x12e52
                    duss_log_print();
                    // branch -> 0x12e74
                }
                // 0x12e74
                system("mount -o remount,rw /amt");
                v20 = g100;
                if (*(char *)(v20 + 17) == 0) {
                    // 0x12e84
                    v24 = v20;
                    // branch -> 0x12f20
                    // 0x12f20
                    v38 = *(int32_t *)(v24 + 36);
                    v39 = *(int32_t *)(v24 + 44);
                    v40 = *(int32_t *)(v24 + 28);
                    function_110b0((char *)(int32_t)"/amt/nvram_amt_data.bin", v38, (char *)v39, v40);
                    // branch -> 0x12dfe
                    // 0x12dfe
                    // branch -> 0x12e14
                    // 0x12e14
                    function_11abc(g100, (int32_t)*(int16_t *)(g103 + 8), (char *)&v7);
                    // branch -> 0x12f32
                } else {
                    // 0x12ef4
                    v32 = *(int32_t *)(v20 + 36);
                    v33 = *(int32_t *)(v20 + 44);
                    v34 = *(int32_t *)(v20 + 28);
                    v15 = function_110b0("/amt/nvram_sysconfig_ma.bin", v32, (char *)v33, v34);
                    v17 = v15;
                    if (v15 == 0) {
                        // 0x12f04
                        v21 = g100;
                        v35 = *(int32_t *)(v21 + 36);
                        v36 = *(int32_t *)(v21 + 44);
                        v37 = *(int32_t *)(v21 + 28);
                        v16 = function_110b0("/amt/nvram_sysconfig_ba.bin", v35, (char *)v36, v37);
                        if (v16 == 0) {
                            // 0x12f18
                            v24 = g100;
                            // branch -> 0x12f20
                            // 0x12f20
                            v38 = *(int32_t *)(v24 + 36);
                            v39 = *(int32_t *)(v24 + 44);
                            v40 = *(int32_t *)(v24 + 28);
                            function_110b0((char *)(int32_t)"/amt/nvram_sysconfig_da.bin", v38, (char *)v39, v40);
                            // branch -> 0x12dfe
                            // 0x12dfe
                            // branch -> 0x12e14
                            // 0x12e14
                            function_11abc(g100, (int32_t)*(int16_t *)(g103 + 8), (char *)&v7);
                            // branch -> 0x12f32
                            // 0x12f32
                            duss_osal_mutex_unlock(*(int32_t *)(g100 + 64));
                            // branch -> 0x12f38
                            // 0x12f38
                            if (v5 != *(int32_t *)g105) {
                                // 0x12f44
                                __stack_chk_fail();
                                // branch -> 0x12f48
                            }
                            // 0x12f48
                            g101 = v1;
                            return g102;
                        }
                        v17 = v16;
                    }
                    // 0x12f30
                    g102 = v17;
                    // branch -> 0x12f32
                }
                // 0x12f32
                duss_osal_mutex_unlock(*(int32_t *)(g100 + 64));
                // branch -> 0x12f38
                // 0x12f38
                if (v5 != *(int32_t *)g105) {
                    // 0x12f44
                    __stack_chk_fail();
                    // branch -> 0x12f48
                }
                // 0x12f48
                g101 = v1;
                return g102;
            }
            // 0x12dfe
            v11 = v19;
            // branch -> 0x12e14
        } else {
            // 0x12d7e
            if ((int32_t)v10 == (int32_t)*(char *)(g100 + 13) + 1) {
                // 0x12d86
                // branch -> 0x12d8e
            }
            // 0x12d8e
            duss_log_gen_head();
            if (*(char *)(g100 + 6) != 0) {
                // 0x12dae
                duss_log_print();
                // branch -> 0x12dc8
            }
            // 0x12dc8
            v11 = g100;
            // branch -> 0x12e14
        }
        // 0x12e14
        function_11abc(v11, (int32_t)*(int16_t *)(g103 + 8), (char *)&v7);
        // branch -> 0x12f32
        // 0x12f32
        duss_osal_mutex_unlock(*(int32_t *)(g100 + 64));
        // branch -> 0x12f38
    } else {
        // 0x12bfc
        duss_log_gen_head();
        if (v8 != 0) {
            // 0x12c1a
            duss_log_print();
            // branch -> 0x12c2a
        }
        // 0x12c2a
        function_11abc(g100, (int32_t)*(int16_t *)(g103 + 8), (char *)&v7);
        // branch -> 0x12f38
    }
    // 0x12f38
    if (v5 != *(int32_t *)g105) {
        // 0x12f44
        __stack_chk_fail();
        // branch -> 0x12f48
    }
    // 0x12f48
    g101 = v1;
    return g102;
}

// Address range: 0x12f5c - 0x1316f
int32_t function_12f5c(int32_t a1, int32_t a2, int32_t a3) {
    // 0x12f5c
    int32_t v1;
    char * v2 = (char *)v1; // bp-208
    int32_t v3 = g101; // 0x12f5c
    int32_t v4 = g102; // 0x12f5c
    g101 = a1;
    g100 = a3;
    g104 = g25;
    *(int16_t *)(a1 + 14) = *(int16_t *)(a2 + 4);
    g103 = a2;
    uint32_t v5 = *(int32_t *)g104; // 0x12f76
    *(int16_t *)(g101 + 22) = *(int16_t *)(a2 + 8);
    int32_t v6 = *(int32_t *)(g101 + 64); // 0x12f7e
    duss_osal_mutex_lock(v6, 0x7a120);
    g102 = v6;
    int32_t v7; // R0
    if (v6 == 0) {
        unsigned char v8 = *(char *)(g100 + 9); // 0x12ff0
        g105 = v8;
        if (v8 == 0) {
            int32_t v9 = g101; // 0x12ffa
            int32_t v10 = v9; // 0x13016
            if (*(int32_t *)(v9 + 72) != 0) {
                // 0x12ffe
                *(char *)(v9 + 5) = 1;
                duss_osal_task_join();
                duss_osal_task_free(*(int32_t *)(g101 + 72));
                *(int32_t *)(g101 + 72) = g105;
                v10 = g101;
                // branch -> 0x13010
            }
            // 0x13010
            *(int32_t *)(v10 + 24) = *(int32_t *)(g100 + 18);
            *(char *)(g101 + 16) = *(char *)(g100 + 8);
            *(int32_t *)(g101 + 32) = *(int32_t *)(g100 + 14);
            *(char *)(g101 + 5) = (char)0;
            v2 = "HDTV AMT read task";
            duss_log_gen_head();
            if (*(char *)(g101 + 6) != 0) {
                // 0x1305c
                duss_log_print();
                // branch -> 0x1306a
            }
            int32_t v11 = (int32_t)&v2;
            duss_osal_task_create(v11, g101 + 72);
            g102 = v11;
            duss_log_gen_head();
            if (*(char *)(g101 + 6) != 0) {
                // 0x1309a
                duss_log_print();
                // branch -> 0x130a8
            }
            // 0x130a8
            v7 = 0;
            *(char *)(g100 + 12) = 0;
            *(char *)(g100 + 13) = (char)v7;
            *(char *)(g100 + 10) = (char)v7;
            *(char *)(g100 + 11) = (char)v7;
            *(char *)(g100 + 18) = (char)v7;
            *(char *)(g100 + 19) = (char)v7;
            *(char *)(g100 + 20) = (char)v7;
            *(char *)(g100 + 21) = (char)v7;
            *(char *)(g100 + 3) = 5;
            *(char *)(g100 + 5) = (char)v7;
            *(char *)(g100 + 6) = (char)v7;
            *(char *)(g100 + 7) = (char)v7;
            *(char *)(g100 + 2) = 2;
            *(char *)(g100 + 4) = 14;
            function_11abc(g101, (int32_t)*(int16_t *)(g103 + 8), (char *)g100);
            // branch -> 0x1310e
        } else {
            // 0x130d8
            g94 = 3;
            duss_log_gen_head();
            if (*(char *)(g101 + 6) != 0) {
                // 0x130f8
                g94 = 3;
                duss_log_print();
                // branch -> 0x1310e
            }
        }
        // 0x1310e
        duss_osal_mutex_unlock(*(int32_t *)(g101 + 64));
        // branch -> 0x13114
    } else {
        // 0x12f8c
        duss_log_gen_head();
        if (*(char *)(g101 + 6) != 0) {
            // 0x12fac
            duss_log_print();
            // branch -> 0x12fbc
        }
        // 0x12fbc
        v7 = 0;
        *(char *)(g100 + 9) = 1;
        *(char *)(g100 + 12) = (char)v7;
        *(char *)(g100 + 13) = (char)v7;
        *(char *)(g100 + 10) = (char)v7;
        *(char *)(g100 + 11) = (char)v7;
        *(char *)(g100 + 18) = (char)v7;
        *(char *)(g100 + 19) = (char)v7;
        *(char *)(g100 + 20) = (char)v7;
        *(char *)(g100 + 21) = (char)v7;
        *(char *)(g100 + 2) = 2;
        *(char *)(g100 + 5) = (char)v7;
        *(char *)(g100 + 6) = (char)v7;
        *(char *)(g100 + 7) = (char)v7;
        *(char *)(g100 + 3) = 5;
        *(char *)(g100 + 4) = 14;
        function_11abc(g101, (int32_t)*(int16_t *)(g103 + 8), (char *)g100);
        // branch -> 0x13114
    }
    // 0x13114
    g98 = v5;
    int32_t v12 = *(int32_t *)g104; // 0x13116
    g99 = v12;
    int32_t result = g102; // 0x1311a
    g93 = result;
    g1 = -2 - v12 + v5 <= v5;
    if (v5 != v12) {
        // 0x13120
        __stack_chk_fail();
        // branch -> 0x13124
    }
    // 0x13124
    g101 = v3;
    g102 = v4;
    return result;
}

// Address range: 0x13170 - 0x132ab
int32_t function_13170(int32_t a1, int32_t a2, char * a3) {
    int32_t v1 = g101; // 0x13170
    g101 = (int32_t)a3;
    g103 = g25;
    g102 = a2;
    int32_t v2 = *(int32_t *)g25; // 0x13182
    g100 = a1;
    duss_log_gen_head();
    g104 = g103;
    if (*(char *)(a1 + 6) != 0) {
        // 0x131aa
        duss_log_print();
        // branch -> 0x131b8
    }
    // 0x131b8
    *(int16_t *)(g100 + 14) = *(int16_t *)(g102 + 4);
    int32_t v3 = g101; // 0x131c0
    unsigned char v4 = *(char *)v3; // 0x131c0
    int32_t v5 = (int32_t)*(char *)(v3 + 1); // 0x131c2
    g101 = v5;
    int32_t v6 = *(int32_t *)(g100 + 64); // 0x131ca
    int32_t v7 = 0x10000 * (256 * v5 | (int32_t)v4) / 0x10000;
    duss_osal_mutex_lock(v6, 0x7a120);
    g101 = v6;
    int32_t result; // 0x1326a
    if (v6 != 0) {
        // 0x131e0
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x13200
            duss_log_print();
            // branch -> 0x13210
        }
        // 0x13210
        function_11abc(g100, (int32_t)*(int16_t *)(g102 + 8), (char *)&v7);
        // branch -> 0x13264
        // 0x13264
        result = g101;
        if (v2 != *(int32_t *)g104) {
            // 0x13270
            __stack_chk_fail();
            // branch -> 0x13274
        }
        // 0x13274
        g101 = v1;
        return result;
    }
    // 0x13220
    g103 = 1;
    *(char *)(g100 + 5) = 1;
    duss_osal_mutex_unlock(*(int32_t *)(g100 + 64));
    function_11abc(g100, (int32_t)*(int16_t *)(g102 + 8), (char *)&v7);
    duss_log_gen_head();
    if (*(char *)(g100 + 6) != 0) {
        // 0x13256
        duss_log_print();
        // branch -> 0x13264
    }
    // 0x13264
    result = g101;
    if (v2 != *(int32_t *)g104) {
        // 0x13270
        __stack_chk_fail();
        // branch -> 0x13274
    }
    // 0x13274
    g101 = v1;
    return result;
}

// Address range: 0x132ac - 0x1359f
int32_t function_132ac(int32_t a1, int32_t a2, char * a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = g101; // 0x132ac
    g101 = (int32_t)a3;
    g103 = g25;
    g102 = a2;
    int32_t v2 = *(int32_t *)g25; // 0x132be
    g100 = a1;
    int32_t v3 = 0;
    duss_log_gen_head();
    if (*(char *)(a1 + 6) != 0) {
        // 0x132ea
        duss_log_print();
        // branch -> 0x13338
    }
    // 0x13338
    *(int16_t *)(g100 + 14) = *(int16_t *)(g102 + 4);
    int32_t v4;
    memset((char *)&v4, 0, 12);
    int32_t v5 = g101; // 0x1330a
    unsigned char v6 = *(char *)v5; // 0x1330a
    int32_t v7 = (int32_t)*(char *)(v5 + 1); // 0x1330c
    g101 = v7;
    g104 = (int32_t)"/sys/class/gpio";
    v4 = 0x10000 * (256 * v7 | (int32_t)v6) / 0x10000;
    int32_t v8 = 0;
    duss_hal_device_open((int32_t)"/sys/class/gpio", (int32_t)&v8, (int32_t)&v3);
    g101 = (int32_t)"/sys/class/gpio";
    int32_t result; // 0x1350e
    uint16_t v9; // 0x1350a
    if ((int32_t)"/sys/class/gpio" != -1004) {
        // 0x1333e
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x1335e
            duss_log_print();
            // branch -> 0x13508
        }
        // 0x13508
        g101 = 0;
        v9 = *(int16_t *)(g102 + 8);
        result = function_11abc(g100, (int32_t)v9, (char *)&v4);
        if (v3 != 0 && g101 != 0) {
            // 0x1351a
            duss_hal_device_close();
            // branch -> 0x1351e
        }
        // 0x1351e
        if (v2 != *(int32_t *)g103) {
            // 0x13528
            __stack_chk_fail();
            // branch -> 0x1352c
        }
        // 0x1352c
        g101 = v1;
        return result;
    }
    int32_t v10 = v3; // 0x13376
    duss_hal_gpio_set_direction(v10, 0);
    if (v10 != 0) {
        // 0x13382
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x133a2
            g101 = (int32_t)*(int16_t *)(g100 + 52);
            duss_log_print();
            // branch -> 0x133b4
        }
    }
    int32_t v11 = v3; // 0x133b4
    duss_hal_gpio_get_value(v11);
    g101 = v11;
    if (v11 == 0) {
        // 0x133f8
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x13424
            duss_log_print();
            // branch -> 0x1343e
        }
    } else {
        // 0x133c2
        g101 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/../hdvt_common/amt_cmd.c";
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x133e4
            duss_log_print();
            // branch -> 0x1343e
        }
    }
    int32_t v12 = v3; // 0x1343e
    duss_hal_gpio_set_direction(v12, 0);
    if (v12 != 0) {
        // 0x1344a
        g101 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/../hdvt_common/amt_cmd.c";
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x1346a
            duss_log_print();
            // branch -> 0x1347c
        }
    }
    int32_t v13 = v3; // 0x1347c
    duss_hal_gpio_get_value(v13);
    g101 = v13;
    if (v13 == 0) {
        // 0x134c0
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x134ec
            duss_log_print();
            // branch -> 0x13508
        }
    } else {
        // 0x1348a
        g101 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/../hdvt_common/amt_cmd.c";
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x134ac
            duss_log_print();
            // branch -> 0x13508
        }
    }
    // 0x13508
    g101 = 1;
    v9 = *(int16_t *)(g102 + 8);
    result = function_11abc(g100, (int32_t)v9, (char *)&v4);
    if (v3 != 0 && g101 != 0) {
        // 0x1351a
        duss_hal_device_close();
        // branch -> 0x1351e
    }
    // 0x1351e
    if (v2 != *(int32_t *)g103) {
        // 0x13528
        __stack_chk_fail();
        // branch -> 0x1352c
    }
    // 0x1352c
    g101 = v1;
    return result;
}

// Address range: 0x135a0 - 0x136ab
int32_t function_135a0(int32_t a1, int32_t a2) {
    int32_t v1 = g101; // 0x135a0
    g102 = g25;
    g100 = a1;
    g101 = a2;
    uint32_t v2 = *(int32_t *)g25; // 0x135b2
    int32_t v3;
    int32_t v4 = &v3; // 0x135ce_0
    duss_log_gen_head();
    duss_log_print();
    int32_t v5 = g100; // 0x135f4
    unsigned char v6 = *(char *)(v5 + 8); // 0x135f4
    g92 = v6;
    v3 = 0x9002c;
    int32_t v7 = 0x4d54;
    int32_t result; // 0x13674
    int32_t v8; // 0x13672
    if (*(char *)(v5 + 7) == v6) {
        int32_t v9 = function_12800(v5, g101, v4, (char *)&v7, 1, 0, (int32_t)&g69, 0); // 0x1362e
        g101 = v9;
        if (v9 == 0) {
            // 0x13636
            if (*(char *)(g100 + 7) == 0) {
                // 0x1363e
                system("/system/bin/iptables -A OUTPUT -d 192.168.41.2 -p udp -j DROP");
                // branch -> 0x1366a
                // 0x1366a
                system((char *)(int32_t)"/system/bin/iptables -A OUTPUT -d 192.168.41.3 -p udp -j DROP");
                result = g101;
                // branch -> 0x1366e
            } else {
                // 0x1363a
                g101 = 0;
                result = 0;
                // branch -> 0x1366e
            }
            // 0x1366e
            v8 = *(int32_t *)g102;
            g99 = v8;
            g93 = result;
            g1 = -2 - v8 + v2 <= v2;
            if (v2 != v8) {
                // 0x1367a
                __stack_chk_fail();
                // branch -> 0x1367e
            }
            // 0x1367e
            g101 = v1;
            return result;
        }
        result = v9;
    } else {
        int32_t v10 = function_12800(v5, g101, v4, (char *)&v7, 0, 0, (int32_t)&g69, 0); // 0x13658
        g101 = v10;
        if (v10 == 0) {
            // 0x13660
            if (*(char *)(g100 + 7) == 0) {
                // 0x1366a
                system((char *)(int32_t)"/system/bin/iptables -F OUTPUT");
                result = g101;
                // branch -> 0x1366e
            } else {
                // 0x1363a
                g101 = 0;
                result = 0;
                // branch -> 0x1366e
            }
            // 0x1366e
            v8 = *(int32_t *)g102;
            g99 = v8;
            g93 = result;
            g1 = -2 - v8 + v2 <= v2;
            if (v2 != v8) {
                // 0x1367a
                __stack_chk_fail();
                // branch -> 0x1367e
            }
            // 0x1367e
            g101 = v1;
            return result;
        }
        result = v10;
    }
    // 0x1366e
    v8 = *(int32_t *)g102;
    g99 = v8;
    g93 = result;
    g1 = -2 - v8 + v2 <= v2;
    if (v2 != v8) {
        // 0x1367a
        __stack_chk_fail();
        // branch -> 0x1367e
    }
    // 0x1367e
    g101 = v1;
    return result;
}

// Address range: 0x136ac - 0x13e87
int32_t function_136ac(int32_t a1, int32_t a2, char * a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14, int32_t a15, int32_t a16, int32_t a17, int32_t a18, int32_t a19) {
    int32_t v1 = g101; // 0x136ac
    int32_t v2 = (int32_t)a3; // R6
    g104 = a2;
    int32_t v3 = *(int32_t *)g25; // 0x136c4
    int32_t v4;
    int32_t v5 = &v4; // 0x136d4_2
    g101 = v5;
    g100 = a1;
    duss_log_gen_head();
    if (*(char *)(a1 + 6) != 0) {
        // 0x136f0
        duss_log_print();
        // branch -> 0x13706
    }
    unsigned char v6 = *(char *)v2; // 0x1370e
    unsigned char v7 = *(char *)(v2 + 1); // 0x13712
    *(int16_t *)(g100 + 14) = *(int16_t *)(g104 + 4);
    g103 = (int32_t)*(char *)(v2 + 8);
    int32_t v8 = 0x10000 * (256 * (int32_t)v7 | (int32_t)v6) / 0x10000;
    g98 = v5;
    duss_log_gen_head();
    if (*(char *)(g100 + 6) != 0) {
        // 0x13d7a
        g98 = v5;
        duss_log_print();
        // branch -> 0x13d8c
    }
    unsigned char v9 = *(char *)(v2 + 8); // 0x13d8c
    g102 = v9;
    int32_t result; // 0x13de8
    uint16_t v10; // 0x13de0
    if (v9 != 0) {
        // 0x13de0
        v10 = *(int16_t *)(g104 + 8);
        result = function_11abc(g100, (int32_t)v10, (char *)&v8);
        if (v3 != *(int32_t *)g25) {
            // 0x13df8
            __stack_chk_fail();
            // branch -> 0x13dfc
        }
        // 0x13dfc
        g101 = v1;
        return result;
    }
    // 0x13d90
    g103 = 0x1e8480;
    // branch -> 0x13d92
    while (true) {
        // 0x13d92
        duss_osal_task_sleep(100);
        int32_t v11;
        if (function_e1b8((int32_t *)a4, &v11, g98) == 0) {
            g98 = v11;
            if (v11 != 3) {
                // 0x13da8
                duss_log_gen_head();
                if (*(char *)(g100 + 6) != 0) {
                    // 0x13dc8
                    duss_log_print();
                    // branch -> 0x13de0
                }
                // 0x13de0
                v10 = *(int16_t *)(g104 + 8);
                result = function_11abc(g100, (int32_t)v10, (char *)&v8);
                if (v3 != *(int32_t *)g25) {
                    // 0x13df8
                    __stack_chk_fail();
                    // branch -> 0x13dfc
                }
                // 0x13dfc
                g101 = v1;
                return result;
            }
        }
        int32_t v12 = g102 + 100; // 0x13dda
        g102 = v12;
        if (v12 == g103) {
            // break -> 0x13de0
            break;
        }
        // continue -> 0x13d92
    }
    // 0x13de0
    v10 = *(int16_t *)(g104 + 8);
    result = function_11abc(g100, (int32_t)v10, (char *)&v8);
    if (v3 != *(int32_t *)g25) {
        // 0x13df8
        __stack_chk_fail();
        // branch -> 0x13dfc
    }
    // 0x13dfc
    g101 = v1;
    return result;
}

// Address range: 0x13e88 - 0x14087
int32_t function_13e88(int32_t a1, int32_t a2, char * a3, int32_t a4) {
    // 0x13e88
    int32_t v1;
    int16_t v2 = v1; // bp-2248
    int32_t v3 = g101; // 0x13e88
    g101 = (int32_t)a3;
    g104 = a2;
    int32_t v4 = *(int32_t *)g25; // 0x13e9a
    g100 = a1;
    g102 = &v2;
    v2 = &g65;
    duss_log_gen_head();
    g105 = g25;
    if (*(char *)(a1 + 6) != 0) {
        // 0x13ed0
        duss_log_print();
        // branch -> 0x13ee4
    }
    int32_t v5 = g101; // 0x13ef0
    unsigned char v6 = *(char *)v5; // 0x13ef0
    unsigned char v7 = *(char *)(v5 + 1); // 0x13ef4
    int32_t v8 = 0x7000a;
    int32_t v9 = 0x10000 * (256 * (int32_t)v7 | (int32_t)v6) / 0x10000;
    *(int16_t *)&g51 = (int16_t)&g52;
    g95 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/../hdvt_common/amt_cmd.c";
    g96 = (int32_t)"hdvt_amt_get_wifi_rssi";
    g101 = 4;
    int32_t v10 = &v8; // 0x13f42_0
    // branch -> 0x13f3e
    int32_t result; // 0x14024
    uint16_t v11; // 0x14020
    while (true) {
        int32_t v12 = *(int32_t *)(g100 + 56); // 0x13f40
        int32_t v13;
        duss_event_send_sync(v12, v10, 0x7a120, (int32_t)&v13, g102);
        g103 = v12;
        if (v12 == 0) {
            // 0x13f84
            uint32_t v14;
            int32_t v15 = v14 % 256; // 0x13f84
            g103 = v15;
            uint32_t v16;
            uint32_t v17 = v16 % 256; // 0x13f88
            g102 = v17;
            if (v15 == 0) {
                // 0x13f8e
                if (v17 > 1) {
                    // 0x13fc8
                    duss_log_gen_head();
                    if (*(char *)(g100 + 6) != 0) {
                        // 0x13ff8
                        duss_log_print();
                        // branch -> 0x1401c
                    }
                    // 0x1401c
                    v11 = *(int16_t *)(g104 + 8);
                    result = function_11abc(g100, (int32_t)v11, (char *)&v9);
                    if (v4 != *(int32_t *)g105) {
                        // 0x14034
                        __stack_chk_fail();
                        // branch -> 0x14038
                    }
                    // 0x14038
                    g101 = v3;
                    return result;
                }
            }
            // 0x13f92
            duss_log_gen_head();
            if (*(char *)(g100 + 6) != 0) {
                // 0x13fb4
                duss_log_print();
                // branch -> 0x1401c
            }
            // 0x1401c
            v11 = *(int16_t *)(g104 + 8);
            result = function_11abc(g100, (int32_t)v11, (char *)&v9);
            if (v4 != *(int32_t *)g105) {
                // 0x14034
                __stack_chk_fail();
                // branch -> 0x14038
            }
            // 0x14038
            g101 = v3;
            return result;
        }
        // 0x13f52
        duss_log_gen_head();
        if (*(char *)(g100 + 6) != 0) {
            // 0x13f6c
            duss_log_print();
            // branch -> 0x14016
        }
        int32_t v18 = g101;
        g101 = v18 - 1;
        if (v18 == 0) {
            // break -> 0x1401c
            break;
        }
        // continue -> 0x13f3e
    }
    // 0x1401c
    v11 = *(int16_t *)(g104 + 8);
    result = function_11abc(g100, (int32_t)v11, (char *)&v9);
    if (v4 != *(int32_t *)g105) {
        // 0x14034
        __stack_chk_fail();
        // branch -> 0x14038
    }
    // 0x14038
    g101 = v3;
    return result;
}

// Address range: 0x14088 - 0x1425b
int32_t function_14088(int32_t a1, int32_t a2, char * a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    int32_t str2;
    int32_t v1 = &str2; // 0x140b6_0
    g101 = v1;
    memset((char *)&str2, 0, 256);
    struct _IO_FILE * stream = popen("busybox devmem 0xe007ff3c 32", "r"); // 0x140d0
    int32_t stream2 = (int32_t)stream; // R10
    char * str = fgets((char *)&str2, 256, stream); // 0x140de
    char v2 = *(char *)(a1 + 6); // 0x140e4
    struct _IO_FILE * stream3; // 0x141c2
    int32_t err_num2; // 0x1424e
    if (str == NULL) {
        // 0x14174
        duss_log_gen_head();
        if (v2 != 0) {
            // 0x14194
            duss_log_print();
            // branch -> 0x141a2
        }
        // 0x141a2
        // branch -> 0x141a4
    } else {
        // 0x140ec
        duss_log_gen_head();
        if (v2 != 0) {
            // 0x1410c
            duss_log_print();
            // branch -> 0x1411c
        }
        // 0x1411c
        if (strtol((char *)&str2, NULL, 16) == 0) {
            // 0x1412c
            g101 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/../hdvt_common/amt_cmd.c";
            duss_log_gen_head();
            if (*(char *)(a1 + 6) != 0) {
                // 0x1414c
                g101 = *__errno();
                int32_t err_num = *__errno(); // 0x1415a
                strerror(err_num);
                duss_log_print();
                // branch -> 0x141a4
            }
            // 0x141a4
            g101 = v1;
            pclose((struct _IO_FILE *)stream2);
            memset((char *)&str2, 0, 256);
            stream3 = popen("busybox devmem 0xe007ff2c 32", "r");
            fgets((char *)&str2, 256, stream3);
            duss_log_gen_head();
            if (*(char *)(a1 + 6) != 0) {
                // 0x141fc
                duss_log_print();
                // branch -> 0x1420c
            }
            // 0x1420c
            g101 = strtol((char *)&str2, NULL, 16);
            duss_log_gen_head();
            __errno();
            err_num2 = *__errno();
            return (int32_t)strerror(err_num2);
        }
    }
    // 0x141a4
    g101 = v1;
    pclose((struct _IO_FILE *)stream2);
    memset((char *)&str2, 0, 256);
    stream3 = popen("busybox devmem 0xe007ff2c 32", "r");
    fgets((char *)&str2, 256, stream3);
    duss_log_gen_head();
    if (*(char *)(a1 + 6) != 0) {
        // 0x141fc
        duss_log_print();
        // branch -> 0x1420c
    }
    // 0x1420c
    g101 = strtol((char *)&str2, NULL, 16);
    duss_log_gen_head();
    __errno();
    err_num2 = *__errno();
    return (int32_t)strerror(err_num2);
}

// Address range: 0x1425c - 0x1426b
int32_t function_1425c(void) {
    // 0x1425c
    duss_log_print();
    int32_t result = function_1429a(g96); // 0x14268
    g93 = result;
    return result;
}

// Address range: 0x1426c - 0x1427b
void function_1426c(int32_t a1) {
    // 0x1426c
    g93 = a1 + 0x14272;
    g99 = (int32_t)"hdvt_amt_get_version";
    g98 = &g79;
}

// Address range: 0x1427c - 0x14299
int32_t function_1427c(void) {
    g93 = g97;
    g94 = 1;
    int32_t v1;
    int32_t v2 = &v1; // 0x14280_0
    g98 = v2;
    g99 = 128;
    duss_log_gen_head();
    int32_t result; // 0x14298_1
    if (g93 != 0) {
        // 0x1428a
        g93 = (int32_t)*(char *)(g100 + 6);
        g94 = 1;
        g98 = v2;
        g99 = (int32_t)"NO DSP version\n";
        duss_log_print();
        result = g93;
        // branch -> 0x14298
    } else {
        result = 0;
    }
    // 0x14298
    g101 = 0;
    return result;
}

// Address range: 0x1429a - 0x14367
int32_t function_1429a(int32_t a1) {
    pclose((struct _IO_FILE *)g95);
    duss_log_gen_head();
    if (*(char *)(g100 + 6) != 0) {
        // 0x142c2
        duss_log_print();
        // branch -> 0x142d8
    }
    // 0x142d8
    int32_t v1;
    int32_t v2 = &v1; // 0x142de_0
    g93 = function_11abc(g100, (int32_t)*(int16_t *)(g104 + 8), (char *)&v1);
    uint32_t v3;
    g94 = v3;
    int32_t v4 = *(int32_t *)g103; // 0x142e6
    g99 = v4;
    uint32_t v5 = -2 - v4 + v3; // 0x142e8
    g3 = ((v5 ^ v3) & (v5 ^ -v4)) < 0;
    g2 = v3 - v4 < 0;
    g4 = v3 == v4;
    g1 = v5 <= v3;
    if (v3 != v4) {
        // 0x142ec
        __stack_chk_fail();
        // branch -> 0x142f0
    }
    // 0x142f0
    int32_t v6;
    g100 = 0x1000000 * v6 / 0x1000000;
    int32_t v7;
    g101 = v7;
    int32_t v8;
    g102 = v8;
    int32_t v9;
    g103 = v9;
    int32_t v10;
    g104 = v10;
    int32_t v11;
    g105 = v11;
    int32_t v12;
    g95 = v12;
    int32_t v13;
    g96 = v13;
    int32_t v14;
    ((int32_t (*)())v14)();
    int32_t v15;
    g101 = v15;
    *(int32_t *)(v2 + 48) = v15;
    *(char *)(g102 + g100) = (char)v2;
    int32_t v16 = (int32_t)*(char *)(g103 + 8); // 0x14310
    *(int32_t *)(g101 + 44) = v16;
    *(char *)(g101 + g99) = (char)g100;
    g98 = (int32_t)*(char *)(g103 + 7);
    *(int32_t *)(g101 + 40) = g94;
    *(char *)(g101 + g98) = (char)g98;
    *(int32_t *)(g99 + 40) = g99;
    *(int32_t *)(g94 + 40) = v16;
    g3 = ((g103 - 113 ^ g103) & g103 + 0x7fffff8f) < 0;
    *(char *)(g94 + v16) = (char)g98;
    *(int32_t *)(g99 + 36) = g101;
    *(char *)(2 * v16) = (char)g98;
    g100 = (int32_t)*(char *)(g94 + 4);
    *(int32_t *)(g99 + 32) = g94;
    *(int16_t *)(2 * g102) = (int16_t)g100;
    unsigned char v17 = *(char *)(g103 + 2); // 0x14354
    g102 = v17;
    *(int32_t *)(g94 + 32) = g100;
    *(int16_t *)(g103 + g101) = (int16_t)v17;
    int32_t result = (int32_t)*(char *)(g94 + 2); // 0x14360
    *(int32_t *)(g99 + 28) = g100;
    g93 = result;
    g1 = g103 > 112;
    return result;
}

// Address range: 0x14368 - 0x1443f
int32_t function_14368(int32_t a1, int32_t a2, char * a3, int32_t a4) {
    int32_t v1 = g101; // 0x14368
    g104 = a2;
    g102 = g25;
    g103 = 0;
    int32_t v2 = 0;
    g101 = a1;
    int32_t v3 = (int32_t)*(char *)((int32_t)a3 + 1); // 0x14384
    int32_t v4 = 256 * v3 | (int32_t)*a3; // 0x1438c
    g100 = v4;
    int32_t v5 = 0x10000 * v4 / 0x10000;
    function_10b0c(&v2, (int32_t)*(char *)(a1 + 6), v3);
    int32_t v6;
    g100 = &v6;
    memset((char *)&v6, g103, 16);
    g103 = (int32_t)*(char *)(g101 + 6);
    int32_t v7 = function_106b4((char *)&v6, 16, "board_sn=", 9); // 0x143c2
    g103 = g102;
    if (v7 == 0) {
        // 0x143ca
        int32_t v8;
        g102 = &v8;
        v8 = v6;
        // branch -> 0x143d4
    }
    // 0x143d4
    duss_log_gen_head();
    if (*(char *)(g101 + 6) != 0) {
        // 0x143f4
        duss_log_print();
        // branch -> 0x14408
    }
    uint16_t v9 = *(int16_t *)(g104 + 8); // 0x14408
    int32_t result = function_11abc(g101, (int32_t)v9, (char *)&v5); // 0x14410
    if (*(int32_t *)g25 != *(int32_t *)g103) {
        // 0x1441c
        __stack_chk_fail();
        // branch -> 0x14420
    }
    // 0x14420
    g101 = v1;
    return result;
}

// Address range: 0x14440 - 0x14477
int32_t function_14440(int32_t a1) {
    // 0x14440
    g101 = -32;
    uint32_t v1 = g98 + g94; // 0x14452
    g1 = v1 + -2 - *(int32_t *)(a1 + 8) <= v1;
    g102 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/../../sdrs/sdrs_shram.c";
    g100 = (int32_t)"sdrs_set_shram";
    g101 = 15;
    g93 = 100;
    g94 = 1;
    duss_log_gen_head();
    g99 = 0x60af;
    return 100;
}

// Address range: 0x14478 - 0x1448f
int32_t function_14478(int32_t a1, int32_t a2, int32_t a3) {
    g94 = 1;
    int32_t v1;
    g98 = &v1;
    g99 += 0x14486;
    duss_log_print();
    g93 = -1;
    exit(-1);
    // UNREACHABLE
}

// Address range: 0x14490 - 0x144c3
void function_14490(int32_t a1, int32_t a2, int32_t a3, char * a4, int32_t a5, int32_t a6) {
    int32_t v1 = *(int32_t *)(a1 + 12); // 0x14490
    g101 = v1;
    int32_t v2 = *(int32_t *)(a1 + 4); // 0x14492
    g94 = (int32_t)a4;
    int32_t dest_mem = (int32_t)memcpy((char *)(v2 + v1 + a2), a4, a3); // 0x1449a_7
    g93 = dest_mem;
    uint32_t v3;
    g98 = v3;
    int32_t v4 = *(int32_t *)g100; // 0x144a0
    g99 = v4;
    uint32_t v5 = -2 - v4 + v3; // 0x144a2
    g3 = ((v5 ^ v3) & (v5 ^ -v4)) < 0;
    g2 = v3 - v4 < 0;
    g4 = v3 == v4;
    g1 = v5 <= v3;
    if (v3 != v4) {
        // 0x144a6
        __stack_chk_fail();
        // branch -> 0x144aa
    }
    // 0x144aa
    int32_t v6;
    g100 = v6;
    int32_t v7;
    g101 = v7;
    int32_t v8;
    g102 = v8;
    int32_t v9;
    ((int32_t (*)())v9)();
    *(int32_t *)(g99 + 8) = v8;
    int32_t v10 = (int32_t)*(char *)(dest_mem + 3); // 0x144bc
    g101 = v10;
    *(int32_t *)(v10 + 8) = g103;
}

// Address range: 0x144c4 - 0x14547
int32_t function_144c4(int32_t a1, int32_t a2) {
    int32_t v1 = g100; // 0x144c4
    int32_t v2 = g101; // 0x144c4
    int32_t v3 = g102; // 0x144c4
    g101 = -32;
    uint32_t v4 = *(int32_t *)g25; // 0x144d0
    int32_t v5 = *(int32_t *)(a1 + 8); // 0x144d2
    g101 = v5;
    uint32_t v6 = g98 + a2; // 0x144d6
    uint32_t v7 = v6 + -2 - v5; // 0x144d8
    g3 = ((v7 ^ v6) & (v7 ^ -v5)) < 0;
    g1 = v7 <= v6;
    if (v6 == v5 || v7 > v6) {
        int32_t v8 = *(int32_t *)(a1 + 12); // 0x14514
        g101 = v8;
        int32_t v9 = *(int32_t *)(a1 + 4); // 0x14518
        g101 = v9;
        int32_t dest_mem = (int32_t)memcpy((char *)g99, (char *)(v9 + v8 + a2), g98); // 0x1451e_7
        g93 = dest_mem;
        int32_t v10 = *(int32_t *)g25; // 0x14524
        g99 = v10;
        uint32_t v11 = -2 - v10 + v4; // 0x14526
        g3 = ((v11 ^ v4) & (v11 ^ -v10)) < 0;
        g1 = v11 <= v4;
        if (v4 != v10) {
            // 0x1452a
            __stack_chk_fail();
            // branch -> 0x1452e
        }
        // 0x1452e
        g100 = v1;
        g101 = v2;
        g102 = v3;
        return dest_mem;
    }
    // 0x144dc
    g102 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/../../sdrs/sdrs_shram.c";
    g100 = 21;
    duss_log_gen_head();
    g99 = (int32_t)"sdrs assert failed %s %d\n";
    duss_log_print();
    g93 = -1;
    exit(-1);
    // UNREACHABLE
}

// Address range: 0x14548 - 0x1463d
int32_t function_14548(int32_t a1, int32_t a2) {
    int32_t v1 = g100; // 0x14548
    int32_t v2 = g101; // 0x14548
    int32_t v3 = g102; // 0x14548
    int32_t v4 = g103; // 0x14548
    int32_t v5 = g104; // 0x14548
    int32_t v6 = g105; // 0x14548
    int32_t v7 = g95; // 0x14548
    g101 = g25;
    g104 = a1;
    int32_t v8 = *(int32_t *)g25; // 0x14558
    g99 = v8;
    g103 = a2;
    int32_t fd = open("/dev/mem", 0x101002); // R6
    char * mem = malloc(20); // 0x1456c
    g105 = g101;
    g100 = (int32_t)mem;
    int32_t result; // 0x1462c
    int32_t v9; // 0x14628
    if (mem == NULL) {
        // 0x14576
        close(fd);
        // branch -> 0x14626
        // 0x14626
        g94 = v8;
        v9 = *(int32_t *)g105;
        g98 = v9;
        result = g100;
        g93 = result;
        g1 = -2 - v9 + v8 <= v8;
        if (v8 != v9) {
            // 0x14632
            __stack_chk_fail();
            // branch -> 0x14636
        }
        // 0x14636
        g100 = v1;
        g101 = v2;
        g102 = v3;
        g103 = v4;
        g104 = v5;
        g105 = v6;
        g95 = v7;
        return result;
    }
    // 0x1457e
    int32_t v10;
    if (fd <= 0) {
        // 0x14582
        g101 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/../../sdrs/sdrs_shram.c";
        g102 = 35;
        duss_log_gen_head();
        g1 = true;
        // branch -> 0x1460e
        // 0x1460e
        g94 = 1;
        g98 = &v10;
        g99 = (int32_t)"sdrs assert failed %s %d\n";
        duss_log_print();
        g93 = -1;
        exit(-1);
        // UNREACHABLE
    }
    int32_t v11 = g103 + (int32_t)"ient" & -0x1000; // 0x145c2
    g101 = v11;
    g95 = g104 % 0x1000;
    char * v12 = mmap(NULL, v11, 3, 1, fd, g104 & -0x1000); // 0x145da
    int32_t v13 = (int32_t)v12; // 0x145da_9
    int32_t v14 = v13 + 1; // 0x145de
    g99 = v14;
    g1 = v12 == (char *)-1;
    if (v14 == 0) {
        // 0x145e2
        g102 = (int32_t)"dji/duml/service/hdvt/hdvt_uav/../../sdrs/sdrs_shram.c";
        g100 = (int32_t)"sdrs_create_shram";
        g103 = 41;
        duss_log_gen_head();
        // branch -> 0x1460e
        // 0x1460e
        g94 = 1;
        g98 = &v10;
        g99 = (int32_t)"sdrs assert failed %s %d\n";
        duss_log_print();
        g93 = -1;
        exit(-1);
        // UNREACHABLE
    }
    // 0x1461a
    *(int32_t *)g100 = fd;
    *(int32_t *)(g100 + 8) = g103;
    *(int32_t *)(g100 + 4) = v13;
    *(int32_t *)(g100 + 12) = g95;
    *(int32_t *)(g100 + 16) = g101;
    // branch -> 0x14626
    // 0x14626
    g94 = v8;
    v9 = *(int32_t *)g105;
    g98 = v9;
    result = g100;
    g93 = result;
    g1 = -2 - v9 + v8 <= v8;
    if (v8 != v9) {
        // 0x14632
        __stack_chk_fail();
        // branch -> 0x14636
    }
    // 0x14636
    g100 = v1;
    g101 = v2;
    g102 = v3;
    g103 = v4;
    g104 = v5;
    g105 = v6;
    g95 = v7;
    return result;
}

// Address range: 0x1463e - 0x14663
int32_t function_1463e(int32_t a1, char a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = (int32_t)*(int16_t *)(g101 + g103); // 0x14648
    g101 = v1;
    *(char *)((int32_t)a2 + 30) = a2;
    int16_t v2 = *(int16_t *)((int32_t)*(int16_t *)(g102 + v1) + a3); // 0x14658
    *(char *)(g101 + 28) = a2;
    g101 = (int32_t)*(int16_t *)(2 * (int32_t)v2);
    int32_t result;
    return result;
}

// Address range: 0x14664 - 0x1467f
int32_t function_14664(int32_t * a1, int32_t a2) {
    int32_t fd = (int32_t)a1;
    munmap((char *)*(int32_t *)(fd + 4), *(int32_t *)(fd + 16));
    close(*(int32_t *)fd);
    return function_14734(fd);
}

// Address range: 0x14680 - 0x1468f
int32_t function_14680(int32_t a1) {
    int32_t result = g98; // 0x14680
    g98 = 1;
    function_14440(a1);
    g93 = 100;
    g94 = a1;
    g99 = result;
    return result;
}

// Address range: 0x14690 - 0x146a3
int32_t function_14690(void) {
    int32_t v1 = g93; // 0x14690
    int32_t v2 = g94; // 0x14690
    int32_t result = g98; // 0x14690
    g98 = 1;
    int32_t v3;
    g99 = &v3;
    function_144c4(v1, v2);
    g93 = v3 % 256;
    g94 = v1;
    g98 = v2;
    g99 = result;
    return result;
}

// Address range: 0x146a4 - 0x146c5
int32_t function_146a4(void) {
    int32_t v1 = g100; // 0x146a4
    int32_t v2 = g101; // 0x146a4
    int32_t result = function_14548(-0x1ff80100, 256); // 0x146ac
    g93 = result;
    g94 = 30;
    g100 = result;
    function_14690();
    g101 = result;
    function_14664((int32_t *)result, 30);
    g93 = result;
    g100 = v1;
    g101 = v2;
    return result;
}

// Address range: 0x146c6 - 0x146c7
int32_t function_146c6(void) {
    int32_t result = unknown_146d8(); // 0x146c6
    g93 = result;
    return result;
}

// Address range: 0x146c8 - 0x146eb
int32_t function_146c8(void) {
    int32_t v1 = g100; // 0x146c8
    int32_t v2 = g101; // 0x146c8
    int32_t v3 = function_14548(-0x1000ffc0, 4); // 0x146ce
    g93 = v3;
    g94 = 0;
    g100 = v3;
    function_14690();
    g101 = v3;
    function_14664((int32_t *)v3, 0);
    int32_t v4 = v3 - 85; // 0x146e2
    g94 = v4;
    uint32_t v5 = 85 - v3; // 0x146e6
    int32_t result = 83 - v3 <= 84 - v3; // 0x146e8
    g93 = result;
    uint32_t v6 = (int32_t)(83 - v3 <= 84 - v3);
    g3 = ((v6 ^ v5) & (v6 ^ v4)) < 0;
    g1 = v6 <= v5;
    g100 = v1;
    g101 = v2;
    return result;
}

// Address range: 0x146ec - 0x146ef
void function_146ec(int32_t a1) {
    // 0x146ec
    return;
}

// Address range: 0x146f0 - 0x14711
int32_t function_146f0(void) {
    int32_t v1 = g100; // 0x146f0
    int32_t v2 = g101; // 0x146f0
    int32_t result = function_14548(-0x1ff80100, 256); // 0x146f8
    g93 = result;
    g94 = 48;
    g100 = result;
    function_14690();
    g101 = result;
    function_14664((int32_t *)result, 48);
    g93 = result;
    g100 = v1;
    g101 = v2;
    return result;
}

// Address range: 0x14712 - 0x14713
int32_t function_14712(void) {
    int32_t result = function_14724(); // 0x14712
    g93 = result;
    return result;
}

// Address range: 0x14714 - 0x14723
int32_t function_14714(int32_t a1, int32_t a2) {
    int32_t result = function_1425c(); // 0x1471a
    g93 = result;
    return result;
}

// Address range: 0x14724 - 0x14733
int32_t function_14724(void) {
    int32_t result = g93; // 0x14728
    function_1426c(result);
    return result;
}

// Address range: 0x14734 - 0x14743
int32_t function_14734(int32_t a1) {
    int32_t result = function_1427c(); // 0x1473a
    g93 = result;
    return result;
}

// --------------- Dynamically Linked Functions ---------------

// int __cxa_atexit(void(* func)(void *), void * arg, void * dso_handle);
// int * __errno(void);
// void __libc_init(const struct ProgramVars * vars, void(* atfork_prepare)(void), void(* atfork_parent)(void), void(* atfork_child)(void), const char ** apple);
// void * __memcpy_chk(void * dest, const void * src, size_t len, size_t dstlen);
// void __stack_chk_fail(void);
// int access(const char * name, int type);
// double acos(double);
// int atoi(const char * nptr);
// int bind(int fd, __CONST_SOCKADDR_ARG addr, socklen_t len);
// void * calloc(size_t nmemb, size_t size);
// void cJSON_GetObjectItem(int32_t a1);
// void cJSON_Parse(int32_t a1);
// int close(int fd);
// double cos(double);
// void dji_sdr_secret_code_generate(int32_t a1, int32_t a2);
// void dji_sdr_secret_code_read(int32_t a1, int32_t a2);
// void dji_sdr_secret_code_save(void);
// void dji_sdr_session_key_decrypt(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
// void duss_event_forward(int32_t a1, int32_t a2, int32_t a3);
// void duss_event_resp_data(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
// void duss_event_resp_err(void);
// void duss_event_resp_ok(int32_t a1, int32_t a2);
// void duss_event_send(int32_t a1);
// void duss_event_send_sync(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
// void duss_event_send_with_retry(int32_t a1, int32_t a2);
// void duss_hal_device_close(void);
// void duss_hal_device_open(int32_t a1, int32_t a2, int32_t a3);
// void duss_hal_gpio_get_value(int32_t a1);
// void duss_hal_gpio_set_direction(int32_t a1, int32_t a2);
// void duss_hal_gpio_set_value(int32_t a1, int32_t a2, int32_t a3);
// void duss_log_dump_backtrace(int32_t a1);
// void duss_log_gen_head(void);
// void duss_log_print(void);
// void duss_mb_adjust_route_item(int32_t a1, int32_t a2, int32_t a3);
// void duss_mb_control_route_item(int32_t a1, int32_t a2, int32_t a3);
// void duss_mb_create_route_table(int32_t a1);
// void duss_mb_destroy_route_table(int32_t a1, int32_t a2);
// void duss_mb_find_route_item(int32_t a1);
// void duss_mb_find_route_item_ext(int32_t a1, int32_t a2);
// void duss_osal_event_wait(int32_t a1);
// void duss_osal_msgq_create(int32_t a1, int32_t a2);
// void duss_osal_msgq_destroy(int32_t a1);
// void duss_osal_msgq_receive(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
// void duss_osal_msgq_send(int32_t a1, int32_t a2, int32_t a3);
// void duss_osal_mutex_create(int32_t a1, int32_t a2);
// void duss_osal_mutex_lock(int32_t a1, int32_t a2);
// void duss_osal_mutex_unlock(int32_t a1);
// void duss_osal_task_create(int32_t a1, int32_t a2);
// void duss_osal_task_free(int32_t a1);
// void duss_osal_task_join(void);
// void duss_osal_task_sleep(int32_t a1);
// void duss_osal_timer_create(int32_t a1, int32_t a2);
// void duss_sketch_get_config_file_name(void);
// void duss_sketch_initialize(int32_t a1);
// void duss_util_crc16_append(int32_t a1, int32_t a2, int32_t a3);
// void duss_util_crc8_append(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10);
// void duss_util_sdr_get_param(int32_t a1, int32_t a2);
// void exit(int status);
// int fclose(FILE * stream);
// int fflush(FILE * stream);
// char * fgets(char * restrict s, int n, FILE * restrict stream);
// int fileno(FILE * stream);
// FILE * fopen(const char * restrict filename, const char * restrict modes);
// int fprintf(FILE * restrict stream, const char * restrict format, ...);
// size_t fread(void * restrict ptr, size_t size, size_t n, FILE * restrict stream);
// void free(void * ptr);
// int fscanf(FILE * restrict stream, const char * restrict format, ...);
// int fseek(FILE * stream, long int off, int whence);
// int fsync(int fd);
// size_t fwrite(const void * restrict ptr, size_t size, size_t n, FILE * restrict s);
// int getopt(int argc, char * const * argv, const char * shortopts);
// int gettimeofday(struct timeval * restrict tv, __timezone_ptr_t tz);
// int ioctl(int fd, unsigned long int request, ...);
// void lib_recorder_cmd_set(int32_t a1);
// void lib_recorder_data_ring(int32_t a1);
// void lib_recorder_get_status(int32_t a1);
// struct tm * localtime(const time_t * timer);
// void * malloc(size_t size);
// int memcmp(const void * s1, const void * s2, size_t n);
// void * memcpy(void * restrict dest, const void * restrict src, size_t n);
// void * memset(void * s, int c, size_t n);
// void * mmap(void * addr, size_t len, int prot, int flags, int fd, __off_t offset);
// int munmap(void * addr, size_t len);
// int open(const char * file, int oflag, ...);
// int pclose(FILE * stream);
// int poll(struct pollfd * fds, nfds_t nfds, int timeout);
// FILE * popen(const char * command, const char * modes);
// int prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);
// int printf(const char * restrict format, ...);
// void property_get(int32_t a1, int32_t a2, int32_t a3);
// int puts(const char * s);
// ssize_t read(int fd, void * buf, size_t nbytes);
// int remove(const char * filename);
// ssize_t sendto(int fd, const void * buf, size_t n, int flags, __CONST_SOCKADDR_ARG addr, socklen_t addr_len);
// double sin(double);
// int snprintf(char * restrict s, size_t maxlen, const char * restrict format, ...);
// int socket(int domain, int type, int protocol);
// int sprintf(char * restrict s, const char * restrict format, ...);
// int stat(const char * restrict file, struct stat * restrict buf);
// int strcmp(const char * s1, const char * s2);
// char * strcpy(char * restrict dest, const char * restrict src);
// char * strerror(int errnum);
// size_t strlen(const char * s);
// int strncmp(const char * s1, const char * s2, size_t n);
// char * strncpy(char * restrict dest, const char * restrict src, size_t n);
// char * strstr(char * haystack, const char * needle);
// long int strtol(const char * restrict nptr, char ** restrict endptr, int base);
// void sync(void);
// int system(const char * command);
// time_t time(time_t * timer);
// int unlink(const char * name);
// int usleep(__useconds_t useconds);
// ssize_t write(int fd, const void * buf, size_t n);

// --------------- Instruction-Idiom Functions ----------------

// float32_t fabsf(float32_t a1);
// int32_t llvm_bswap_i32(int32_t a1);

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: gcc (4.7)
// Detected functions: 278
// Decompiler release: v2.2.1 (2016-09-07)
// Decompilation date: 2018-03-29 10:55:54
